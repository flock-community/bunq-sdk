export namespace Wirespec {
  export type Method = "GET" | "PUT" | "POST" | "DELETE" | "OPTIONS" | "HEAD" | "PATCH" | "TRACE"
  export type RawRequest = { method: Method, path: string[], queries: Record<string, string>, headers: Record<string, string>, body?: string }
  export type RawResponse = { status: number, headers: Record<string, string>, body?: string }
  export type Content<T> = { type:string, body:T }
  export type Request<T> = { path: Record<string, unknown>, method: Method, query?: Record<string, unknown>, headers?: Record<string, unknown>, content?:Content<T> }
  export type Response<T> = { status:number, headers?: Record<string, unknown>, content?:Content<T> }
  export type Serialization = { serialize: <T>(type: T) => string; deserialize: <T>(raw: string | undefined) => T }
  export type Client<REQ extends Request<unknown>, RES extends Response<unknown>> = (serialization: Serialization) => { to: (request: REQ) => RawRequest; from: (response: RawResponse) => RES }
  export type Server<REQ extends Request<unknown>, RES extends Response<unknown>> = (serialization: Serialization) => { from: (request: RawRequest) => REQ; to: (response: RES) => RawResponse }
  export type Api<REQ extends Request<unknown>, RES extends Response<unknown>> = { name: string; method: Method, path: string, client: Client<REQ, RES>; server: Server<REQ, RES> }
}
export namespace List_all_AdditionalTransactionInformationCategory_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: AdditionalTransactionInformationCategoryListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_AdditionalTransactionInformationCategory_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": AdditionalTransactionInformationCategoryListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_AdditionalTransactionInformationCategory_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_AdditionalTransactionInformationCategory_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "additional-transaction-information-category"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<AdditionalTransactionInformationCategoryListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_AdditionalTransactionInformationCategory_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_AdditionalTransactionInformationCategory_for_User",
    method: "GET",
    path: "user/:userID/additional-transaction-information-category",
    server,
    client
  } as const
}

export namespace CREATE_AdditionalTransactionInformationCategoryUserDefined_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: AdditionalTransactionInformationCategoryUserDefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: AdditionalTransactionInformationCategoryUserDefinedCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_AdditionalTransactionInformationCategoryUserDefined_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": AdditionalTransactionInformationCategoryUserDefined}): Request => ({
    path: {"userID": props["userID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": AdditionalTransactionInformationCategoryUserDefinedCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_AdditionalTransactionInformationCategoryUserDefined_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_AdditionalTransactionInformationCategoryUserDefined_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "additional-transaction-information-category-user-defined"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<AdditionalTransactionInformationCategoryUserDefinedCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_AdditionalTransactionInformationCategoryUserDefined_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_AdditionalTransactionInformationCategoryUserDefined_for_User",
    method: "POST",
    path: "user/:userID/additional-transaction-information-category-user-defined",
    server,
    client
  } as const
}

export namespace CREATE_Attachment_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: AttachmentMonetaryAccount
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: AttachmentMonetaryAccountCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_Attachment_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": AttachmentMonetaryAccount}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": AttachmentMonetaryAccountCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_Attachment_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_Attachment_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "attachment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<AttachmentMonetaryAccountCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_Attachment_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_Attachment_for_User_MonetaryAccount",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/attachment",
    server,
    client
  } as const
}

export namespace READ_Attachment_for_User {
  type Path = {
    "userID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: AttachmentUserRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_Attachment_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": AttachmentUserRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_Attachment_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_Attachment_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<AttachmentUserRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_Attachment_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"itemId": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_Attachment_for_User",
    method: "GET",
    path: "user/:userID/attachment/:itemId",
    server,
    client
  } as const
}

export namespace CREATE_AttachmentPublic {
  type Path = {}
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: AttachmentPublic
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: AttachmentPublicCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_AttachmentPublic400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": AttachmentPublic}): Request => ({
    path: {},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": AttachmentPublicCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_AttachmentPublic400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_AttachmentPublic: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["attachment-public"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<AttachmentPublicCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_AttachmentPublic400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
      
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_AttachmentPublic",
    method: "POST",
    path: "attachment-public",
    server,
    client
  } as const
}

export namespace READ_AttachmentPublic {
  type Path = {
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: AttachmentPublicRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_AttachmentPublic400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": AttachmentPublicRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_AttachmentPublic400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_AttachmentPublic: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["attachment-public", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<AttachmentPublicRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_AttachmentPublic400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "itemId": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_AttachmentPublic",
    method: "GET",
    path: "attachment-public/:itemId",
    server,
    client
  } as const
}

export namespace CREATE_Avatar {
  type Path = {}
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: Avatar
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: AvatarCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_Avatar400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": Avatar}): Request => ({
    path: {},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": AvatarCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_Avatar400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_Avatar: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["avatar"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<AvatarCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_Avatar400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
      
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_Avatar",
    method: "POST",
    path: "avatar",
    server,
    client
  } as const
}

export namespace READ_Avatar {
  type Path = {
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: AvatarRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_Avatar400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": AvatarRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_Avatar400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_Avatar: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["avatar", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<AvatarRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_Avatar400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "itemId": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_Avatar",
    method: "GET",
    path: "avatar/:itemId",
    server,
    client
  } as const
}

export namespace List_all_BillingContractSubscription_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: BillingContractSubscriptionListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_BillingContractSubscription_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": BillingContractSubscriptionListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_BillingContractSubscription_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_BillingContractSubscription_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "billing-contract-subscription"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<BillingContractSubscriptionListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_BillingContractSubscription_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_BillingContractSubscription_for_User",
    method: "GET",
    path: "user/:userID/billing-contract-subscription",
    server,
    client
  } as const
}

export namespace READ_BunqmeFundraiserProfile_for_User {
  type Path = {
    "userID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: BunqMeFundraiserProfileUserRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_BunqmeFundraiserProfile_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": BunqMeFundraiserProfileUserRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_BunqmeFundraiserProfile_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_BunqmeFundraiserProfile_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "bunqme-fundraiser-profile", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<BunqMeFundraiserProfileUserRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_BunqmeFundraiserProfile_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"itemId": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_BunqmeFundraiserProfile_for_User",
    method: "GET",
    path: "user/:userID/bunqme-fundraiser-profile/:itemId",
    server,
    client
  } as const
}

export namespace List_all_BunqmeFundraiserProfile_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: BunqMeFundraiserProfileUserListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_BunqmeFundraiserProfile_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": BunqMeFundraiserProfileUserListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_BunqmeFundraiserProfile_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_BunqmeFundraiserProfile_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "bunqme-fundraiser-profile"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<BunqMeFundraiserProfileUserListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_BunqmeFundraiserProfile_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_BunqmeFundraiserProfile_for_User",
    method: "GET",
    path: "user/:userID/bunqme-fundraiser-profile",
    server,
    client
  } as const
}

export namespace READ_BunqmeFundraiserResult_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: BunqMeFundraiserResultRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_BunqmeFundraiserResult_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": BunqMeFundraiserResultRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_BunqmeFundraiserResult_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_BunqmeFundraiserResult_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "bunqme-fundraiser-result", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<BunqMeFundraiserResultRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_BunqmeFundraiserResult_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_BunqmeFundraiserResult_for_User_MonetaryAccount",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/bunqme-fundraiser-result/:itemId",
    server,
    client
  } as const
}

export namespace List_all_BunqmeTab_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: BunqMeTabListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_BunqmeTab_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": BunqMeTabListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_BunqmeTab_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_BunqmeTab_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "bunqme-tab"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<BunqMeTabListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_BunqmeTab_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_BunqmeTab_for_User_MonetaryAccount",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/bunqme-tab",
    server,
    client
  } as const
}

export namespace CREATE_BunqmeTab_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: BunqMeTab
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: BunqMeTabCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_BunqmeTab_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": BunqMeTab}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": BunqMeTabCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_BunqmeTab_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_BunqmeTab_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "bunqme-tab"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<BunqMeTabCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_BunqmeTab_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_BunqmeTab_for_User_MonetaryAccount",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/bunqme-tab",
    server,
    client
  } as const
}

export namespace READ_BunqmeTab_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: BunqMeTabRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_BunqmeTab_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": BunqMeTabRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_BunqmeTab_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_BunqmeTab_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "bunqme-tab", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<BunqMeTabRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_BunqmeTab_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_BunqmeTab_for_User_MonetaryAccount",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/bunqme-tab/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_BunqmeTab_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: BunqMeTab
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: BunqMeTabUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_BunqmeTab_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": BunqMeTab}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": BunqMeTabUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_BunqmeTab_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_BunqmeTab_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "bunqme-tab", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<BunqMeTabUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_BunqmeTab_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_BunqmeTab_for_User_MonetaryAccount",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/bunqme-tab/:itemId",
    server,
    client
  } as const
}

export namespace READ_BunqmeTabResultResponse_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: BunqMeTabResultResponseRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_BunqmeTabResultResponse_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": BunqMeTabResultResponseRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_BunqmeTabResultResponse_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_BunqmeTabResultResponse_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "bunqme-tab-result-response", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<BunqMeTabResultResponseRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_BunqmeTabResultResponse_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_BunqmeTabResultResponse_for_User_MonetaryAccount",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/bunqme-tab-result-response/:itemId",
    server,
    client
  } as const
}

export namespace READ_CallbackUrl_for_User_OauthClient {
  type Path = {
    "userID": number,
    "oauth-clientID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: OauthCallbackUrlRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_CallbackUrl_for_User_OauthClient400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "oauth-clientID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "oauth-clientID": props["oauth-clientID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": OauthCallbackUrlRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_CallbackUrl_for_User_OauthClient400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_CallbackUrl_for_User_OauthClient: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "oauth-client", serialization.serialize(it.path["oauth-clientID"]), "callback-url", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<OauthCallbackUrlRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_CallbackUrl_for_User_OauthClient400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"oauth-clientID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_CallbackUrl_for_User_OauthClient",
    method: "GET",
    path: "user/:userID/oauth-client/:oauth-clientID/callback-url/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_CallbackUrl_for_User_OauthClient {
  type Path = {
    "userID": number,
    "oauth-clientID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: OauthCallbackUrl
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: OauthCallbackUrlUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_CallbackUrl_for_User_OauthClient400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "oauth-clientID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": OauthCallbackUrl}): Request => ({
    path: {"userID": props["userID"], "oauth-clientID": props["oauth-clientID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": OauthCallbackUrlUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_CallbackUrl_for_User_OauthClient400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_CallbackUrl_for_User_OauthClient: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "oauth-client", serialization.serialize(it.path["oauth-clientID"]), "callback-url", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<OauthCallbackUrlUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_CallbackUrl_for_User_OauthClient400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"oauth-clientID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_CallbackUrl_for_User_OauthClient",
    method: "PUT",
    path: "user/:userID/oauth-client/:oauth-clientID/callback-url/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_CallbackUrl_for_User_OauthClient {
  type Path = {
    "userID": number,
    "oauth-clientID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: OauthCallbackUrlDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_CallbackUrl_for_User_OauthClient400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "oauth-clientID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "oauth-clientID": props["oauth-clientID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": OauthCallbackUrlDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_CallbackUrl_for_User_OauthClient400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_CallbackUrl_for_User_OauthClient: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "oauth-client", serialization.serialize(it.path["oauth-clientID"]), "callback-url", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<OauthCallbackUrlDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_CallbackUrl_for_User_OauthClient400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"oauth-clientID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_CallbackUrl_for_User_OauthClient",
    method: "DELETE",
    path: "user/:userID/oauth-client/:oauth-clientID/callback-url/:itemId",
    server,
    client
  } as const
}

export namespace List_all_CallbackUrl_for_User_OauthClient {
  type Path = {
    "userID": number,
    "oauth-clientID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: OauthCallbackUrlListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_CallbackUrl_for_User_OauthClient400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "oauth-clientID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "oauth-clientID": props["oauth-clientID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": OauthCallbackUrlListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_CallbackUrl_for_User_OauthClient400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_CallbackUrl_for_User_OauthClient: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "oauth-client", serialization.serialize(it.path["oauth-clientID"]), "callback-url"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<OauthCallbackUrlListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_CallbackUrl_for_User_OauthClient400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"oauth-clientID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_CallbackUrl_for_User_OauthClient",
    method: "GET",
    path: "user/:userID/oauth-client/:oauth-clientID/callback-url",
    server,
    client
  } as const
}

export namespace CREATE_CallbackUrl_for_User_OauthClient {
  type Path = {
    "userID": number,
    "oauth-clientID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: OauthCallbackUrl
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: OauthCallbackUrlCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_CallbackUrl_for_User_OauthClient400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "oauth-clientID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": OauthCallbackUrl}): Request => ({
    path: {"userID": props["userID"], "oauth-clientID": props["oauth-clientID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": OauthCallbackUrlCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_CallbackUrl_for_User_OauthClient400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_CallbackUrl_for_User_OauthClient: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "oauth-client", serialization.serialize(it.path["oauth-clientID"]), "callback-url"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<OauthCallbackUrlCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_CallbackUrl_for_User_OauthClient400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"oauth-clientID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_CallbackUrl_for_User_OauthClient",
    method: "POST",
    path: "user/:userID/oauth-client/:oauth-clientID/callback-url",
    server,
    client
  } as const
}

export namespace READ_Card_for_User {
  type Path = {
    "userID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CardRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_Card_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CardRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_Card_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_Card_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "card", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CardRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_Card_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"itemId": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_Card_for_User",
    method: "GET",
    path: "user/:userID/card/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_Card_for_User {
  type Path = {
    "userID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: Card
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CardUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_Card_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": Card}): Request => ({
    path: {"userID": props["userID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CardUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_Card_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_Card_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "card", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CardUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_Card_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"itemId": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_Card_for_User",
    method: "PUT",
    path: "user/:userID/card/:itemId",
    server,
    client
  } as const
}

export namespace List_all_Card_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CardListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_Card_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CardListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_Card_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_Card_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "card"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CardListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_Card_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_Card_for_User",
    method: "GET",
    path: "user/:userID/card",
    server,
    client
  } as const
}

export namespace CREATE_CardBatch_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: CardBatch
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CardBatchCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_CardBatch_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": CardBatch}): Request => ({
    path: {"userID": props["userID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CardBatchCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_CardBatch_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_CardBatch_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "card-batch"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CardBatchCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_CardBatch_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_CardBatch_for_User",
    method: "POST",
    path: "user/:userID/card-batch",
    server,
    client
  } as const
}

export namespace CREATE_CardBatchReplace_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: CardBatchReplace
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CardBatchReplaceCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_CardBatchReplace_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": CardBatchReplace}): Request => ({
    path: {"userID": props["userID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CardBatchReplaceCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_CardBatchReplace_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_CardBatchReplace_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "card-batch-replace"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CardBatchReplaceCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_CardBatchReplace_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_CardBatchReplace_for_User",
    method: "POST",
    path: "user/:userID/card-batch-replace",
    server,
    client
  } as const
}

export namespace CREATE_CardCredit_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: CardCredit
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CardCreditCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_CardCredit_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": CardCredit}): Request => ({
    path: {"userID": props["userID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CardCreditCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_CardCredit_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_CardCredit_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "card-credit"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CardCreditCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_CardCredit_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_CardCredit_for_User",
    method: "POST",
    path: "user/:userID/card-credit",
    server,
    client
  } as const
}

export namespace CREATE_CardDebit_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: CardDebit
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CardDebitCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_CardDebit_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": CardDebit}): Request => ({
    path: {"userID": props["userID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CardDebitCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_CardDebit_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_CardDebit_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "card-debit"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CardDebitCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_CardDebit_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_CardDebit_for_User",
    method: "POST",
    path: "user/:userID/card-debit",
    server,
    client
  } as const
}

export namespace List_all_CardName_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CardNameListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_CardName_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CardNameListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_CardName_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_CardName_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "card-name"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CardNameListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_CardName_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_CardName_for_User",
    method: "GET",
    path: "user/:userID/card-name",
    server,
    client
  } as const
}

export namespace List_all_CertificatePinned_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CertificatePinnedListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_CertificatePinned_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CertificatePinnedListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_CertificatePinned_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_CertificatePinned_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "certificate-pinned"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CertificatePinnedListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_CertificatePinned_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_CertificatePinned_for_User",
    method: "GET",
    path: "user/:userID/certificate-pinned",
    server,
    client
  } as const
}

export namespace CREATE_CertificatePinned_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: CertificatePinned
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CertificatePinnedCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_CertificatePinned_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": CertificatePinned}): Request => ({
    path: {"userID": props["userID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CertificatePinnedCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_CertificatePinned_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_CertificatePinned_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "certificate-pinned"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CertificatePinnedCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_CertificatePinned_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_CertificatePinned_for_User",
    method: "POST",
    path: "user/:userID/certificate-pinned",
    server,
    client
  } as const
}

export namespace READ_CertificatePinned_for_User {
  type Path = {
    "userID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CertificatePinnedRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_CertificatePinned_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CertificatePinnedRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_CertificatePinned_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_CertificatePinned_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "certificate-pinned", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CertificatePinnedRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_CertificatePinned_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"itemId": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_CertificatePinned_for_User",
    method: "GET",
    path: "user/:userID/certificate-pinned/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_CertificatePinned_for_User {
  type Path = {
    "userID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CertificatePinnedDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_CertificatePinned_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CertificatePinnedDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_CertificatePinned_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_CertificatePinned_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "certificate-pinned", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CertificatePinnedDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_CertificatePinned_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"itemId": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_CertificatePinned_for_User",
    method: "DELETE",
    path: "user/:userID/certificate-pinned/:itemId",
    server,
    client
  } as const
}

export namespace READ_ChallengeRequest_for_User {
  type Path = {
    "userID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: MasterCardIdentityCheckChallengeRequestUserRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_ChallengeRequest_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": MasterCardIdentityCheckChallengeRequestUserRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_ChallengeRequest_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_ChallengeRequest_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "challenge-request", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<MasterCardIdentityCheckChallengeRequestUserRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_ChallengeRequest_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"itemId": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_ChallengeRequest_for_User",
    method: "GET",
    path: "user/:userID/challenge-request/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_ChallengeRequest_for_User {
  type Path = {
    "userID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: MasterCardIdentityCheckChallengeRequestUser
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: MasterCardIdentityCheckChallengeRequestUserUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_ChallengeRequest_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": MasterCardIdentityCheckChallengeRequestUser}): Request => ({
    path: {"userID": props["userID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": MasterCardIdentityCheckChallengeRequestUserUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_ChallengeRequest_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_ChallengeRequest_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "challenge-request", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<MasterCardIdentityCheckChallengeRequestUserUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_ChallengeRequest_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"itemId": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_ChallengeRequest_for_User",
    method: "PUT",
    path: "user/:userID/challenge-request/:itemId",
    server,
    client
  } as const
}

export namespace List_all_Company_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CompanyListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_Company_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CompanyListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_Company_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_Company_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "company"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CompanyListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_Company_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_Company_for_User",
    method: "GET",
    path: "user/:userID/company",
    server,
    client
  } as const
}

export namespace CREATE_Company_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: Company
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CompanyCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_Company_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": Company}): Request => ({
    path: {"userID": props["userID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CompanyCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_Company_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_Company_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "company"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CompanyCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_Company_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_Company_for_User",
    method: "POST",
    path: "user/:userID/company",
    server,
    client
  } as const
}

export namespace READ_Company_for_User {
  type Path = {
    "userID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CompanyRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_Company_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CompanyRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_Company_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_Company_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "company", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CompanyRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_Company_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"itemId": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_Company_for_User",
    method: "GET",
    path: "user/:userID/company/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_Company_for_User {
  type Path = {
    "userID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: Company
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CompanyUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_Company_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": Company}): Request => ({
    path: {"userID": props["userID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CompanyUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_Company_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_Company_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "company", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CompanyUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_Company_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"itemId": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_Company_for_User",
    method: "PUT",
    path: "user/:userID/company/:itemId",
    server,
    client
  } as const
}

export namespace CREATE_ConfirmationOfFunds_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: ConfirmationOfFunds
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: ConfirmationOfFundsCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_ConfirmationOfFunds_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": ConfirmationOfFunds}): Request => ({
    path: {"userID": props["userID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": ConfirmationOfFundsCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_ConfirmationOfFunds_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_ConfirmationOfFunds_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "confirmation-of-funds"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<ConfirmationOfFundsCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_ConfirmationOfFunds_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_ConfirmationOfFunds_for_User",
    method: "POST",
    path: "user/:userID/confirmation-of-funds",
    server,
    client
  } as const
}

export namespace List_all_Content_for_User_ChatConversation_Attachment {
  type Path = {
    "userID": number,
    "chat-conversationID": number,
    "attachmentID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: AttachmentConversationContentListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_Content_for_User_ChatConversation_Attachment400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "chat-conversationID": number, "attachmentID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "chat-conversationID": props["chat-conversationID"], "attachmentID": props["attachmentID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": AttachmentConversationContentListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_Content_for_User_ChatConversation_Attachment400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_Content_for_User_ChatConversation_Attachment: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "chat-conversation", serialization.serialize(it.path["chat-conversationID"]), "attachment", serialization.serialize(it.path["attachmentID"]), "content"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<AttachmentConversationContentListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_Content_for_User_ChatConversation_Attachment400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"chat-conversationID": serialization.deserialize(it.path[3]),"attachmentID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_Content_for_User_ChatConversation_Attachment",
    method: "GET",
    path: "user/:userID/chat-conversation/:chat-conversationID/attachment/:attachmentID/content",
    server,
    client
  } as const
}

export namespace List_all_Content_for_User_MonetaryAccount_Attachment {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "attachmentID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: AttachmentMonetaryAccountContentListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_Content_for_User_MonetaryAccount_Attachment400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "attachmentID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "attachmentID": props["attachmentID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": AttachmentMonetaryAccountContentListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_Content_for_User_MonetaryAccount_Attachment400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_Content_for_User_MonetaryAccount_Attachment: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "attachment", serialization.serialize(it.path["attachmentID"]), "content"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<AttachmentMonetaryAccountContentListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_Content_for_User_MonetaryAccount_Attachment400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"attachmentID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_Content_for_User_MonetaryAccount_Attachment",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/attachment/:attachmentID/content",
    server,
    client
  } as const
}

export namespace List_all_Content_for_AttachmentPublic {
  type Path = {
    "attachment-publicUUID": string,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: AttachmentPublicContentListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_Content_for_AttachmentPublic400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"attachment-publicUUID": string, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"attachment-publicUUID": props["attachment-publicUUID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": AttachmentPublicContentListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_Content_for_AttachmentPublic400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_Content_for_AttachmentPublic: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["attachment-public", serialization.serialize(it.path["attachment-publicUUID"]), "content"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<AttachmentPublicContentListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_Content_for_AttachmentPublic400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "attachment-publicUUID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_Content_for_AttachmentPublic",
    method: "GET",
    path: "attachment-public/:attachment-publicUUID/content",
    server,
    client
  } as const
}

export namespace List_all_Content_for_User_Attachment {
  type Path = {
    "userID": number,
    "attachmentID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: AttachmentUserContentListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_Content_for_User_Attachment400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "attachmentID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "attachmentID": props["attachmentID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": AttachmentUserContentListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_Content_for_User_Attachment400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_Content_for_User_Attachment: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "attachment", serialization.serialize(it.path["attachmentID"]), "content"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<AttachmentUserContentListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_Content_for_User_Attachment400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"attachmentID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_Content_for_User_Attachment",
    method: "GET",
    path: "user/:userID/attachment/:attachmentID/content",
    server,
    client
  } as const
}

export namespace List_all_Content_for_User_ExportAnnualOverview {
  type Path = {
    "userID": number,
    "export-annual-overviewID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: ExportAnnualOverviewContentListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_Content_for_User_ExportAnnualOverview400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "export-annual-overviewID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "export-annual-overviewID": props["export-annual-overviewID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": ExportAnnualOverviewContentListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_Content_for_User_ExportAnnualOverview400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_Content_for_User_ExportAnnualOverview: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "export-annual-overview", serialization.serialize(it.path["export-annual-overviewID"]), "content"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<ExportAnnualOverviewContentListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_Content_for_User_ExportAnnualOverview400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"export-annual-overviewID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_Content_for_User_ExportAnnualOverview",
    method: "GET",
    path: "user/:userID/export-annual-overview/:export-annual-overviewID/content",
    server,
    client
  } as const
}

export namespace List_all_Content_for_User_MonetaryAccount_ExportRib {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "export-ribID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: ExportRibContentListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_Content_for_User_MonetaryAccount_ExportRib400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "export-ribID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "export-ribID": props["export-ribID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": ExportRibContentListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_Content_for_User_MonetaryAccount_ExportRib400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_Content_for_User_MonetaryAccount_ExportRib: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "export-rib", serialization.serialize(it.path["export-ribID"]), "content"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<ExportRibContentListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_Content_for_User_MonetaryAccount_ExportRib400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"export-ribID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_Content_for_User_MonetaryAccount_ExportRib",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/export-rib/:export-ribID/content",
    server,
    client
  } as const
}

export namespace List_all_Content_for_User_Card_ExportStatementCard {
  type Path = {
    "userID": number,
    "cardID": number,
    "export-statement-cardID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: ExportStatementCardContentListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_Content_for_User_Card_ExportStatementCard400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "cardID": number, "export-statement-cardID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "cardID": props["cardID"], "export-statement-cardID": props["export-statement-cardID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": ExportStatementCardContentListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_Content_for_User_Card_ExportStatementCard400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_Content_for_User_Card_ExportStatementCard: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "card", serialization.serialize(it.path["cardID"]), "export-statement-card", serialization.serialize(it.path["export-statement-cardID"]), "content"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<ExportStatementCardContentListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_Content_for_User_Card_ExportStatementCard400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"cardID": serialization.deserialize(it.path[3]),"export-statement-cardID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_Content_for_User_Card_ExportStatementCard",
    method: "GET",
    path: "user/:userID/card/:cardID/export-statement-card/:export-statement-cardID/content",
    server,
    client
  } as const
}

export namespace List_all_Content_for_User_MonetaryAccount_CustomerStatement {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "customer-statementID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: ExportStatementContentListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_Content_for_User_MonetaryAccount_CustomerStatement400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "customer-statementID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "customer-statementID": props["customer-statementID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": ExportStatementContentListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_Content_for_User_MonetaryAccount_CustomerStatement400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_Content_for_User_MonetaryAccount_CustomerStatement: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "customer-statement", serialization.serialize(it.path["customer-statementID"]), "content"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<ExportStatementContentListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_Content_for_User_MonetaryAccount_CustomerStatement400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"customer-statementID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_Content_for_User_MonetaryAccount_CustomerStatement",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/customer-statement/:customer-statementID/content",
    server,
    client
  } as const
}

export namespace List_all_Content_for_User_MonetaryAccount_Event_Statement {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "eventID": number,
    "statementID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: ExportStatementPaymentContentListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_Content_for_User_MonetaryAccount_Event_Statement400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "eventID": number, "statementID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "eventID": props["eventID"], "statementID": props["statementID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": ExportStatementPaymentContentListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_Content_for_User_MonetaryAccount_Event_Statement400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_Content_for_User_MonetaryAccount_Event_Statement: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "event", serialization.serialize(it.path["eventID"]), "statement", serialization.serialize(it.path["statementID"]), "content"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<ExportStatementPaymentContentListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_Content_for_User_MonetaryAccount_Event_Statement400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"eventID": serialization.deserialize(it.path[5]),"statementID": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_Content_for_User_MonetaryAccount_Event_Statement",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/event/:eventID/statement/:statementID/content",
    server,
    client
  } as const
}

export namespace READ_CredentialPasswordIp_for_User {
  type Path = {
    "userID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UserCredentialPasswordIpRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_CredentialPasswordIp_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UserCredentialPasswordIpRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_CredentialPasswordIp_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_CredentialPasswordIp_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "credential-password-ip", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UserCredentialPasswordIpRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_CredentialPasswordIp_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"itemId": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_CredentialPasswordIp_for_User",
    method: "GET",
    path: "user/:userID/credential-password-ip/:itemId",
    server,
    client
  } as const
}

export namespace List_all_CredentialPasswordIp_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UserCredentialPasswordIpListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_CredentialPasswordIp_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UserCredentialPasswordIpListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_CredentialPasswordIp_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_CredentialPasswordIp_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "credential-password-ip"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UserCredentialPasswordIpListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_CredentialPasswordIp_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_CredentialPasswordIp_for_User",
    method: "GET",
    path: "user/:userID/credential-password-ip",
    server,
    client
  } as const
}

export namespace List_all_CurrencyCloudBeneficiary_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CurrencyCloudBeneficiaryListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_CurrencyCloudBeneficiary_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CurrencyCloudBeneficiaryListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_CurrencyCloudBeneficiary_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_CurrencyCloudBeneficiary_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "currency-cloud-beneficiary"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CurrencyCloudBeneficiaryListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_CurrencyCloudBeneficiary_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_CurrencyCloudBeneficiary_for_User",
    method: "GET",
    path: "user/:userID/currency-cloud-beneficiary",
    server,
    client
  } as const
}

export namespace CREATE_CurrencyCloudBeneficiary_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: CurrencyCloudBeneficiary
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CurrencyCloudBeneficiaryCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_CurrencyCloudBeneficiary_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": CurrencyCloudBeneficiary}): Request => ({
    path: {"userID": props["userID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CurrencyCloudBeneficiaryCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_CurrencyCloudBeneficiary_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_CurrencyCloudBeneficiary_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "currency-cloud-beneficiary"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CurrencyCloudBeneficiaryCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_CurrencyCloudBeneficiary_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_CurrencyCloudBeneficiary_for_User",
    method: "POST",
    path: "user/:userID/currency-cloud-beneficiary",
    server,
    client
  } as const
}

export namespace READ_CurrencyCloudBeneficiary_for_User {
  type Path = {
    "userID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CurrencyCloudBeneficiaryRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_CurrencyCloudBeneficiary_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CurrencyCloudBeneficiaryRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_CurrencyCloudBeneficiary_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_CurrencyCloudBeneficiary_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "currency-cloud-beneficiary", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CurrencyCloudBeneficiaryRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_CurrencyCloudBeneficiary_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"itemId": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_CurrencyCloudBeneficiary_for_User",
    method: "GET",
    path: "user/:userID/currency-cloud-beneficiary/:itemId",
    server,
    client
  } as const
}

export namespace List_all_CurrencyCloudBeneficiaryRequirement_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CurrencyCloudBeneficiaryRequirementListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_CurrencyCloudBeneficiaryRequirement_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CurrencyCloudBeneficiaryRequirementListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_CurrencyCloudBeneficiaryRequirement_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_CurrencyCloudBeneficiaryRequirement_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "currency-cloud-beneficiary-requirement"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CurrencyCloudBeneficiaryRequirementListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_CurrencyCloudBeneficiaryRequirement_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_CurrencyCloudBeneficiaryRequirement_for_User",
    method: "GET",
    path: "user/:userID/currency-cloud-beneficiary-requirement",
    server,
    client
  } as const
}

export namespace CREATE_CurrencyCloudPaymentQuote_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: CurrencyCloudPaymentQuote
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CurrencyCloudPaymentQuoteCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_CurrencyCloudPaymentQuote_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": CurrencyCloudPaymentQuote}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CurrencyCloudPaymentQuoteCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_CurrencyCloudPaymentQuote_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_CurrencyCloudPaymentQuote_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "currency-cloud-payment-quote"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CurrencyCloudPaymentQuoteCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_CurrencyCloudPaymentQuote_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_CurrencyCloudPaymentQuote_for_User_MonetaryAccount",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/currency-cloud-payment-quote",
    server,
    client
  } as const
}

export namespace List_all_CurrencyConversion_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CurrencyConversionListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_CurrencyConversion_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CurrencyConversionListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_CurrencyConversion_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_CurrencyConversion_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "currency-conversion"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CurrencyConversionListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_CurrencyConversion_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_CurrencyConversion_for_User_MonetaryAccount",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/currency-conversion",
    server,
    client
  } as const
}

export namespace READ_CurrencyConversion_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CurrencyConversionRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_CurrencyConversion_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CurrencyConversionRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_CurrencyConversion_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_CurrencyConversion_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "currency-conversion", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CurrencyConversionRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_CurrencyConversion_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_CurrencyConversion_for_User_MonetaryAccount",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/currency-conversion/:itemId",
    server,
    client
  } as const
}

export namespace CREATE_CurrencyConversionQuote_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: CurrencyConversionQuote
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CurrencyConversionQuoteCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_CurrencyConversionQuote_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": CurrencyConversionQuote}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CurrencyConversionQuoteCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_CurrencyConversionQuote_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_CurrencyConversionQuote_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "currency-conversion-quote"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CurrencyConversionQuoteCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_CurrencyConversionQuote_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_CurrencyConversionQuote_for_User_MonetaryAccount",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/currency-conversion-quote",
    server,
    client
  } as const
}

export namespace READ_CurrencyConversionQuote_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CurrencyConversionQuoteRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_CurrencyConversionQuote_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CurrencyConversionQuoteRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_CurrencyConversionQuote_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_CurrencyConversionQuote_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "currency-conversion-quote", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CurrencyConversionQuoteRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_CurrencyConversionQuote_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_CurrencyConversionQuote_for_User_MonetaryAccount",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/currency-conversion-quote/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_CurrencyConversionQuote_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: CurrencyConversionQuote
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CurrencyConversionQuoteUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_CurrencyConversionQuote_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": CurrencyConversionQuote}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CurrencyConversionQuoteUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_CurrencyConversionQuote_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_CurrencyConversionQuote_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "currency-conversion-quote", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CurrencyConversionQuoteUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_CurrencyConversionQuote_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_CurrencyConversionQuote_for_User_MonetaryAccount",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/currency-conversion-quote/:itemId",
    server,
    client
  } as const
}

export namespace List_all_CustomerStatement_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: ExportStatementListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_CustomerStatement_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": ExportStatementListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_CustomerStatement_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_CustomerStatement_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "customer-statement"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<ExportStatementListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_CustomerStatement_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_CustomerStatement_for_User_MonetaryAccount",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/customer-statement",
    server,
    client
  } as const
}

export namespace CREATE_CustomerStatement_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: ExportStatement
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: ExportStatementCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_CustomerStatement_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": ExportStatement}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": ExportStatementCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_CustomerStatement_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_CustomerStatement_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "customer-statement"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<ExportStatementCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_CustomerStatement_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_CustomerStatement_for_User_MonetaryAccount",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/customer-statement",
    server,
    client
  } as const
}

export namespace READ_CustomerStatement_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: ExportStatementRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_CustomerStatement_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": ExportStatementRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_CustomerStatement_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_CustomerStatement_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "customer-statement", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<ExportStatementRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_CustomerStatement_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_CustomerStatement_for_User_MonetaryAccount",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/customer-statement/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_CustomerStatement_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: ExportStatementDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_CustomerStatement_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": ExportStatementDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_CustomerStatement_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_CustomerStatement_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "customer-statement", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<ExportStatementDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_CustomerStatement_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_CustomerStatement_for_User_MonetaryAccount",
    method: "DELETE",
    path: "user/:userID/monetary-account/:monetary-accountID/customer-statement/:itemId",
    server,
    client
  } as const
}

export namespace List_all_Definition_for_User_MonetaryAccount_PaymentAutoAllocate {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "payment-auto-allocateID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: PaymentAutoAllocateDefinitionListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_Definition_for_User_MonetaryAccount_PaymentAutoAllocate400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "payment-auto-allocateID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "payment-auto-allocateID": props["payment-auto-allocateID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": PaymentAutoAllocateDefinitionListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_Definition_for_User_MonetaryAccount_PaymentAutoAllocate400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_Definition_for_User_MonetaryAccount_PaymentAutoAllocate: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-auto-allocate", serialization.serialize(it.path["payment-auto-allocateID"]), "definition"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<PaymentAutoAllocateDefinitionListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_Definition_for_User_MonetaryAccount_PaymentAutoAllocate400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"payment-auto-allocateID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_Definition_for_User_MonetaryAccount_PaymentAutoAllocate",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/payment-auto-allocate/:payment-auto-allocateID/definition",
    server,
    client
  } as const
}

export namespace READ_Device {
  type Path = {
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DeviceRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_Device400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DeviceRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_Device400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_Device: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["device", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DeviceRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_Device400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "itemId": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_Device",
    method: "GET",
    path: "device/:itemId",
    server,
    client
  } as const
}

export namespace List_all_Device {
  type Path = {}
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DeviceListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_Device400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DeviceListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_Device400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_Device: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["device"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DeviceListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_Device400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
      
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_Device",
    method: "GET",
    path: "device",
    server,
    client
  } as const
}

export namespace List_all_DeviceServer {
  type Path = {}
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DeviceServerListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_DeviceServer400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DeviceServerListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_DeviceServer400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_DeviceServer: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["device-server"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DeviceServerListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_DeviceServer400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
      
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_DeviceServer",
    method: "GET",
    path: "device-server",
    server,
    client
  } as const
}

export namespace CREATE_DeviceServer {
  type Path = {}
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: DeviceServer
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DeviceServerCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_DeviceServer400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": DeviceServer}): Request => ({
    path: {},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DeviceServerCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_DeviceServer400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_DeviceServer: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["device-server"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DeviceServerCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_DeviceServer400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
      
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_DeviceServer",
    method: "POST",
    path: "device-server",
    server,
    client
  } as const
}

export namespace READ_DeviceServer {
  type Path = {
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DeviceServerRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_DeviceServer400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DeviceServerRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_DeviceServer400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_DeviceServer: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["device-server", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DeviceServerRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_DeviceServer400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "itemId": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_DeviceServer",
    method: "GET",
    path: "device-server/:itemId",
    server,
    client
  } as const
}

export namespace List_all_DraftPayment_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DraftPaymentListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_DraftPayment_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DraftPaymentListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_DraftPayment_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_DraftPayment_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "draft-payment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DraftPaymentListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_DraftPayment_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_DraftPayment_for_User_MonetaryAccount",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/draft-payment",
    server,
    client
  } as const
}

export namespace CREATE_DraftPayment_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: DraftPayment
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DraftPaymentCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_DraftPayment_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": DraftPayment}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DraftPaymentCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_DraftPayment_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_DraftPayment_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "draft-payment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DraftPaymentCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_DraftPayment_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_DraftPayment_for_User_MonetaryAccount",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/draft-payment",
    server,
    client
  } as const
}

export namespace READ_DraftPayment_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DraftPaymentRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_DraftPayment_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DraftPaymentRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_DraftPayment_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_DraftPayment_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "draft-payment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DraftPaymentRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_DraftPayment_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_DraftPayment_for_User_MonetaryAccount",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/draft-payment/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_DraftPayment_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: DraftPayment
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DraftPaymentUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_DraftPayment_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": DraftPayment}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DraftPaymentUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_DraftPayment_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_DraftPayment_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "draft-payment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DraftPaymentUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_DraftPayment_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_DraftPayment_for_User_MonetaryAccount",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/draft-payment/:itemId",
    server,
    client
  } as const
}

export namespace READ_Event_for_User {
  type Path = {
    "userID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: EventRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_Event_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": EventRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_Event_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_Event_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "event", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<EventRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_Event_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"itemId": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_Event_for_User",
    method: "GET",
    path: "user/:userID/event/:itemId",
    server,
    client
  } as const
}

export namespace List_all_Event_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: EventListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_Event_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": EventListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_Event_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_Event_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "event"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<EventListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_Event_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_Event_for_User",
    method: "GET",
    path: "user/:userID/event",
    server,
    client
  } as const
}

export namespace List_all_ExportAnnualOverview_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: ExportAnnualOverviewListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_ExportAnnualOverview_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": ExportAnnualOverviewListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_ExportAnnualOverview_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_ExportAnnualOverview_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "export-annual-overview"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<ExportAnnualOverviewListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_ExportAnnualOverview_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_ExportAnnualOverview_for_User",
    method: "GET",
    path: "user/:userID/export-annual-overview",
    server,
    client
  } as const
}

export namespace CREATE_ExportAnnualOverview_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: ExportAnnualOverview
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: ExportAnnualOverviewCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_ExportAnnualOverview_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": ExportAnnualOverview}): Request => ({
    path: {"userID": props["userID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": ExportAnnualOverviewCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_ExportAnnualOverview_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_ExportAnnualOverview_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "export-annual-overview"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<ExportAnnualOverviewCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_ExportAnnualOverview_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_ExportAnnualOverview_for_User",
    method: "POST",
    path: "user/:userID/export-annual-overview",
    server,
    client
  } as const
}

export namespace READ_ExportAnnualOverview_for_User {
  type Path = {
    "userID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: ExportAnnualOverviewRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_ExportAnnualOverview_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": ExportAnnualOverviewRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_ExportAnnualOverview_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_ExportAnnualOverview_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "export-annual-overview", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<ExportAnnualOverviewRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_ExportAnnualOverview_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"itemId": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_ExportAnnualOverview_for_User",
    method: "GET",
    path: "user/:userID/export-annual-overview/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_ExportAnnualOverview_for_User {
  type Path = {
    "userID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: ExportAnnualOverviewDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_ExportAnnualOverview_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": ExportAnnualOverviewDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_ExportAnnualOverview_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_ExportAnnualOverview_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "export-annual-overview", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<ExportAnnualOverviewDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_ExportAnnualOverview_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"itemId": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_ExportAnnualOverview_for_User",
    method: "DELETE",
    path: "user/:userID/export-annual-overview/:itemId",
    server,
    client
  } as const
}

export namespace List_all_ExportRib_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: ExportRibListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_ExportRib_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": ExportRibListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_ExportRib_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_ExportRib_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "export-rib"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<ExportRibListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_ExportRib_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_ExportRib_for_User_MonetaryAccount",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/export-rib",
    server,
    client
  } as const
}

export namespace CREATE_ExportRib_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: ExportRib
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: ExportRibCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_ExportRib_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": ExportRib}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": ExportRibCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_ExportRib_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_ExportRib_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "export-rib"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<ExportRibCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_ExportRib_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_ExportRib_for_User_MonetaryAccount",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/export-rib",
    server,
    client
  } as const
}

export namespace READ_ExportRib_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: ExportRibRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_ExportRib_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": ExportRibRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_ExportRib_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_ExportRib_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "export-rib", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<ExportRibRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_ExportRib_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_ExportRib_for_User_MonetaryAccount",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/export-rib/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_ExportRib_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: ExportRibDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_ExportRib_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": ExportRibDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_ExportRib_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_ExportRib_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "export-rib", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<ExportRibDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_ExportRib_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_ExportRib_for_User_MonetaryAccount",
    method: "DELETE",
    path: "user/:userID/monetary-account/:monetary-accountID/export-rib/:itemId",
    server,
    client
  } as const
}

export namespace READ_ExportStatementCard_for_User_Card {
  type Path = {
    "userID": number,
    "cardID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: ExportStatementCardRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_ExportStatementCard_for_User_Card400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "cardID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "cardID": props["cardID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": ExportStatementCardRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_ExportStatementCard_for_User_Card400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_ExportStatementCard_for_User_Card: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "card", serialization.serialize(it.path["cardID"]), "export-statement-card", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<ExportStatementCardRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_ExportStatementCard_for_User_Card400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"cardID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_ExportStatementCard_for_User_Card",
    method: "GET",
    path: "user/:userID/card/:cardID/export-statement-card/:itemId",
    server,
    client
  } as const
}

export namespace List_all_ExportStatementCard_for_User_Card {
  type Path = {
    "userID": number,
    "cardID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: ExportStatementCardListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_ExportStatementCard_for_User_Card400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "cardID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "cardID": props["cardID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": ExportStatementCardListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_ExportStatementCard_for_User_Card400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_ExportStatementCard_for_User_Card: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "card", serialization.serialize(it.path["cardID"]), "export-statement-card"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<ExportStatementCardListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_ExportStatementCard_for_User_Card400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"cardID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_ExportStatementCard_for_User_Card",
    method: "GET",
    path: "user/:userID/card/:cardID/export-statement-card",
    server,
    client
  } as const
}

export namespace List_all_ExportStatementCardCsv_for_User_Card {
  type Path = {
    "userID": number,
    "cardID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: ExportStatementCardCsvListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_ExportStatementCardCsv_for_User_Card400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "cardID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "cardID": props["cardID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": ExportStatementCardCsvListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_ExportStatementCardCsv_for_User_Card400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_ExportStatementCardCsv_for_User_Card: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "card", serialization.serialize(it.path["cardID"]), "export-statement-card-csv"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<ExportStatementCardCsvListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_ExportStatementCardCsv_for_User_Card400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"cardID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_ExportStatementCardCsv_for_User_Card",
    method: "GET",
    path: "user/:userID/card/:cardID/export-statement-card-csv",
    server,
    client
  } as const
}

export namespace CREATE_ExportStatementCardCsv_for_User_Card {
  type Path = {
    "userID": number,
    "cardID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: ExportStatementCardCsv
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: ExportStatementCardCsvCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_ExportStatementCardCsv_for_User_Card400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "cardID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": ExportStatementCardCsv}): Request => ({
    path: {"userID": props["userID"], "cardID": props["cardID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": ExportStatementCardCsvCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_ExportStatementCardCsv_for_User_Card400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_ExportStatementCardCsv_for_User_Card: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "card", serialization.serialize(it.path["cardID"]), "export-statement-card-csv"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<ExportStatementCardCsvCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_ExportStatementCardCsv_for_User_Card400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"cardID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_ExportStatementCardCsv_for_User_Card",
    method: "POST",
    path: "user/:userID/card/:cardID/export-statement-card-csv",
    server,
    client
  } as const
}

export namespace READ_ExportStatementCardCsv_for_User_Card {
  type Path = {
    "userID": number,
    "cardID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: ExportStatementCardCsvRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_ExportStatementCardCsv_for_User_Card400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "cardID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "cardID": props["cardID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": ExportStatementCardCsvRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_ExportStatementCardCsv_for_User_Card400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_ExportStatementCardCsv_for_User_Card: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "card", serialization.serialize(it.path["cardID"]), "export-statement-card-csv", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<ExportStatementCardCsvRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_ExportStatementCardCsv_for_User_Card400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"cardID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_ExportStatementCardCsv_for_User_Card",
    method: "GET",
    path: "user/:userID/card/:cardID/export-statement-card-csv/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_ExportStatementCardCsv_for_User_Card {
  type Path = {
    "userID": number,
    "cardID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: ExportStatementCardCsvDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_ExportStatementCardCsv_for_User_Card400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "cardID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "cardID": props["cardID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": ExportStatementCardCsvDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_ExportStatementCardCsv_for_User_Card400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_ExportStatementCardCsv_for_User_Card: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "card", serialization.serialize(it.path["cardID"]), "export-statement-card-csv", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<ExportStatementCardCsvDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_ExportStatementCardCsv_for_User_Card400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"cardID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_ExportStatementCardCsv_for_User_Card",
    method: "DELETE",
    path: "user/:userID/card/:cardID/export-statement-card-csv/:itemId",
    server,
    client
  } as const
}

export namespace List_all_ExportStatementCardPdf_for_User_Card {
  type Path = {
    "userID": number,
    "cardID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: ExportStatementCardPdfListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_ExportStatementCardPdf_for_User_Card400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "cardID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "cardID": props["cardID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": ExportStatementCardPdfListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_ExportStatementCardPdf_for_User_Card400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_ExportStatementCardPdf_for_User_Card: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "card", serialization.serialize(it.path["cardID"]), "export-statement-card-pdf"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<ExportStatementCardPdfListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_ExportStatementCardPdf_for_User_Card400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"cardID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_ExportStatementCardPdf_for_User_Card",
    method: "GET",
    path: "user/:userID/card/:cardID/export-statement-card-pdf",
    server,
    client
  } as const
}

export namespace CREATE_ExportStatementCardPdf_for_User_Card {
  type Path = {
    "userID": number,
    "cardID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: ExportStatementCardPdf
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: ExportStatementCardPdfCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_ExportStatementCardPdf_for_User_Card400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "cardID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": ExportStatementCardPdf}): Request => ({
    path: {"userID": props["userID"], "cardID": props["cardID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": ExportStatementCardPdfCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_ExportStatementCardPdf_for_User_Card400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_ExportStatementCardPdf_for_User_Card: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "card", serialization.serialize(it.path["cardID"]), "export-statement-card-pdf"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<ExportStatementCardPdfCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_ExportStatementCardPdf_for_User_Card400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"cardID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_ExportStatementCardPdf_for_User_Card",
    method: "POST",
    path: "user/:userID/card/:cardID/export-statement-card-pdf",
    server,
    client
  } as const
}

export namespace READ_ExportStatementCardPdf_for_User_Card {
  type Path = {
    "userID": number,
    "cardID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: ExportStatementCardPdfRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_ExportStatementCardPdf_for_User_Card400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "cardID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "cardID": props["cardID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": ExportStatementCardPdfRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_ExportStatementCardPdf_for_User_Card400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_ExportStatementCardPdf_for_User_Card: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "card", serialization.serialize(it.path["cardID"]), "export-statement-card-pdf", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<ExportStatementCardPdfRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_ExportStatementCardPdf_for_User_Card400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"cardID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_ExportStatementCardPdf_for_User_Card",
    method: "GET",
    path: "user/:userID/card/:cardID/export-statement-card-pdf/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_ExportStatementCardPdf_for_User_Card {
  type Path = {
    "userID": number,
    "cardID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: ExportStatementCardPdfDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_ExportStatementCardPdf_for_User_Card400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "cardID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "cardID": props["cardID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": ExportStatementCardPdfDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_ExportStatementCardPdf_for_User_Card400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_ExportStatementCardPdf_for_User_Card: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "card", serialization.serialize(it.path["cardID"]), "export-statement-card-pdf", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<ExportStatementCardPdfDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_ExportStatementCardPdf_for_User_Card400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"cardID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_ExportStatementCardPdf_for_User_Card",
    method: "DELETE",
    path: "user/:userID/card/:cardID/export-statement-card-pdf/:itemId",
    server,
    client
  } as const
}

export namespace READ_FeatureAnnouncement_for_User {
  type Path = {
    "userID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: FeatureAnnouncementRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_FeatureAnnouncement_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": FeatureAnnouncementRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_FeatureAnnouncement_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_FeatureAnnouncement_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "feature-announcement", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<FeatureAnnouncementRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_FeatureAnnouncement_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"itemId": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_FeatureAnnouncement_for_User",
    method: "GET",
    path: "user/:userID/feature-announcement/:itemId",
    server,
    client
  } as const
}

export namespace List_all_GeneratedCvc2_for_User_Card {
  type Path = {
    "userID": number,
    "cardID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CardGeneratedCvc2Listing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_GeneratedCvc2_for_User_Card400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "cardID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "cardID": props["cardID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CardGeneratedCvc2Listing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_GeneratedCvc2_for_User_Card400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_GeneratedCvc2_for_User_Card: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "card", serialization.serialize(it.path["cardID"]), "generated-cvc2"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CardGeneratedCvc2Listing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_GeneratedCvc2_for_User_Card400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"cardID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_GeneratedCvc2_for_User_Card",
    method: "GET",
    path: "user/:userID/card/:cardID/generated-cvc2",
    server,
    client
  } as const
}

export namespace CREATE_GeneratedCvc2_for_User_Card {
  type Path = {
    "userID": number,
    "cardID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: CardGeneratedCvc2
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CardGeneratedCvc2Create
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_GeneratedCvc2_for_User_Card400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "cardID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": CardGeneratedCvc2}): Request => ({
    path: {"userID": props["userID"], "cardID": props["cardID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CardGeneratedCvc2Create}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_GeneratedCvc2_for_User_Card400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_GeneratedCvc2_for_User_Card: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "card", serialization.serialize(it.path["cardID"]), "generated-cvc2"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CardGeneratedCvc2Create>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_GeneratedCvc2_for_User_Card400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"cardID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_GeneratedCvc2_for_User_Card",
    method: "POST",
    path: "user/:userID/card/:cardID/generated-cvc2",
    server,
    client
  } as const
}

export namespace READ_GeneratedCvc2_for_User_Card {
  type Path = {
    "userID": number,
    "cardID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CardGeneratedCvc2Read
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_GeneratedCvc2_for_User_Card400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "cardID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "cardID": props["cardID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CardGeneratedCvc2Read}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_GeneratedCvc2_for_User_Card400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_GeneratedCvc2_for_User_Card: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "card", serialization.serialize(it.path["cardID"]), "generated-cvc2", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CardGeneratedCvc2Read>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_GeneratedCvc2_for_User_Card400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"cardID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_GeneratedCvc2_for_User_Card",
    method: "GET",
    path: "user/:userID/card/:cardID/generated-cvc2/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_GeneratedCvc2_for_User_Card {
  type Path = {
    "userID": number,
    "cardID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: CardGeneratedCvc2
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CardGeneratedCvc2Update
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_GeneratedCvc2_for_User_Card400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "cardID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": CardGeneratedCvc2}): Request => ({
    path: {"userID": props["userID"], "cardID": props["cardID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CardGeneratedCvc2Update}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_GeneratedCvc2_for_User_Card400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_GeneratedCvc2_for_User_Card: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "card", serialization.serialize(it.path["cardID"]), "generated-cvc2", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CardGeneratedCvc2Update>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_GeneratedCvc2_for_User_Card400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"cardID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_GeneratedCvc2_for_User_Card",
    method: "PUT",
    path: "user/:userID/card/:cardID/generated-cvc2/:itemId",
    server,
    client
  } as const
}

export namespace List_all_IdealMerchantTransaction_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: IdealMerchantTransactionListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_IdealMerchantTransaction_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": IdealMerchantTransactionListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_IdealMerchantTransaction_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_IdealMerchantTransaction_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "ideal-merchant-transaction"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<IdealMerchantTransactionListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_IdealMerchantTransaction_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_IdealMerchantTransaction_for_User_MonetaryAccount",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/ideal-merchant-transaction",
    server,
    client
  } as const
}

export namespace CREATE_IdealMerchantTransaction_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: IdealMerchantTransaction
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: IdealMerchantTransactionCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_IdealMerchantTransaction_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": IdealMerchantTransaction}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": IdealMerchantTransactionCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_IdealMerchantTransaction_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_IdealMerchantTransaction_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "ideal-merchant-transaction"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<IdealMerchantTransactionCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_IdealMerchantTransaction_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_IdealMerchantTransaction_for_User_MonetaryAccount",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/ideal-merchant-transaction",
    server,
    client
  } as const
}

export namespace READ_IdealMerchantTransaction_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: IdealMerchantTransactionRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_IdealMerchantTransaction_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": IdealMerchantTransactionRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_IdealMerchantTransaction_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_IdealMerchantTransaction_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "ideal-merchant-transaction", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<IdealMerchantTransactionRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_IdealMerchantTransaction_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_IdealMerchantTransaction_for_User_MonetaryAccount",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/ideal-merchant-transaction/:itemId",
    server,
    client
  } as const
}

export namespace List_all_InsightPreferenceDate_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: InsightPreferenceDateListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_InsightPreferenceDate_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": InsightPreferenceDateListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_InsightPreferenceDate_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_InsightPreferenceDate_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "insight-preference-date"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<InsightPreferenceDateListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_InsightPreferenceDate_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_InsightPreferenceDate_for_User",
    method: "GET",
    path: "user/:userID/insight-preference-date",
    server,
    client
  } as const
}

export namespace List_all_Insights_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: InsightListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_Insights_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": InsightListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_Insights_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_Insights_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "insights"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<InsightListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_Insights_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_Insights_for_User",
    method: "GET",
    path: "user/:userID/insights",
    server,
    client
  } as const
}

export namespace List_all_InsightsSearch_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: InsightEventListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_InsightsSearch_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": InsightEventListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_InsightsSearch_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_InsightsSearch_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "insights-search"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<InsightEventListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_InsightsSearch_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_InsightsSearch_for_User",
    method: "GET",
    path: "user/:userID/insights-search",
    server,
    client
  } as const
}

export namespace List_all_Installation {
  type Path = {}
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: InstallationListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_Installation400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": InstallationListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_Installation400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_Installation: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["installation"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<InstallationListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_Installation400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
      
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_Installation",
    method: "GET",
    path: "installation",
    server,
    client
  } as const
}

export namespace CREATE_Installation {
  type Path = {}
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: Installation
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: InstallationCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_Installation400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": Installation}): Request => ({
    path: {},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": InstallationCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_Installation400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_Installation: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["installation"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<InstallationCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_Installation400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
      
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_Installation",
    method: "POST",
    path: "installation",
    server,
    client
  } as const
}

export namespace READ_Installation {
  type Path = {
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: InstallationRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_Installation400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": InstallationRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_Installation400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_Installation: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["installation", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<InstallationRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_Installation400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "itemId": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_Installation",
    method: "GET",
    path: "installation/:itemId",
    server,
    client
  } as const
}

export namespace List_all_Instance_for_User_MonetaryAccount_PaymentAutoAllocate {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "payment-auto-allocateID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: PaymentAutoAllocateInstanceListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_Instance_for_User_MonetaryAccount_PaymentAutoAllocate400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "payment-auto-allocateID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "payment-auto-allocateID": props["payment-auto-allocateID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": PaymentAutoAllocateInstanceListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_Instance_for_User_MonetaryAccount_PaymentAutoAllocate400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_Instance_for_User_MonetaryAccount_PaymentAutoAllocate: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-auto-allocate", serialization.serialize(it.path["payment-auto-allocateID"]), "instance"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<PaymentAutoAllocateInstanceListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_Instance_for_User_MonetaryAccount_PaymentAutoAllocate400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"payment-auto-allocateID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_Instance_for_User_MonetaryAccount_PaymentAutoAllocate",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/payment-auto-allocate/:payment-auto-allocateID/instance",
    server,
    client
  } as const
}

export namespace READ_Instance_for_User_MonetaryAccount_PaymentAutoAllocate {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "payment-auto-allocateID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: PaymentAutoAllocateInstanceRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_Instance_for_User_MonetaryAccount_PaymentAutoAllocate400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "payment-auto-allocateID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "payment-auto-allocateID": props["payment-auto-allocateID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": PaymentAutoAllocateInstanceRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_Instance_for_User_MonetaryAccount_PaymentAutoAllocate400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_Instance_for_User_MonetaryAccount_PaymentAutoAllocate: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-auto-allocate", serialization.serialize(it.path["payment-auto-allocateID"]), "instance", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<PaymentAutoAllocateInstanceRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_Instance_for_User_MonetaryAccount_PaymentAutoAllocate400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"payment-auto-allocateID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_Instance_for_User_MonetaryAccount_PaymentAutoAllocate",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/payment-auto-allocate/:payment-auto-allocateID/instance/:itemId",
    server,
    client
  } as const
}

export namespace List_all_Invoice_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: InvoiceListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_Invoice_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": InvoiceListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_Invoice_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_Invoice_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "invoice"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<InvoiceListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_Invoice_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_Invoice_for_User_MonetaryAccount",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/invoice",
    server,
    client
  } as const
}

export namespace READ_Invoice_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: InvoiceRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_Invoice_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": InvoiceRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_Invoice_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_Invoice_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "invoice", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<InvoiceRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_Invoice_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_Invoice_for_User_MonetaryAccount",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/invoice/:itemId",
    server,
    client
  } as const
}

export namespace List_all_Invoice_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: InvoiceByUserListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_Invoice_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": InvoiceByUserListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_Invoice_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_Invoice_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "invoice"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<InvoiceByUserListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_Invoice_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_Invoice_for_User",
    method: "GET",
    path: "user/:userID/invoice",
    server,
    client
  } as const
}

export namespace READ_Invoice_for_User {
  type Path = {
    "userID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: InvoiceByUserRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_Invoice_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": InvoiceByUserRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_Invoice_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_Invoice_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "invoice", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<InvoiceByUserRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_Invoice_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"itemId": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_Invoice_for_User",
    method: "GET",
    path: "user/:userID/invoice/:itemId",
    server,
    client
  } as const
}

export namespace READ_InvoiceExport_for_User_Invoice {
  type Path = {
    "userID": number,
    "invoiceID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: InvoiceExportPdfRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_InvoiceExport_for_User_Invoice400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "invoiceID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "invoiceID": props["invoiceID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": InvoiceExportPdfRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_InvoiceExport_for_User_Invoice400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_InvoiceExport_for_User_Invoice: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "invoice", serialization.serialize(it.path["invoiceID"]), "invoice-export", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<InvoiceExportPdfRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_InvoiceExport_for_User_Invoice400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"invoiceID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_InvoiceExport_for_User_Invoice",
    method: "GET",
    path: "user/:userID/invoice/:invoiceID/invoice-export/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_InvoiceExport_for_User_Invoice {
  type Path = {
    "userID": number,
    "invoiceID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: InvoiceExportPdf
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: InvoiceExportPdfUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_InvoiceExport_for_User_Invoice400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "invoiceID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": InvoiceExportPdf}): Request => ({
    path: {"userID": props["userID"], "invoiceID": props["invoiceID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": InvoiceExportPdfUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_InvoiceExport_for_User_Invoice400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_InvoiceExport_for_User_Invoice: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "invoice", serialization.serialize(it.path["invoiceID"]), "invoice-export", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<InvoiceExportPdfUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_InvoiceExport_for_User_Invoice400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"invoiceID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_InvoiceExport_for_User_Invoice",
    method: "PUT",
    path: "user/:userID/invoice/:invoiceID/invoice-export/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_InvoiceExport_for_User_Invoice {
  type Path = {
    "userID": number,
    "invoiceID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: InvoiceExportPdfDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_InvoiceExport_for_User_Invoice400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "invoiceID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "invoiceID": props["invoiceID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": InvoiceExportPdfDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_InvoiceExport_for_User_Invoice400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_InvoiceExport_for_User_Invoice: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "invoice", serialization.serialize(it.path["invoiceID"]), "invoice-export", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<InvoiceExportPdfDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_InvoiceExport_for_User_Invoice400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"invoiceID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_InvoiceExport_for_User_Invoice",
    method: "DELETE",
    path: "user/:userID/invoice/:invoiceID/invoice-export/:itemId",
    server,
    client
  } as const
}

export namespace CREATE_InvoiceExport_for_User_Invoice {
  type Path = {
    "userID": number,
    "invoiceID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: InvoiceExportPdf
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: InvoiceExportPdfCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_InvoiceExport_for_User_Invoice400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "invoiceID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": InvoiceExportPdf}): Request => ({
    path: {"userID": props["userID"], "invoiceID": props["invoiceID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": InvoiceExportPdfCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_InvoiceExport_for_User_Invoice400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_InvoiceExport_for_User_Invoice: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "invoice", serialization.serialize(it.path["invoiceID"]), "invoice-export"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<InvoiceExportPdfCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_InvoiceExport_for_User_Invoice400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"invoiceID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_InvoiceExport_for_User_Invoice",
    method: "POST",
    path: "user/:userID/invoice/:invoiceID/invoice-export",
    server,
    client
  } as const
}

export namespace READ_Ip_for_User_CredentialPasswordIp {
  type Path = {
    "userID": number,
    "credential-password-ipID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: PermittedIpRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_Ip_for_User_CredentialPasswordIp400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "credential-password-ipID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "credential-password-ipID": props["credential-password-ipID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": PermittedIpRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_Ip_for_User_CredentialPasswordIp400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_Ip_for_User_CredentialPasswordIp: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "credential-password-ip", serialization.serialize(it.path["credential-password-ipID"]), "ip", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<PermittedIpRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_Ip_for_User_CredentialPasswordIp400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"credential-password-ipID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_Ip_for_User_CredentialPasswordIp",
    method: "GET",
    path: "user/:userID/credential-password-ip/:credential-password-ipID/ip/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_Ip_for_User_CredentialPasswordIp {
  type Path = {
    "userID": number,
    "credential-password-ipID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: PermittedIp
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: PermittedIpUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_Ip_for_User_CredentialPasswordIp400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "credential-password-ipID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": PermittedIp}): Request => ({
    path: {"userID": props["userID"], "credential-password-ipID": props["credential-password-ipID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": PermittedIpUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_Ip_for_User_CredentialPasswordIp400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_Ip_for_User_CredentialPasswordIp: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "credential-password-ip", serialization.serialize(it.path["credential-password-ipID"]), "ip", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<PermittedIpUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_Ip_for_User_CredentialPasswordIp400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"credential-password-ipID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_Ip_for_User_CredentialPasswordIp",
    method: "PUT",
    path: "user/:userID/credential-password-ip/:credential-password-ipID/ip/:itemId",
    server,
    client
  } as const
}

export namespace List_all_Ip_for_User_CredentialPasswordIp {
  type Path = {
    "userID": number,
    "credential-password-ipID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: PermittedIpListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_Ip_for_User_CredentialPasswordIp400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "credential-password-ipID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "credential-password-ipID": props["credential-password-ipID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": PermittedIpListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_Ip_for_User_CredentialPasswordIp400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_Ip_for_User_CredentialPasswordIp: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "credential-password-ip", serialization.serialize(it.path["credential-password-ipID"]), "ip"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<PermittedIpListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_Ip_for_User_CredentialPasswordIp400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"credential-password-ipID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_Ip_for_User_CredentialPasswordIp",
    method: "GET",
    path: "user/:userID/credential-password-ip/:credential-password-ipID/ip",
    server,
    client
  } as const
}

export namespace CREATE_Ip_for_User_CredentialPasswordIp {
  type Path = {
    "userID": number,
    "credential-password-ipID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: PermittedIp
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: PermittedIpCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_Ip_for_User_CredentialPasswordIp400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "credential-password-ipID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": PermittedIp}): Request => ({
    path: {"userID": props["userID"], "credential-password-ipID": props["credential-password-ipID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": PermittedIpCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_Ip_for_User_CredentialPasswordIp400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_Ip_for_User_CredentialPasswordIp: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "credential-password-ip", serialization.serialize(it.path["credential-password-ipID"]), "ip"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<PermittedIpCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_Ip_for_User_CredentialPasswordIp400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"credential-password-ipID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_Ip_for_User_CredentialPasswordIp",
    method: "POST",
    path: "user/:userID/credential-password-ip/:credential-password-ipID/ip",
    server,
    client
  } as const
}

export namespace List_all_LegalName_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UserLegalNameListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_LegalName_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UserLegalNameListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_LegalName_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_LegalName_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "legal-name"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UserLegalNameListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_LegalName_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_LegalName_for_User",
    method: "GET",
    path: "user/:userID/legal-name",
    server,
    client
  } as const
}

export namespace List_all_Limit_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CustomerLimitListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_Limit_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CustomerLimitListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_Limit_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_Limit_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "limit"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CustomerLimitListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_Limit_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_Limit_for_User",
    method: "GET",
    path: "user/:userID/limit",
    server,
    client
  } as const
}

export namespace READ_MastercardAction_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: MasterCardActionRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_MastercardAction_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": MasterCardActionRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_MastercardAction_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_MastercardAction_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "mastercard-action", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<MasterCardActionRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_MastercardAction_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_MastercardAction_for_User_MonetaryAccount",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/mastercard-action/:itemId",
    server,
    client
  } as const
}

export namespace List_all_MastercardAction_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: MasterCardActionListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_MastercardAction_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": MasterCardActionListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_MastercardAction_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_MastercardAction_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "mastercard-action"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<MasterCardActionListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_MastercardAction_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_MastercardAction_for_User_MonetaryAccount",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/mastercard-action",
    server,
    client
  } as const
}

export namespace READ_MonetaryAccount_for_User {
  type Path = {
    "userID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: MonetaryAccountRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_MonetaryAccount_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": MonetaryAccountRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_MonetaryAccount_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_MonetaryAccount_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<MonetaryAccountRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_MonetaryAccount_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"itemId": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_MonetaryAccount_for_User",
    method: "GET",
    path: "user/:userID/monetary-account/:itemId",
    server,
    client
  } as const
}

export namespace List_all_MonetaryAccount_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: MonetaryAccountListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_MonetaryAccount_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": MonetaryAccountListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_MonetaryAccount_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_MonetaryAccount_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<MonetaryAccountListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_MonetaryAccount_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_MonetaryAccount_for_User",
    method: "GET",
    path: "user/:userID/monetary-account",
    server,
    client
  } as const
}

export namespace List_all_MonetaryAccountBank_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: MonetaryAccountBankListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_MonetaryAccountBank_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": MonetaryAccountBankListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_MonetaryAccountBank_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_MonetaryAccountBank_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account-bank"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<MonetaryAccountBankListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_MonetaryAccountBank_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_MonetaryAccountBank_for_User",
    method: "GET",
    path: "user/:userID/monetary-account-bank",
    server,
    client
  } as const
}

export namespace CREATE_MonetaryAccountBank_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: MonetaryAccountBank
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: MonetaryAccountBankCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_MonetaryAccountBank_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": MonetaryAccountBank}): Request => ({
    path: {"userID": props["userID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": MonetaryAccountBankCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_MonetaryAccountBank_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_MonetaryAccountBank_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account-bank"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<MonetaryAccountBankCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_MonetaryAccountBank_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_MonetaryAccountBank_for_User",
    method: "POST",
    path: "user/:userID/monetary-account-bank",
    server,
    client
  } as const
}

export namespace READ_MonetaryAccountBank_for_User {
  type Path = {
    "userID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: MonetaryAccountBankRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_MonetaryAccountBank_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": MonetaryAccountBankRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_MonetaryAccountBank_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_MonetaryAccountBank_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account-bank", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<MonetaryAccountBankRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_MonetaryAccountBank_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"itemId": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_MonetaryAccountBank_for_User",
    method: "GET",
    path: "user/:userID/monetary-account-bank/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_MonetaryAccountBank_for_User {
  type Path = {
    "userID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: MonetaryAccountBank
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: MonetaryAccountBankUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_MonetaryAccountBank_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": MonetaryAccountBank}): Request => ({
    path: {"userID": props["userID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": MonetaryAccountBankUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_MonetaryAccountBank_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_MonetaryAccountBank_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account-bank", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<MonetaryAccountBankUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_MonetaryAccountBank_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"itemId": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_MonetaryAccountBank_for_User",
    method: "PUT",
    path: "user/:userID/monetary-account-bank/:itemId",
    server,
    client
  } as const
}

export namespace READ_MonetaryAccountCard_for_User {
  type Path = {
    "userID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: MonetaryAccountCardRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_MonetaryAccountCard_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": MonetaryAccountCardRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_MonetaryAccountCard_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_MonetaryAccountCard_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account-card", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<MonetaryAccountCardRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_MonetaryAccountCard_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"itemId": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_MonetaryAccountCard_for_User",
    method: "GET",
    path: "user/:userID/monetary-account-card/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_MonetaryAccountCard_for_User {
  type Path = {
    "userID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: MonetaryAccountCard
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: MonetaryAccountCardUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_MonetaryAccountCard_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": MonetaryAccountCard}): Request => ({
    path: {"userID": props["userID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": MonetaryAccountCardUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_MonetaryAccountCard_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_MonetaryAccountCard_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account-card", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<MonetaryAccountCardUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_MonetaryAccountCard_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"itemId": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_MonetaryAccountCard_for_User",
    method: "PUT",
    path: "user/:userID/monetary-account-card/:itemId",
    server,
    client
  } as const
}

export namespace List_all_MonetaryAccountCard_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: MonetaryAccountCardListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_MonetaryAccountCard_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": MonetaryAccountCardListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_MonetaryAccountCard_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_MonetaryAccountCard_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account-card"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<MonetaryAccountCardListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_MonetaryAccountCard_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_MonetaryAccountCard_for_User",
    method: "GET",
    path: "user/:userID/monetary-account-card",
    server,
    client
  } as const
}

export namespace List_all_MonetaryAccountExternal_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: MonetaryAccountExternalListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_MonetaryAccountExternal_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": MonetaryAccountExternalListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_MonetaryAccountExternal_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_MonetaryAccountExternal_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account-external"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<MonetaryAccountExternalListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_MonetaryAccountExternal_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_MonetaryAccountExternal_for_User",
    method: "GET",
    path: "user/:userID/monetary-account-external",
    server,
    client
  } as const
}

export namespace CREATE_MonetaryAccountExternal_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: MonetaryAccountExternal
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: MonetaryAccountExternalCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_MonetaryAccountExternal_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": MonetaryAccountExternal}): Request => ({
    path: {"userID": props["userID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": MonetaryAccountExternalCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_MonetaryAccountExternal_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_MonetaryAccountExternal_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account-external"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<MonetaryAccountExternalCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_MonetaryAccountExternal_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_MonetaryAccountExternal_for_User",
    method: "POST",
    path: "user/:userID/monetary-account-external",
    server,
    client
  } as const
}

export namespace READ_MonetaryAccountExternal_for_User {
  type Path = {
    "userID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: MonetaryAccountExternalRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_MonetaryAccountExternal_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": MonetaryAccountExternalRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_MonetaryAccountExternal_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_MonetaryAccountExternal_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account-external", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<MonetaryAccountExternalRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_MonetaryAccountExternal_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"itemId": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_MonetaryAccountExternal_for_User",
    method: "GET",
    path: "user/:userID/monetary-account-external/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_MonetaryAccountExternal_for_User {
  type Path = {
    "userID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: MonetaryAccountExternal
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: MonetaryAccountExternalUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_MonetaryAccountExternal_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": MonetaryAccountExternal}): Request => ({
    path: {"userID": props["userID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": MonetaryAccountExternalUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_MonetaryAccountExternal_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_MonetaryAccountExternal_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account-external", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<MonetaryAccountExternalUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_MonetaryAccountExternal_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"itemId": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_MonetaryAccountExternal_for_User",
    method: "PUT",
    path: "user/:userID/monetary-account-external/:itemId",
    server,
    client
  } as const
}

export namespace List_all_MonetaryAccountExternalSavings_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: MonetaryAccountExternalSavingsListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_MonetaryAccountExternalSavings_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": MonetaryAccountExternalSavingsListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_MonetaryAccountExternalSavings_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_MonetaryAccountExternalSavings_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account-external-savings"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<MonetaryAccountExternalSavingsListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_MonetaryAccountExternalSavings_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_MonetaryAccountExternalSavings_for_User",
    method: "GET",
    path: "user/:userID/monetary-account-external-savings",
    server,
    client
  } as const
}

export namespace CREATE_MonetaryAccountExternalSavings_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: MonetaryAccountExternalSavings
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: MonetaryAccountExternalSavingsCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_MonetaryAccountExternalSavings_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": MonetaryAccountExternalSavings}): Request => ({
    path: {"userID": props["userID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": MonetaryAccountExternalSavingsCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_MonetaryAccountExternalSavings_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_MonetaryAccountExternalSavings_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account-external-savings"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<MonetaryAccountExternalSavingsCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_MonetaryAccountExternalSavings_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_MonetaryAccountExternalSavings_for_User",
    method: "POST",
    path: "user/:userID/monetary-account-external-savings",
    server,
    client
  } as const
}

export namespace READ_MonetaryAccountExternalSavings_for_User {
  type Path = {
    "userID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: MonetaryAccountExternalSavingsRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_MonetaryAccountExternalSavings_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": MonetaryAccountExternalSavingsRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_MonetaryAccountExternalSavings_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_MonetaryAccountExternalSavings_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account-external-savings", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<MonetaryAccountExternalSavingsRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_MonetaryAccountExternalSavings_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"itemId": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_MonetaryAccountExternalSavings_for_User",
    method: "GET",
    path: "user/:userID/monetary-account-external-savings/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_MonetaryAccountExternalSavings_for_User {
  type Path = {
    "userID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: MonetaryAccountExternalSavings
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: MonetaryAccountExternalSavingsUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_MonetaryAccountExternalSavings_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": MonetaryAccountExternalSavings}): Request => ({
    path: {"userID": props["userID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": MonetaryAccountExternalSavingsUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_MonetaryAccountExternalSavings_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_MonetaryAccountExternalSavings_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account-external-savings", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<MonetaryAccountExternalSavingsUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_MonetaryAccountExternalSavings_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"itemId": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_MonetaryAccountExternalSavings_for_User",
    method: "PUT",
    path: "user/:userID/monetary-account-external-savings/:itemId",
    server,
    client
  } as const
}

export namespace List_all_MonetaryAccountJoint_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: MonetaryAccountJointListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_MonetaryAccountJoint_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": MonetaryAccountJointListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_MonetaryAccountJoint_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_MonetaryAccountJoint_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account-joint"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<MonetaryAccountJointListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_MonetaryAccountJoint_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_MonetaryAccountJoint_for_User",
    method: "GET",
    path: "user/:userID/monetary-account-joint",
    server,
    client
  } as const
}

export namespace CREATE_MonetaryAccountJoint_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: MonetaryAccountJoint
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: MonetaryAccountJointCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_MonetaryAccountJoint_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": MonetaryAccountJoint}): Request => ({
    path: {"userID": props["userID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": MonetaryAccountJointCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_MonetaryAccountJoint_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_MonetaryAccountJoint_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account-joint"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<MonetaryAccountJointCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_MonetaryAccountJoint_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_MonetaryAccountJoint_for_User",
    method: "POST",
    path: "user/:userID/monetary-account-joint",
    server,
    client
  } as const
}

export namespace READ_MonetaryAccountJoint_for_User {
  type Path = {
    "userID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: MonetaryAccountJointRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_MonetaryAccountJoint_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": MonetaryAccountJointRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_MonetaryAccountJoint_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_MonetaryAccountJoint_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account-joint", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<MonetaryAccountJointRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_MonetaryAccountJoint_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"itemId": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_MonetaryAccountJoint_for_User",
    method: "GET",
    path: "user/:userID/monetary-account-joint/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_MonetaryAccountJoint_for_User {
  type Path = {
    "userID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: MonetaryAccountJoint
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: MonetaryAccountJointUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_MonetaryAccountJoint_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": MonetaryAccountJoint}): Request => ({
    path: {"userID": props["userID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": MonetaryAccountJointUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_MonetaryAccountJoint_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_MonetaryAccountJoint_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account-joint", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<MonetaryAccountJointUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_MonetaryAccountJoint_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"itemId": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_MonetaryAccountJoint_for_User",
    method: "PUT",
    path: "user/:userID/monetary-account-joint/:itemId",
    server,
    client
  } as const
}

export namespace List_all_MonetaryAccountSavings_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: MonetaryAccountSavingsListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_MonetaryAccountSavings_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": MonetaryAccountSavingsListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_MonetaryAccountSavings_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_MonetaryAccountSavings_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account-savings"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<MonetaryAccountSavingsListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_MonetaryAccountSavings_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_MonetaryAccountSavings_for_User",
    method: "GET",
    path: "user/:userID/monetary-account-savings",
    server,
    client
  } as const
}

export namespace CREATE_MonetaryAccountSavings_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: MonetaryAccountSavings
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: MonetaryAccountSavingsCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_MonetaryAccountSavings_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": MonetaryAccountSavings}): Request => ({
    path: {"userID": props["userID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": MonetaryAccountSavingsCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_MonetaryAccountSavings_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_MonetaryAccountSavings_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account-savings"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<MonetaryAccountSavingsCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_MonetaryAccountSavings_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_MonetaryAccountSavings_for_User",
    method: "POST",
    path: "user/:userID/monetary-account-savings",
    server,
    client
  } as const
}

export namespace READ_MonetaryAccountSavings_for_User {
  type Path = {
    "userID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: MonetaryAccountSavingsRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_MonetaryAccountSavings_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": MonetaryAccountSavingsRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_MonetaryAccountSavings_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_MonetaryAccountSavings_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account-savings", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<MonetaryAccountSavingsRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_MonetaryAccountSavings_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"itemId": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_MonetaryAccountSavings_for_User",
    method: "GET",
    path: "user/:userID/monetary-account-savings/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_MonetaryAccountSavings_for_User {
  type Path = {
    "userID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: MonetaryAccountSavings
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: MonetaryAccountSavingsUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_MonetaryAccountSavings_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": MonetaryAccountSavings}): Request => ({
    path: {"userID": props["userID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": MonetaryAccountSavingsUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_MonetaryAccountSavings_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_MonetaryAccountSavings_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account-savings", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<MonetaryAccountSavingsUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_MonetaryAccountSavings_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"itemId": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_MonetaryAccountSavings_for_User",
    method: "PUT",
    path: "user/:userID/monetary-account-savings/:itemId",
    server,
    client
  } as const
}

export namespace List_all_Name_for_UserCompany {
  type Path = {
    "user-companyID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UserCompanyNameListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_Name_for_UserCompany400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"user-companyID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"user-companyID": props["user-companyID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UserCompanyNameListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_Name_for_UserCompany400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_Name_for_UserCompany: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user-company", serialization.serialize(it.path["user-companyID"]), "name"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UserCompanyNameListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_Name_for_UserCompany400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "user-companyID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_Name_for_UserCompany",
    method: "GET",
    path: "user-company/:user-companyID/name",
    server,
    client
  } as const
}

export namespace List_all_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "adyen-card-transactionID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentAdyenCardTransactionListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "adyen-card-transactionID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "adyen-card-transactionID": props["adyen-card-transactionID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentAdyenCardTransactionListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "adyen-card-transaction", serialization.serialize(it.path["adyen-card-transactionID"]), "note-attachment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentAdyenCardTransactionListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"adyen-card-transactionID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/adyen-card-transaction/:adyen-card-transactionID/note-attachment",
    server,
    client
  } as const
}

export namespace CREATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "adyen-card-transactionID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: NoteAttachmentAdyenCardTransaction
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentAdyenCardTransactionCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "adyen-card-transactionID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteAttachmentAdyenCardTransaction}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "adyen-card-transactionID": props["adyen-card-transactionID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentAdyenCardTransactionCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "adyen-card-transaction", serialization.serialize(it.path["adyen-card-transactionID"]), "note-attachment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentAdyenCardTransactionCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"adyen-card-transactionID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/adyen-card-transaction/:adyen-card-transactionID/note-attachment",
    server,
    client
  } as const
}

export namespace READ_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "adyen-card-transactionID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentAdyenCardTransactionRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "adyen-card-transactionID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "adyen-card-transactionID": props["adyen-card-transactionID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentAdyenCardTransactionRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "adyen-card-transaction", serialization.serialize(it.path["adyen-card-transactionID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentAdyenCardTransactionRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"adyen-card-transactionID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/adyen-card-transaction/:adyen-card-transactionID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "adyen-card-transactionID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: NoteAttachmentAdyenCardTransaction
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentAdyenCardTransactionUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "adyen-card-transactionID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteAttachmentAdyenCardTransaction}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "adyen-card-transactionID": props["adyen-card-transactionID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentAdyenCardTransactionUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "adyen-card-transaction", serialization.serialize(it.path["adyen-card-transactionID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentAdyenCardTransactionUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"adyen-card-transactionID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/adyen-card-transaction/:adyen-card-transactionID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "adyen-card-transactionID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentAdyenCardTransactionDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "adyen-card-transactionID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "adyen-card-transactionID": props["adyen-card-transactionID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentAdyenCardTransactionDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "adyen-card-transaction", serialization.serialize(it.path["adyen-card-transactionID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentAdyenCardTransactionDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"adyen-card-transactionID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction",
    method: "DELETE",
    path: "user/:userID/monetary-account/:monetary-accountID/adyen-card-transaction/:adyen-card-transactionID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace List_all_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "switch-service-paymentID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentBankSwitchServiceNetherlandsIncomingPaymentListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "switch-service-paymentID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "switch-service-paymentID": props["switch-service-paymentID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentBankSwitchServiceNetherlandsIncomingPaymentListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "switch-service-payment", serialization.serialize(it.path["switch-service-paymentID"]), "note-attachment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentBankSwitchServiceNetherlandsIncomingPaymentListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"switch-service-paymentID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/switch-service-payment/:switch-service-paymentID/note-attachment",
    server,
    client
  } as const
}

export namespace CREATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "switch-service-paymentID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: NoteAttachmentBankSwitchServiceNetherlandsIncomingPayment
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentBankSwitchServiceNetherlandsIncomingPaymentCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "switch-service-paymentID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteAttachmentBankSwitchServiceNetherlandsIncomingPayment}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "switch-service-paymentID": props["switch-service-paymentID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentBankSwitchServiceNetherlandsIncomingPaymentCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "switch-service-payment", serialization.serialize(it.path["switch-service-paymentID"]), "note-attachment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentBankSwitchServiceNetherlandsIncomingPaymentCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"switch-service-paymentID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/switch-service-payment/:switch-service-paymentID/note-attachment",
    server,
    client
  } as const
}

export namespace READ_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "switch-service-paymentID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentBankSwitchServiceNetherlandsIncomingPaymentRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "switch-service-paymentID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "switch-service-paymentID": props["switch-service-paymentID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentBankSwitchServiceNetherlandsIncomingPaymentRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "switch-service-payment", serialization.serialize(it.path["switch-service-paymentID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentBankSwitchServiceNetherlandsIncomingPaymentRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"switch-service-paymentID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/switch-service-payment/:switch-service-paymentID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "switch-service-paymentID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: NoteAttachmentBankSwitchServiceNetherlandsIncomingPayment
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentBankSwitchServiceNetherlandsIncomingPaymentUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "switch-service-paymentID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteAttachmentBankSwitchServiceNetherlandsIncomingPayment}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "switch-service-paymentID": props["switch-service-paymentID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentBankSwitchServiceNetherlandsIncomingPaymentUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "switch-service-payment", serialization.serialize(it.path["switch-service-paymentID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentBankSwitchServiceNetherlandsIncomingPaymentUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"switch-service-paymentID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/switch-service-payment/:switch-service-paymentID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "switch-service-paymentID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentBankSwitchServiceNetherlandsIncomingPaymentDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "switch-service-paymentID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "switch-service-paymentID": props["switch-service-paymentID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentBankSwitchServiceNetherlandsIncomingPaymentDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "switch-service-payment", serialization.serialize(it.path["switch-service-paymentID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentBankSwitchServiceNetherlandsIncomingPaymentDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"switch-service-paymentID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment",
    method: "DELETE",
    path: "user/:userID/monetary-account/:monetary-accountID/switch-service-payment/:switch-service-paymentID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace List_all_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "bunqme-fundraiser-resultID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentBunqMeFundraiserResultListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "bunqme-fundraiser-resultID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "bunqme-fundraiser-resultID": props["bunqme-fundraiser-resultID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentBunqMeFundraiserResultListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "bunqme-fundraiser-result", serialization.serialize(it.path["bunqme-fundraiser-resultID"]), "note-attachment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentBunqMeFundraiserResultListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"bunqme-fundraiser-resultID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/bunqme-fundraiser-result/:bunqme-fundraiser-resultID/note-attachment",
    server,
    client
  } as const
}

export namespace CREATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "bunqme-fundraiser-resultID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: NoteAttachmentBunqMeFundraiserResult
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentBunqMeFundraiserResultCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "bunqme-fundraiser-resultID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteAttachmentBunqMeFundraiserResult}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "bunqme-fundraiser-resultID": props["bunqme-fundraiser-resultID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentBunqMeFundraiserResultCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "bunqme-fundraiser-result", serialization.serialize(it.path["bunqme-fundraiser-resultID"]), "note-attachment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentBunqMeFundraiserResultCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"bunqme-fundraiser-resultID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/bunqme-fundraiser-result/:bunqme-fundraiser-resultID/note-attachment",
    server,
    client
  } as const
}

export namespace READ_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "bunqme-fundraiser-resultID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentBunqMeFundraiserResultRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "bunqme-fundraiser-resultID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "bunqme-fundraiser-resultID": props["bunqme-fundraiser-resultID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentBunqMeFundraiserResultRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "bunqme-fundraiser-result", serialization.serialize(it.path["bunqme-fundraiser-resultID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentBunqMeFundraiserResultRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"bunqme-fundraiser-resultID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/bunqme-fundraiser-result/:bunqme-fundraiser-resultID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "bunqme-fundraiser-resultID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: NoteAttachmentBunqMeFundraiserResult
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentBunqMeFundraiserResultUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "bunqme-fundraiser-resultID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteAttachmentBunqMeFundraiserResult}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "bunqme-fundraiser-resultID": props["bunqme-fundraiser-resultID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentBunqMeFundraiserResultUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "bunqme-fundraiser-result", serialization.serialize(it.path["bunqme-fundraiser-resultID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentBunqMeFundraiserResultUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"bunqme-fundraiser-resultID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/bunqme-fundraiser-result/:bunqme-fundraiser-resultID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "bunqme-fundraiser-resultID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentBunqMeFundraiserResultDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "bunqme-fundraiser-resultID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "bunqme-fundraiser-resultID": props["bunqme-fundraiser-resultID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentBunqMeFundraiserResultDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "bunqme-fundraiser-result", serialization.serialize(it.path["bunqme-fundraiser-resultID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentBunqMeFundraiserResultDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"bunqme-fundraiser-resultID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult",
    method: "DELETE",
    path: "user/:userID/monetary-account/:monetary-accountID/bunqme-fundraiser-result/:bunqme-fundraiser-resultID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace List_all_NoteAttachment_for_User_MonetaryAccount_DraftPayment {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "draft-paymentID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentDraftPaymentListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_NoteAttachment_for_User_MonetaryAccount_DraftPayment400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "draft-paymentID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "draft-paymentID": props["draft-paymentID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentDraftPaymentListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_NoteAttachment_for_User_MonetaryAccount_DraftPayment400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_NoteAttachment_for_User_MonetaryAccount_DraftPayment: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "draft-payment", serialization.serialize(it.path["draft-paymentID"]), "note-attachment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentDraftPaymentListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_NoteAttachment_for_User_MonetaryAccount_DraftPayment400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"draft-paymentID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_NoteAttachment_for_User_MonetaryAccount_DraftPayment",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/draft-payment/:draft-paymentID/note-attachment",
    server,
    client
  } as const
}

export namespace CREATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "draft-paymentID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: NoteAttachmentDraftPayment
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentDraftPaymentCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "draft-paymentID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteAttachmentDraftPayment}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "draft-paymentID": props["draft-paymentID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentDraftPaymentCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "draft-payment", serialization.serialize(it.path["draft-paymentID"]), "note-attachment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentDraftPaymentCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"draft-paymentID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/draft-payment/:draft-paymentID/note-attachment",
    server,
    client
  } as const
}

export namespace READ_NoteAttachment_for_User_MonetaryAccount_DraftPayment {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "draft-paymentID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentDraftPaymentRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_NoteAttachment_for_User_MonetaryAccount_DraftPayment400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "draft-paymentID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "draft-paymentID": props["draft-paymentID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentDraftPaymentRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_NoteAttachment_for_User_MonetaryAccount_DraftPayment400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_NoteAttachment_for_User_MonetaryAccount_DraftPayment: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "draft-payment", serialization.serialize(it.path["draft-paymentID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentDraftPaymentRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_NoteAttachment_for_User_MonetaryAccount_DraftPayment400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"draft-paymentID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_NoteAttachment_for_User_MonetaryAccount_DraftPayment",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/draft-payment/:draft-paymentID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "draft-paymentID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: NoteAttachmentDraftPayment
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentDraftPaymentUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "draft-paymentID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteAttachmentDraftPayment}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "draft-paymentID": props["draft-paymentID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentDraftPaymentUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "draft-payment", serialization.serialize(it.path["draft-paymentID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentDraftPaymentUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"draft-paymentID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/draft-payment/:draft-paymentID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_NoteAttachment_for_User_MonetaryAccount_DraftPayment {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "draft-paymentID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentDraftPaymentDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_NoteAttachment_for_User_MonetaryAccount_DraftPayment400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "draft-paymentID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "draft-paymentID": props["draft-paymentID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentDraftPaymentDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_NoteAttachment_for_User_MonetaryAccount_DraftPayment400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_NoteAttachment_for_User_MonetaryAccount_DraftPayment: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "draft-payment", serialization.serialize(it.path["draft-paymentID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentDraftPaymentDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_NoteAttachment_for_User_MonetaryAccount_DraftPayment400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"draft-paymentID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_NoteAttachment_for_User_MonetaryAccount_DraftPayment",
    method: "DELETE",
    path: "user/:userID/monetary-account/:monetary-accountID/draft-payment/:draft-paymentID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace List_all_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "ideal-merchant-transactionID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentIdealMerchantTransactionListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "ideal-merchant-transactionID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "ideal-merchant-transactionID": props["ideal-merchant-transactionID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentIdealMerchantTransactionListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "ideal-merchant-transaction", serialization.serialize(it.path["ideal-merchant-transactionID"]), "note-attachment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentIdealMerchantTransactionListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"ideal-merchant-transactionID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/ideal-merchant-transaction/:ideal-merchant-transactionID/note-attachment",
    server,
    client
  } as const
}

export namespace CREATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "ideal-merchant-transactionID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: NoteAttachmentIdealMerchantTransaction
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentIdealMerchantTransactionCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "ideal-merchant-transactionID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteAttachmentIdealMerchantTransaction}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "ideal-merchant-transactionID": props["ideal-merchant-transactionID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentIdealMerchantTransactionCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "ideal-merchant-transaction", serialization.serialize(it.path["ideal-merchant-transactionID"]), "note-attachment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentIdealMerchantTransactionCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"ideal-merchant-transactionID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/ideal-merchant-transaction/:ideal-merchant-transactionID/note-attachment",
    server,
    client
  } as const
}

export namespace READ_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "ideal-merchant-transactionID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentIdealMerchantTransactionRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "ideal-merchant-transactionID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "ideal-merchant-transactionID": props["ideal-merchant-transactionID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentIdealMerchantTransactionRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "ideal-merchant-transaction", serialization.serialize(it.path["ideal-merchant-transactionID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentIdealMerchantTransactionRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"ideal-merchant-transactionID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/ideal-merchant-transaction/:ideal-merchant-transactionID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "ideal-merchant-transactionID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: NoteAttachmentIdealMerchantTransaction
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentIdealMerchantTransactionUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "ideal-merchant-transactionID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteAttachmentIdealMerchantTransaction}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "ideal-merchant-transactionID": props["ideal-merchant-transactionID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentIdealMerchantTransactionUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "ideal-merchant-transaction", serialization.serialize(it.path["ideal-merchant-transactionID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentIdealMerchantTransactionUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"ideal-merchant-transactionID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/ideal-merchant-transaction/:ideal-merchant-transactionID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "ideal-merchant-transactionID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentIdealMerchantTransactionDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "ideal-merchant-transactionID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "ideal-merchant-transactionID": props["ideal-merchant-transactionID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentIdealMerchantTransactionDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "ideal-merchant-transaction", serialization.serialize(it.path["ideal-merchant-transactionID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentIdealMerchantTransactionDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"ideal-merchant-transactionID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction",
    method: "DELETE",
    path: "user/:userID/monetary-account/:monetary-accountID/ideal-merchant-transaction/:ideal-merchant-transactionID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace List_all_NoteAttachment_for_User_MonetaryAccount_MastercardAction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "mastercard-actionID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentMasterCardActionListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_NoteAttachment_for_User_MonetaryAccount_MastercardAction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "mastercard-actionID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "mastercard-actionID": props["mastercard-actionID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentMasterCardActionListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_NoteAttachment_for_User_MonetaryAccount_MastercardAction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_NoteAttachment_for_User_MonetaryAccount_MastercardAction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "mastercard-action", serialization.serialize(it.path["mastercard-actionID"]), "note-attachment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentMasterCardActionListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_NoteAttachment_for_User_MonetaryAccount_MastercardAction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"mastercard-actionID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_NoteAttachment_for_User_MonetaryAccount_MastercardAction",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/mastercard-action/:mastercard-actionID/note-attachment",
    server,
    client
  } as const
}

export namespace CREATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "mastercard-actionID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: NoteAttachmentMasterCardAction
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentMasterCardActionCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "mastercard-actionID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteAttachmentMasterCardAction}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "mastercard-actionID": props["mastercard-actionID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentMasterCardActionCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "mastercard-action", serialization.serialize(it.path["mastercard-actionID"]), "note-attachment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentMasterCardActionCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"mastercard-actionID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/mastercard-action/:mastercard-actionID/note-attachment",
    server,
    client
  } as const
}

export namespace READ_NoteAttachment_for_User_MonetaryAccount_MastercardAction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "mastercard-actionID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentMasterCardActionRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_NoteAttachment_for_User_MonetaryAccount_MastercardAction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "mastercard-actionID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "mastercard-actionID": props["mastercard-actionID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentMasterCardActionRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_NoteAttachment_for_User_MonetaryAccount_MastercardAction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_NoteAttachment_for_User_MonetaryAccount_MastercardAction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "mastercard-action", serialization.serialize(it.path["mastercard-actionID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentMasterCardActionRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_NoteAttachment_for_User_MonetaryAccount_MastercardAction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"mastercard-actionID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_NoteAttachment_for_User_MonetaryAccount_MastercardAction",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/mastercard-action/:mastercard-actionID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "mastercard-actionID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: NoteAttachmentMasterCardAction
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentMasterCardActionUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "mastercard-actionID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteAttachmentMasterCardAction}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "mastercard-actionID": props["mastercard-actionID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentMasterCardActionUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "mastercard-action", serialization.serialize(it.path["mastercard-actionID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentMasterCardActionUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"mastercard-actionID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/mastercard-action/:mastercard-actionID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_NoteAttachment_for_User_MonetaryAccount_MastercardAction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "mastercard-actionID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentMasterCardActionDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_NoteAttachment_for_User_MonetaryAccount_MastercardAction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "mastercard-actionID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "mastercard-actionID": props["mastercard-actionID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentMasterCardActionDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_NoteAttachment_for_User_MonetaryAccount_MastercardAction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_NoteAttachment_for_User_MonetaryAccount_MastercardAction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "mastercard-action", serialization.serialize(it.path["mastercard-actionID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentMasterCardActionDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_NoteAttachment_for_User_MonetaryAccount_MastercardAction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"mastercard-actionID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_NoteAttachment_for_User_MonetaryAccount_MastercardAction",
    method: "DELETE",
    path: "user/:userID/monetary-account/:monetary-accountID/mastercard-action/:mastercard-actionID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace List_all_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "open-banking-merchant-transactionID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentOpenBankingMerchantTransactionListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "open-banking-merchant-transactionID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "open-banking-merchant-transactionID": props["open-banking-merchant-transactionID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentOpenBankingMerchantTransactionListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "open-banking-merchant-transaction", serialization.serialize(it.path["open-banking-merchant-transactionID"]), "note-attachment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentOpenBankingMerchantTransactionListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"open-banking-merchant-transactionID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/open-banking-merchant-transaction/:open-banking-merchant-transactionID/note-attachment",
    server,
    client
  } as const
}

export namespace CREATE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "open-banking-merchant-transactionID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: NoteAttachmentOpenBankingMerchantTransaction
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentOpenBankingMerchantTransactionCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "open-banking-merchant-transactionID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteAttachmentOpenBankingMerchantTransaction}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "open-banking-merchant-transactionID": props["open-banking-merchant-transactionID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentOpenBankingMerchantTransactionCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "open-banking-merchant-transaction", serialization.serialize(it.path["open-banking-merchant-transactionID"]), "note-attachment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentOpenBankingMerchantTransactionCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"open-banking-merchant-transactionID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/open-banking-merchant-transaction/:open-banking-merchant-transactionID/note-attachment",
    server,
    client
  } as const
}

export namespace READ_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "open-banking-merchant-transactionID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentOpenBankingMerchantTransactionRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "open-banking-merchant-transactionID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "open-banking-merchant-transactionID": props["open-banking-merchant-transactionID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentOpenBankingMerchantTransactionRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "open-banking-merchant-transaction", serialization.serialize(it.path["open-banking-merchant-transactionID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentOpenBankingMerchantTransactionRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"open-banking-merchant-transactionID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/open-banking-merchant-transaction/:open-banking-merchant-transactionID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "open-banking-merchant-transactionID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: NoteAttachmentOpenBankingMerchantTransaction
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentOpenBankingMerchantTransactionUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "open-banking-merchant-transactionID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteAttachmentOpenBankingMerchantTransaction}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "open-banking-merchant-transactionID": props["open-banking-merchant-transactionID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentOpenBankingMerchantTransactionUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "open-banking-merchant-transaction", serialization.serialize(it.path["open-banking-merchant-transactionID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentOpenBankingMerchantTransactionUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"open-banking-merchant-transactionID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/open-banking-merchant-transaction/:open-banking-merchant-transactionID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "open-banking-merchant-transactionID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentOpenBankingMerchantTransactionDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "open-banking-merchant-transactionID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "open-banking-merchant-transactionID": props["open-banking-merchant-transactionID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentOpenBankingMerchantTransactionDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "open-banking-merchant-transaction", serialization.serialize(it.path["open-banking-merchant-transactionID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentOpenBankingMerchantTransactionDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"open-banking-merchant-transactionID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction",
    method: "DELETE",
    path: "user/:userID/monetary-account/:monetary-accountID/open-banking-merchant-transaction/:open-banking-merchant-transactionID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace List_all_NoteAttachment_for_User_MonetaryAccount_PaymentBatch {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "payment-batchID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentPaymentBatchListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_NoteAttachment_for_User_MonetaryAccount_PaymentBatch400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "payment-batchID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "payment-batchID": props["payment-batchID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentPaymentBatchListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_NoteAttachment_for_User_MonetaryAccount_PaymentBatch400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_NoteAttachment_for_User_MonetaryAccount_PaymentBatch: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-batch", serialization.serialize(it.path["payment-batchID"]), "note-attachment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentPaymentBatchListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_NoteAttachment_for_User_MonetaryAccount_PaymentBatch400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"payment-batchID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_NoteAttachment_for_User_MonetaryAccount_PaymentBatch",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/payment-batch/:payment-batchID/note-attachment",
    server,
    client
  } as const
}

export namespace CREATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "payment-batchID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: NoteAttachmentPaymentBatch
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentPaymentBatchCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "payment-batchID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteAttachmentPaymentBatch}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "payment-batchID": props["payment-batchID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentPaymentBatchCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-batch", serialization.serialize(it.path["payment-batchID"]), "note-attachment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentPaymentBatchCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"payment-batchID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/payment-batch/:payment-batchID/note-attachment",
    server,
    client
  } as const
}

export namespace READ_NoteAttachment_for_User_MonetaryAccount_PaymentBatch {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "payment-batchID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentPaymentBatchRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_NoteAttachment_for_User_MonetaryAccount_PaymentBatch400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "payment-batchID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "payment-batchID": props["payment-batchID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentPaymentBatchRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_NoteAttachment_for_User_MonetaryAccount_PaymentBatch400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_NoteAttachment_for_User_MonetaryAccount_PaymentBatch: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-batch", serialization.serialize(it.path["payment-batchID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentPaymentBatchRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_NoteAttachment_for_User_MonetaryAccount_PaymentBatch400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"payment-batchID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_NoteAttachment_for_User_MonetaryAccount_PaymentBatch",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/payment-batch/:payment-batchID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "payment-batchID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: NoteAttachmentPaymentBatch
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentPaymentBatchUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "payment-batchID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteAttachmentPaymentBatch}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "payment-batchID": props["payment-batchID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentPaymentBatchUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-batch", serialization.serialize(it.path["payment-batchID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentPaymentBatchUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"payment-batchID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/payment-batch/:payment-batchID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "payment-batchID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentPaymentBatchDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "payment-batchID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "payment-batchID": props["payment-batchID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentPaymentBatchDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-batch", serialization.serialize(it.path["payment-batchID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentPaymentBatchDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"payment-batchID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch",
    method: "DELETE",
    path: "user/:userID/monetary-account/:monetary-accountID/payment-batch/:payment-batchID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace List_all_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "payment-delayedID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentPaymentDelayedListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "payment-delayedID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "payment-delayedID": props["payment-delayedID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentPaymentDelayedListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-delayed", serialization.serialize(it.path["payment-delayedID"]), "note-attachment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentPaymentDelayedListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"payment-delayedID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/payment-delayed/:payment-delayedID/note-attachment",
    server,
    client
  } as const
}

export namespace CREATE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "payment-delayedID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: NoteAttachmentPaymentDelayed
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentPaymentDelayedCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "payment-delayedID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteAttachmentPaymentDelayed}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "payment-delayedID": props["payment-delayedID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentPaymentDelayedCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-delayed", serialization.serialize(it.path["payment-delayedID"]), "note-attachment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentPaymentDelayedCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"payment-delayedID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/payment-delayed/:payment-delayedID/note-attachment",
    server,
    client
  } as const
}

export namespace READ_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "payment-delayedID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentPaymentDelayedRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "payment-delayedID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "payment-delayedID": props["payment-delayedID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentPaymentDelayedRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-delayed", serialization.serialize(it.path["payment-delayedID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentPaymentDelayedRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"payment-delayedID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/payment-delayed/:payment-delayedID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "payment-delayedID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: NoteAttachmentPaymentDelayed
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentPaymentDelayedUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "payment-delayedID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteAttachmentPaymentDelayed}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "payment-delayedID": props["payment-delayedID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentPaymentDelayedUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-delayed", serialization.serialize(it.path["payment-delayedID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentPaymentDelayedUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"payment-delayedID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/payment-delayed/:payment-delayedID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "payment-delayedID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentPaymentDelayedDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "payment-delayedID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "payment-delayedID": props["payment-delayedID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentPaymentDelayedDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-delayed", serialization.serialize(it.path["payment-delayedID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentPaymentDelayedDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"payment-delayedID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed",
    method: "DELETE",
    path: "user/:userID/monetary-account/:monetary-accountID/payment-delayed/:payment-delayedID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace List_all_NoteAttachment_for_User_MonetaryAccount_Payment {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "paymentID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentPaymentListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_NoteAttachment_for_User_MonetaryAccount_Payment400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "paymentID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "paymentID": props["paymentID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentPaymentListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_NoteAttachment_for_User_MonetaryAccount_Payment400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_NoteAttachment_for_User_MonetaryAccount_Payment: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment", serialization.serialize(it.path["paymentID"]), "note-attachment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentPaymentListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_NoteAttachment_for_User_MonetaryAccount_Payment400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"paymentID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_NoteAttachment_for_User_MonetaryAccount_Payment",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/payment/:paymentID/note-attachment",
    server,
    client
  } as const
}

export namespace CREATE_NoteAttachment_for_User_MonetaryAccount_Payment {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "paymentID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: NoteAttachmentPayment
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentPaymentCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_NoteAttachment_for_User_MonetaryAccount_Payment400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "paymentID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteAttachmentPayment}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "paymentID": props["paymentID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentPaymentCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_NoteAttachment_for_User_MonetaryAccount_Payment400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_NoteAttachment_for_User_MonetaryAccount_Payment: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment", serialization.serialize(it.path["paymentID"]), "note-attachment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentPaymentCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_NoteAttachment_for_User_MonetaryAccount_Payment400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"paymentID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_NoteAttachment_for_User_MonetaryAccount_Payment",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/payment/:paymentID/note-attachment",
    server,
    client
  } as const
}

export namespace READ_NoteAttachment_for_User_MonetaryAccount_Payment {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "paymentID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentPaymentRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_NoteAttachment_for_User_MonetaryAccount_Payment400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "paymentID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "paymentID": props["paymentID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentPaymentRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_NoteAttachment_for_User_MonetaryAccount_Payment400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_NoteAttachment_for_User_MonetaryAccount_Payment: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment", serialization.serialize(it.path["paymentID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentPaymentRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_NoteAttachment_for_User_MonetaryAccount_Payment400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"paymentID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_NoteAttachment_for_User_MonetaryAccount_Payment",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/payment/:paymentID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_NoteAttachment_for_User_MonetaryAccount_Payment {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "paymentID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: NoteAttachmentPayment
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentPaymentUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_NoteAttachment_for_User_MonetaryAccount_Payment400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "paymentID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteAttachmentPayment}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "paymentID": props["paymentID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentPaymentUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_NoteAttachment_for_User_MonetaryAccount_Payment400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_NoteAttachment_for_User_MonetaryAccount_Payment: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment", serialization.serialize(it.path["paymentID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentPaymentUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_NoteAttachment_for_User_MonetaryAccount_Payment400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"paymentID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_NoteAttachment_for_User_MonetaryAccount_Payment",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/payment/:paymentID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_NoteAttachment_for_User_MonetaryAccount_Payment {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "paymentID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentPaymentDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_NoteAttachment_for_User_MonetaryAccount_Payment400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "paymentID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "paymentID": props["paymentID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentPaymentDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_NoteAttachment_for_User_MonetaryAccount_Payment400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_NoteAttachment_for_User_MonetaryAccount_Payment: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment", serialization.serialize(it.path["paymentID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentPaymentDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_NoteAttachment_for_User_MonetaryAccount_Payment400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"paymentID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_NoteAttachment_for_User_MonetaryAccount_Payment",
    method: "DELETE",
    path: "user/:userID/monetary-account/:monetary-accountID/payment/:paymentID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace List_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "request-inquiry-batchID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentRequestInquiryBatchListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "request-inquiry-batchID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-inquiry-batchID": props["request-inquiry-batchID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentRequestInquiryBatchListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry-batch", serialization.serialize(it.path["request-inquiry-batchID"]), "note-attachment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentRequestInquiryBatchListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"request-inquiry-batchID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry-batch/:request-inquiry-batchID/note-attachment",
    server,
    client
  } as const
}

export namespace CREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "request-inquiry-batchID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: NoteAttachmentRequestInquiryBatch
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentRequestInquiryBatchCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "request-inquiry-batchID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteAttachmentRequestInquiryBatch}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-inquiry-batchID": props["request-inquiry-batchID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentRequestInquiryBatchCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry-batch", serialization.serialize(it.path["request-inquiry-batchID"]), "note-attachment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentRequestInquiryBatchCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"request-inquiry-batchID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry-batch/:request-inquiry-batchID/note-attachment",
    server,
    client
  } as const
}

export namespace READ_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "request-inquiry-batchID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentRequestInquiryBatchRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "request-inquiry-batchID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-inquiry-batchID": props["request-inquiry-batchID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentRequestInquiryBatchRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry-batch", serialization.serialize(it.path["request-inquiry-batchID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentRequestInquiryBatchRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"request-inquiry-batchID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry-batch/:request-inquiry-batchID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "request-inquiry-batchID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: NoteAttachmentRequestInquiryBatch
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentRequestInquiryBatchUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "request-inquiry-batchID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteAttachmentRequestInquiryBatch}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-inquiry-batchID": props["request-inquiry-batchID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentRequestInquiryBatchUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry-batch", serialization.serialize(it.path["request-inquiry-batchID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentRequestInquiryBatchUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"request-inquiry-batchID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry-batch/:request-inquiry-batchID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "request-inquiry-batchID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentRequestInquiryBatchDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "request-inquiry-batchID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-inquiry-batchID": props["request-inquiry-batchID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentRequestInquiryBatchDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry-batch", serialization.serialize(it.path["request-inquiry-batchID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentRequestInquiryBatchDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"request-inquiry-batchID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch",
    method: "DELETE",
    path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry-batch/:request-inquiry-batchID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace List_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiry {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "request-inquiryID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentRequestInquiryListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiry400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "request-inquiryID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-inquiryID": props["request-inquiryID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentRequestInquiryListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiry400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiry: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry", serialization.serialize(it.path["request-inquiryID"]), "note-attachment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentRequestInquiryListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiry400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"request-inquiryID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiry",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry/:request-inquiryID/note-attachment",
    server,
    client
  } as const
}

export namespace CREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "request-inquiryID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: NoteAttachmentRequestInquiry
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentRequestInquiryCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "request-inquiryID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteAttachmentRequestInquiry}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-inquiryID": props["request-inquiryID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentRequestInquiryCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry", serialization.serialize(it.path["request-inquiryID"]), "note-attachment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentRequestInquiryCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"request-inquiryID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry/:request-inquiryID/note-attachment",
    server,
    client
  } as const
}

export namespace READ_NoteAttachment_for_User_MonetaryAccount_RequestInquiry {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "request-inquiryID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentRequestInquiryRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_NoteAttachment_for_User_MonetaryAccount_RequestInquiry400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "request-inquiryID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-inquiryID": props["request-inquiryID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentRequestInquiryRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_NoteAttachment_for_User_MonetaryAccount_RequestInquiry400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_NoteAttachment_for_User_MonetaryAccount_RequestInquiry: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry", serialization.serialize(it.path["request-inquiryID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentRequestInquiryRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_NoteAttachment_for_User_MonetaryAccount_RequestInquiry400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"request-inquiryID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_NoteAttachment_for_User_MonetaryAccount_RequestInquiry",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry/:request-inquiryID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "request-inquiryID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: NoteAttachmentRequestInquiry
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentRequestInquiryUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "request-inquiryID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteAttachmentRequestInquiry}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-inquiryID": props["request-inquiryID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentRequestInquiryUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry", serialization.serialize(it.path["request-inquiryID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentRequestInquiryUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"request-inquiryID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry/:request-inquiryID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "request-inquiryID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentRequestInquiryDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "request-inquiryID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-inquiryID": props["request-inquiryID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentRequestInquiryDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry", serialization.serialize(it.path["request-inquiryID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentRequestInquiryDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"request-inquiryID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry",
    method: "DELETE",
    path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry/:request-inquiryID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace List_all_NoteAttachment_for_User_MonetaryAccount_RequestResponse {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "request-responseID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentRequestResponseListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_NoteAttachment_for_User_MonetaryAccount_RequestResponse400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "request-responseID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-responseID": props["request-responseID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentRequestResponseListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_NoteAttachment_for_User_MonetaryAccount_RequestResponse400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_NoteAttachment_for_User_MonetaryAccount_RequestResponse: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-response", serialization.serialize(it.path["request-responseID"]), "note-attachment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentRequestResponseListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_NoteAttachment_for_User_MonetaryAccount_RequestResponse400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"request-responseID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_NoteAttachment_for_User_MonetaryAccount_RequestResponse",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/request-response/:request-responseID/note-attachment",
    server,
    client
  } as const
}

export namespace CREATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "request-responseID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: NoteAttachmentRequestResponse
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentRequestResponseCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "request-responseID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteAttachmentRequestResponse}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-responseID": props["request-responseID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentRequestResponseCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-response", serialization.serialize(it.path["request-responseID"]), "note-attachment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentRequestResponseCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"request-responseID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/request-response/:request-responseID/note-attachment",
    server,
    client
  } as const
}

export namespace READ_NoteAttachment_for_User_MonetaryAccount_RequestResponse {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "request-responseID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentRequestResponseRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_NoteAttachment_for_User_MonetaryAccount_RequestResponse400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "request-responseID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-responseID": props["request-responseID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentRequestResponseRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_NoteAttachment_for_User_MonetaryAccount_RequestResponse400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_NoteAttachment_for_User_MonetaryAccount_RequestResponse: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-response", serialization.serialize(it.path["request-responseID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentRequestResponseRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_NoteAttachment_for_User_MonetaryAccount_RequestResponse400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"request-responseID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_NoteAttachment_for_User_MonetaryAccount_RequestResponse",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/request-response/:request-responseID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "request-responseID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: NoteAttachmentRequestResponse
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentRequestResponseUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "request-responseID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteAttachmentRequestResponse}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-responseID": props["request-responseID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentRequestResponseUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-response", serialization.serialize(it.path["request-responseID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentRequestResponseUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"request-responseID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/request-response/:request-responseID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_NoteAttachment_for_User_MonetaryAccount_RequestResponse {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "request-responseID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentRequestResponseDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_NoteAttachment_for_User_MonetaryAccount_RequestResponse400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "request-responseID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-responseID": props["request-responseID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentRequestResponseDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_NoteAttachment_for_User_MonetaryAccount_RequestResponse400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_NoteAttachment_for_User_MonetaryAccount_RequestResponse: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-response", serialization.serialize(it.path["request-responseID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentRequestResponseDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_NoteAttachment_for_User_MonetaryAccount_RequestResponse400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"request-responseID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_NoteAttachment_for_User_MonetaryAccount_RequestResponse",
    method: "DELETE",
    path: "user/:userID/monetary-account/:monetary-accountID/request-response/:request-responseID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace List_all_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "scheduleID": number,
    "schedule-instanceID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentScheduleInstanceListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "scheduleID": number, "schedule-instanceID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "scheduleID": props["scheduleID"], "schedule-instanceID": props["schedule-instanceID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentScheduleInstanceListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule", serialization.serialize(it.path["scheduleID"]), "schedule-instance", serialization.serialize(it.path["schedule-instanceID"]), "note-attachment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentScheduleInstanceListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"scheduleID": serialization.deserialize(it.path[5]),"schedule-instanceID": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule/:scheduleID/schedule-instance/:schedule-instanceID/note-attachment",
    server,
    client
  } as const
}

export namespace CREATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "scheduleID": number,
    "schedule-instanceID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: NoteAttachmentScheduleInstance
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentScheduleInstanceCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "scheduleID": number, "schedule-instanceID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteAttachmentScheduleInstance}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "scheduleID": props["scheduleID"], "schedule-instanceID": props["schedule-instanceID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentScheduleInstanceCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule", serialization.serialize(it.path["scheduleID"]), "schedule-instance", serialization.serialize(it.path["schedule-instanceID"]), "note-attachment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentScheduleInstanceCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"scheduleID": serialization.deserialize(it.path[5]),"schedule-instanceID": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule/:scheduleID/schedule-instance/:schedule-instanceID/note-attachment",
    server,
    client
  } as const
}

export namespace READ_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "scheduleID": number,
    "schedule-instanceID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentScheduleInstanceRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "scheduleID": number, "schedule-instanceID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "scheduleID": props["scheduleID"], "schedule-instanceID": props["schedule-instanceID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentScheduleInstanceRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule", serialization.serialize(it.path["scheduleID"]), "schedule-instance", serialization.serialize(it.path["schedule-instanceID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentScheduleInstanceRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"scheduleID": serialization.deserialize(it.path[5]),"schedule-instanceID": serialization.deserialize(it.path[7]),"itemId": serialization.deserialize(it.path[9])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule/:scheduleID/schedule-instance/:schedule-instanceID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "scheduleID": number,
    "schedule-instanceID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: NoteAttachmentScheduleInstance
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentScheduleInstanceUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "scheduleID": number, "schedule-instanceID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteAttachmentScheduleInstance}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "scheduleID": props["scheduleID"], "schedule-instanceID": props["schedule-instanceID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentScheduleInstanceUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule", serialization.serialize(it.path["scheduleID"]), "schedule-instance", serialization.serialize(it.path["schedule-instanceID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentScheduleInstanceUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"scheduleID": serialization.deserialize(it.path[5]),"schedule-instanceID": serialization.deserialize(it.path[7]),"itemId": serialization.deserialize(it.path[9])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule/:scheduleID/schedule-instance/:schedule-instanceID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "scheduleID": number,
    "schedule-instanceID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentScheduleInstanceDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "scheduleID": number, "schedule-instanceID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "scheduleID": props["scheduleID"], "schedule-instanceID": props["schedule-instanceID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentScheduleInstanceDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule", serialization.serialize(it.path["scheduleID"]), "schedule-instance", serialization.serialize(it.path["schedule-instanceID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentScheduleInstanceDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"scheduleID": serialization.deserialize(it.path[5]),"schedule-instanceID": serialization.deserialize(it.path[7]),"itemId": serialization.deserialize(it.path[9])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance",
    method: "DELETE",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule/:scheduleID/schedule-instance/:schedule-instanceID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace List_all_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "schedule-payment-batchID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentSchedulePaymentBatchListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "schedule-payment-batchID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-payment-batchID": props["schedule-payment-batchID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentSchedulePaymentBatchListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment-batch", serialization.serialize(it.path["schedule-payment-batchID"]), "note-attachment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentSchedulePaymentBatchListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"schedule-payment-batchID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment-batch/:schedule-payment-batchID/note-attachment",
    server,
    client
  } as const
}

export namespace CREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "schedule-payment-batchID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: NoteAttachmentSchedulePaymentBatch
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentSchedulePaymentBatchCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "schedule-payment-batchID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteAttachmentSchedulePaymentBatch}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-payment-batchID": props["schedule-payment-batchID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentSchedulePaymentBatchCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment-batch", serialization.serialize(it.path["schedule-payment-batchID"]), "note-attachment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentSchedulePaymentBatchCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"schedule-payment-batchID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment-batch/:schedule-payment-batchID/note-attachment",
    server,
    client
  } as const
}

export namespace READ_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "schedule-payment-batchID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentSchedulePaymentBatchRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "schedule-payment-batchID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-payment-batchID": props["schedule-payment-batchID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentSchedulePaymentBatchRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment-batch", serialization.serialize(it.path["schedule-payment-batchID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentSchedulePaymentBatchRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"schedule-payment-batchID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment-batch/:schedule-payment-batchID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "schedule-payment-batchID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: NoteAttachmentSchedulePaymentBatch
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentSchedulePaymentBatchUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "schedule-payment-batchID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteAttachmentSchedulePaymentBatch}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-payment-batchID": props["schedule-payment-batchID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentSchedulePaymentBatchUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment-batch", serialization.serialize(it.path["schedule-payment-batchID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentSchedulePaymentBatchUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"schedule-payment-batchID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment-batch/:schedule-payment-batchID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "schedule-payment-batchID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentSchedulePaymentBatchDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "schedule-payment-batchID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-payment-batchID": props["schedule-payment-batchID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentSchedulePaymentBatchDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment-batch", serialization.serialize(it.path["schedule-payment-batchID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentSchedulePaymentBatchDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"schedule-payment-batchID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch",
    method: "DELETE",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment-batch/:schedule-payment-batchID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace List_all_NoteAttachment_for_User_MonetaryAccount_SchedulePayment {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "schedule-paymentID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentSchedulePaymentListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_NoteAttachment_for_User_MonetaryAccount_SchedulePayment400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "schedule-paymentID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-paymentID": props["schedule-paymentID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentSchedulePaymentListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_NoteAttachment_for_User_MonetaryAccount_SchedulePayment400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_NoteAttachment_for_User_MonetaryAccount_SchedulePayment: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment", serialization.serialize(it.path["schedule-paymentID"]), "note-attachment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentSchedulePaymentListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_NoteAttachment_for_User_MonetaryAccount_SchedulePayment400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"schedule-paymentID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_NoteAttachment_for_User_MonetaryAccount_SchedulePayment",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment/:schedule-paymentID/note-attachment",
    server,
    client
  } as const
}

export namespace CREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "schedule-paymentID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: NoteAttachmentSchedulePayment
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentSchedulePaymentCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "schedule-paymentID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteAttachmentSchedulePayment}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-paymentID": props["schedule-paymentID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentSchedulePaymentCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment", serialization.serialize(it.path["schedule-paymentID"]), "note-attachment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentSchedulePaymentCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"schedule-paymentID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment/:schedule-paymentID/note-attachment",
    server,
    client
  } as const
}

export namespace READ_NoteAttachment_for_User_MonetaryAccount_SchedulePayment {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "schedule-paymentID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentSchedulePaymentRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_NoteAttachment_for_User_MonetaryAccount_SchedulePayment400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "schedule-paymentID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-paymentID": props["schedule-paymentID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentSchedulePaymentRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_NoteAttachment_for_User_MonetaryAccount_SchedulePayment400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_NoteAttachment_for_User_MonetaryAccount_SchedulePayment: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment", serialization.serialize(it.path["schedule-paymentID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentSchedulePaymentRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_NoteAttachment_for_User_MonetaryAccount_SchedulePayment400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"schedule-paymentID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_NoteAttachment_for_User_MonetaryAccount_SchedulePayment",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment/:schedule-paymentID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "schedule-paymentID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: NoteAttachmentSchedulePayment
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentSchedulePaymentUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "schedule-paymentID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteAttachmentSchedulePayment}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-paymentID": props["schedule-paymentID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentSchedulePaymentUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment", serialization.serialize(it.path["schedule-paymentID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentSchedulePaymentUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"schedule-paymentID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment/:schedule-paymentID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "schedule-paymentID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentSchedulePaymentDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "schedule-paymentID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-paymentID": props["schedule-paymentID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentSchedulePaymentDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment", serialization.serialize(it.path["schedule-paymentID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentSchedulePaymentDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"schedule-paymentID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment",
    method: "DELETE",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment/:schedule-paymentID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace List_all_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "schedule-request-inquiry-batchID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentScheduleRequestBatchListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "schedule-request-inquiry-batchID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-request-inquiry-batchID": props["schedule-request-inquiry-batchID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentScheduleRequestBatchListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-request-inquiry-batch", serialization.serialize(it.path["schedule-request-inquiry-batchID"]), "note-attachment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentScheduleRequestBatchListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"schedule-request-inquiry-batchID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-request-inquiry-batch/:schedule-request-inquiry-batchID/note-attachment",
    server,
    client
  } as const
}

export namespace CREATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "schedule-request-inquiry-batchID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: NoteAttachmentScheduleRequestBatch
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentScheduleRequestBatchCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "schedule-request-inquiry-batchID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteAttachmentScheduleRequestBatch}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-request-inquiry-batchID": props["schedule-request-inquiry-batchID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentScheduleRequestBatchCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-request-inquiry-batch", serialization.serialize(it.path["schedule-request-inquiry-batchID"]), "note-attachment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentScheduleRequestBatchCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"schedule-request-inquiry-batchID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-request-inquiry-batch/:schedule-request-inquiry-batchID/note-attachment",
    server,
    client
  } as const
}

export namespace READ_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "schedule-request-inquiry-batchID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentScheduleRequestBatchRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "schedule-request-inquiry-batchID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-request-inquiry-batchID": props["schedule-request-inquiry-batchID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentScheduleRequestBatchRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-request-inquiry-batch", serialization.serialize(it.path["schedule-request-inquiry-batchID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentScheduleRequestBatchRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"schedule-request-inquiry-batchID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-request-inquiry-batch/:schedule-request-inquiry-batchID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "schedule-request-inquiry-batchID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: NoteAttachmentScheduleRequestBatch
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentScheduleRequestBatchUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "schedule-request-inquiry-batchID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteAttachmentScheduleRequestBatch}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-request-inquiry-batchID": props["schedule-request-inquiry-batchID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentScheduleRequestBatchUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-request-inquiry-batch", serialization.serialize(it.path["schedule-request-inquiry-batchID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentScheduleRequestBatchUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"schedule-request-inquiry-batchID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-request-inquiry-batch/:schedule-request-inquiry-batchID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "schedule-request-inquiry-batchID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentScheduleRequestBatchDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "schedule-request-inquiry-batchID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-request-inquiry-batchID": props["schedule-request-inquiry-batchID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentScheduleRequestBatchDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-request-inquiry-batch", serialization.serialize(it.path["schedule-request-inquiry-batchID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentScheduleRequestBatchDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"schedule-request-inquiry-batchID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch",
    method: "DELETE",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-request-inquiry-batch/:schedule-request-inquiry-batchID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace List_all_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "schedule-request-inquiryID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentScheduleRequestListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "schedule-request-inquiryID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-request-inquiryID": props["schedule-request-inquiryID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentScheduleRequestListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-request-inquiry", serialization.serialize(it.path["schedule-request-inquiryID"]), "note-attachment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentScheduleRequestListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"schedule-request-inquiryID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-request-inquiry/:schedule-request-inquiryID/note-attachment",
    server,
    client
  } as const
}

export namespace CREATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "schedule-request-inquiryID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: NoteAttachmentScheduleRequest
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentScheduleRequestCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "schedule-request-inquiryID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteAttachmentScheduleRequest}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-request-inquiryID": props["schedule-request-inquiryID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentScheduleRequestCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-request-inquiry", serialization.serialize(it.path["schedule-request-inquiryID"]), "note-attachment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentScheduleRequestCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"schedule-request-inquiryID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-request-inquiry/:schedule-request-inquiryID/note-attachment",
    server,
    client
  } as const
}

export namespace READ_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "schedule-request-inquiryID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentScheduleRequestRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "schedule-request-inquiryID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-request-inquiryID": props["schedule-request-inquiryID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentScheduleRequestRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-request-inquiry", serialization.serialize(it.path["schedule-request-inquiryID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentScheduleRequestRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"schedule-request-inquiryID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-request-inquiry/:schedule-request-inquiryID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "schedule-request-inquiryID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: NoteAttachmentScheduleRequest
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentScheduleRequestUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "schedule-request-inquiryID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteAttachmentScheduleRequest}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-request-inquiryID": props["schedule-request-inquiryID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentScheduleRequestUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-request-inquiry", serialization.serialize(it.path["schedule-request-inquiryID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentScheduleRequestUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"schedule-request-inquiryID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-request-inquiry/:schedule-request-inquiryID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "schedule-request-inquiryID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentScheduleRequestDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "schedule-request-inquiryID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-request-inquiryID": props["schedule-request-inquiryID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentScheduleRequestDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-request-inquiry", serialization.serialize(it.path["schedule-request-inquiryID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentScheduleRequestDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"schedule-request-inquiryID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry",
    method: "DELETE",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-request-inquiry/:schedule-request-inquiryID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace List_all_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "sofort-merchant-transactionID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentSofortMerchantTransactionListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "sofort-merchant-transactionID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "sofort-merchant-transactionID": props["sofort-merchant-transactionID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentSofortMerchantTransactionListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "sofort-merchant-transaction", serialization.serialize(it.path["sofort-merchant-transactionID"]), "note-attachment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentSofortMerchantTransactionListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"sofort-merchant-transactionID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/sofort-merchant-transaction/:sofort-merchant-transactionID/note-attachment",
    server,
    client
  } as const
}

export namespace CREATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "sofort-merchant-transactionID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: NoteAttachmentSofortMerchantTransaction
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentSofortMerchantTransactionCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "sofort-merchant-transactionID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteAttachmentSofortMerchantTransaction}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "sofort-merchant-transactionID": props["sofort-merchant-transactionID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentSofortMerchantTransactionCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "sofort-merchant-transaction", serialization.serialize(it.path["sofort-merchant-transactionID"]), "note-attachment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentSofortMerchantTransactionCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"sofort-merchant-transactionID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/sofort-merchant-transaction/:sofort-merchant-transactionID/note-attachment",
    server,
    client
  } as const
}

export namespace READ_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "sofort-merchant-transactionID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentSofortMerchantTransactionRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "sofort-merchant-transactionID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "sofort-merchant-transactionID": props["sofort-merchant-transactionID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentSofortMerchantTransactionRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "sofort-merchant-transaction", serialization.serialize(it.path["sofort-merchant-transactionID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentSofortMerchantTransactionRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"sofort-merchant-transactionID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/sofort-merchant-transaction/:sofort-merchant-transactionID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "sofort-merchant-transactionID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: NoteAttachmentSofortMerchantTransaction
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentSofortMerchantTransactionUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "sofort-merchant-transactionID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteAttachmentSofortMerchantTransaction}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "sofort-merchant-transactionID": props["sofort-merchant-transactionID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentSofortMerchantTransactionUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "sofort-merchant-transaction", serialization.serialize(it.path["sofort-merchant-transactionID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentSofortMerchantTransactionUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"sofort-merchant-transactionID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/sofort-merchant-transaction/:sofort-merchant-transactionID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "sofort-merchant-transactionID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentSofortMerchantTransactionDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "sofort-merchant-transactionID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "sofort-merchant-transactionID": props["sofort-merchant-transactionID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentSofortMerchantTransactionDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "sofort-merchant-transaction", serialization.serialize(it.path["sofort-merchant-transactionID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentSofortMerchantTransactionDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"sofort-merchant-transactionID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction",
    method: "DELETE",
    path: "user/:userID/monetary-account/:monetary-accountID/sofort-merchant-transaction/:sofort-merchant-transactionID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace List_all_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "whitelistID": number,
    "whitelist-resultID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentWhitelistResultListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "whitelistID": number, "whitelist-resultID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "whitelistID": props["whitelistID"], "whitelist-resultID": props["whitelist-resultID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentWhitelistResultListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "whitelist", serialization.serialize(it.path["whitelistID"]), "whitelist-result", serialization.serialize(it.path["whitelist-resultID"]), "note-attachment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentWhitelistResultListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"whitelistID": serialization.deserialize(it.path[5]),"whitelist-resultID": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/whitelist/:whitelistID/whitelist-result/:whitelist-resultID/note-attachment",
    server,
    client
  } as const
}

export namespace CREATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "whitelistID": number,
    "whitelist-resultID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: NoteAttachmentWhitelistResult
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentWhitelistResultCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "whitelistID": number, "whitelist-resultID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteAttachmentWhitelistResult}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "whitelistID": props["whitelistID"], "whitelist-resultID": props["whitelist-resultID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentWhitelistResultCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "whitelist", serialization.serialize(it.path["whitelistID"]), "whitelist-result", serialization.serialize(it.path["whitelist-resultID"]), "note-attachment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentWhitelistResultCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"whitelistID": serialization.deserialize(it.path[5]),"whitelist-resultID": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/whitelist/:whitelistID/whitelist-result/:whitelist-resultID/note-attachment",
    server,
    client
  } as const
}

export namespace READ_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "whitelistID": number,
    "whitelist-resultID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentWhitelistResultRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "whitelistID": number, "whitelist-resultID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "whitelistID": props["whitelistID"], "whitelist-resultID": props["whitelist-resultID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentWhitelistResultRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "whitelist", serialization.serialize(it.path["whitelistID"]), "whitelist-result", serialization.serialize(it.path["whitelist-resultID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentWhitelistResultRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"whitelistID": serialization.deserialize(it.path[5]),"whitelist-resultID": serialization.deserialize(it.path[7]),"itemId": serialization.deserialize(it.path[9])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/whitelist/:whitelistID/whitelist-result/:whitelist-resultID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "whitelistID": number,
    "whitelist-resultID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: NoteAttachmentWhitelistResult
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentWhitelistResultUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "whitelistID": number, "whitelist-resultID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteAttachmentWhitelistResult}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "whitelistID": props["whitelistID"], "whitelist-resultID": props["whitelist-resultID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentWhitelistResultUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "whitelist", serialization.serialize(it.path["whitelistID"]), "whitelist-result", serialization.serialize(it.path["whitelist-resultID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentWhitelistResultUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"whitelistID": serialization.deserialize(it.path[5]),"whitelist-resultID": serialization.deserialize(it.path[7]),"itemId": serialization.deserialize(it.path[9])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/whitelist/:whitelistID/whitelist-result/:whitelist-resultID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "whitelistID": number,
    "whitelist-resultID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteAttachmentWhitelistResultDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "whitelistID": number, "whitelist-resultID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "whitelistID": props["whitelistID"], "whitelist-resultID": props["whitelist-resultID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteAttachmentWhitelistResultDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "whitelist", serialization.serialize(it.path["whitelistID"]), "whitelist-result", serialization.serialize(it.path["whitelist-resultID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteAttachmentWhitelistResultDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"whitelistID": serialization.deserialize(it.path[5]),"whitelist-resultID": serialization.deserialize(it.path[7]),"itemId": serialization.deserialize(it.path[9])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult",
    method: "DELETE",
    path: "user/:userID/monetary-account/:monetary-accountID/whitelist/:whitelistID/whitelist-result/:whitelist-resultID/note-attachment/:itemId",
    server,
    client
  } as const
}

export namespace List_all_NoteText_for_User_MonetaryAccount_AdyenCardTransaction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "adyen-card-transactionID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextAdyenCardTransactionListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_NoteText_for_User_MonetaryAccount_AdyenCardTransaction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "adyen-card-transactionID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "adyen-card-transactionID": props["adyen-card-transactionID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextAdyenCardTransactionListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_NoteText_for_User_MonetaryAccount_AdyenCardTransaction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_NoteText_for_User_MonetaryAccount_AdyenCardTransaction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "adyen-card-transaction", serialization.serialize(it.path["adyen-card-transactionID"]), "note-text"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextAdyenCardTransactionListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_NoteText_for_User_MonetaryAccount_AdyenCardTransaction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"adyen-card-transactionID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_NoteText_for_User_MonetaryAccount_AdyenCardTransaction",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/adyen-card-transaction/:adyen-card-transactionID/note-text",
    server,
    client
  } as const
}

export namespace CREATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "adyen-card-transactionID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: NoteTextAdyenCardTransaction
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextAdyenCardTransactionCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "adyen-card-transactionID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteTextAdyenCardTransaction}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "adyen-card-transactionID": props["adyen-card-transactionID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextAdyenCardTransactionCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "adyen-card-transaction", serialization.serialize(it.path["adyen-card-transactionID"]), "note-text"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextAdyenCardTransactionCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"adyen-card-transactionID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/adyen-card-transaction/:adyen-card-transactionID/note-text",
    server,
    client
  } as const
}

export namespace READ_NoteText_for_User_MonetaryAccount_AdyenCardTransaction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "adyen-card-transactionID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextAdyenCardTransactionRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_NoteText_for_User_MonetaryAccount_AdyenCardTransaction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "adyen-card-transactionID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "adyen-card-transactionID": props["adyen-card-transactionID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextAdyenCardTransactionRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_NoteText_for_User_MonetaryAccount_AdyenCardTransaction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_NoteText_for_User_MonetaryAccount_AdyenCardTransaction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "adyen-card-transaction", serialization.serialize(it.path["adyen-card-transactionID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextAdyenCardTransactionRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_NoteText_for_User_MonetaryAccount_AdyenCardTransaction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"adyen-card-transactionID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_NoteText_for_User_MonetaryAccount_AdyenCardTransaction",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/adyen-card-transaction/:adyen-card-transactionID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "adyen-card-transactionID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: NoteTextAdyenCardTransaction
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextAdyenCardTransactionUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "adyen-card-transactionID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteTextAdyenCardTransaction}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "adyen-card-transactionID": props["adyen-card-transactionID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextAdyenCardTransactionUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "adyen-card-transaction", serialization.serialize(it.path["adyen-card-transactionID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextAdyenCardTransactionUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"adyen-card-transactionID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/adyen-card-transaction/:adyen-card-transactionID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "adyen-card-transactionID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextAdyenCardTransactionDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "adyen-card-transactionID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "adyen-card-transactionID": props["adyen-card-transactionID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextAdyenCardTransactionDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "adyen-card-transaction", serialization.serialize(it.path["adyen-card-transactionID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextAdyenCardTransactionDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"adyen-card-transactionID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction",
    method: "DELETE",
    path: "user/:userID/monetary-account/:monetary-accountID/adyen-card-transaction/:adyen-card-transactionID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace List_all_NoteText_for_User_MonetaryAccount_SwitchServicePayment {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "switch-service-paymentID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextBankSwitchServiceNetherlandsIncomingPaymentListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_NoteText_for_User_MonetaryAccount_SwitchServicePayment400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "switch-service-paymentID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "switch-service-paymentID": props["switch-service-paymentID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextBankSwitchServiceNetherlandsIncomingPaymentListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_NoteText_for_User_MonetaryAccount_SwitchServicePayment400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_NoteText_for_User_MonetaryAccount_SwitchServicePayment: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "switch-service-payment", serialization.serialize(it.path["switch-service-paymentID"]), "note-text"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextBankSwitchServiceNetherlandsIncomingPaymentListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_NoteText_for_User_MonetaryAccount_SwitchServicePayment400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"switch-service-paymentID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_NoteText_for_User_MonetaryAccount_SwitchServicePayment",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/switch-service-payment/:switch-service-paymentID/note-text",
    server,
    client
  } as const
}

export namespace CREATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "switch-service-paymentID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: NoteTextBankSwitchServiceNetherlandsIncomingPayment
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextBankSwitchServiceNetherlandsIncomingPaymentCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "switch-service-paymentID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteTextBankSwitchServiceNetherlandsIncomingPayment}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "switch-service-paymentID": props["switch-service-paymentID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextBankSwitchServiceNetherlandsIncomingPaymentCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "switch-service-payment", serialization.serialize(it.path["switch-service-paymentID"]), "note-text"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextBankSwitchServiceNetherlandsIncomingPaymentCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"switch-service-paymentID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/switch-service-payment/:switch-service-paymentID/note-text",
    server,
    client
  } as const
}

export namespace READ_NoteText_for_User_MonetaryAccount_SwitchServicePayment {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "switch-service-paymentID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextBankSwitchServiceNetherlandsIncomingPaymentRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_NoteText_for_User_MonetaryAccount_SwitchServicePayment400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "switch-service-paymentID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "switch-service-paymentID": props["switch-service-paymentID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextBankSwitchServiceNetherlandsIncomingPaymentRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_NoteText_for_User_MonetaryAccount_SwitchServicePayment400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_NoteText_for_User_MonetaryAccount_SwitchServicePayment: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "switch-service-payment", serialization.serialize(it.path["switch-service-paymentID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextBankSwitchServiceNetherlandsIncomingPaymentRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_NoteText_for_User_MonetaryAccount_SwitchServicePayment400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"switch-service-paymentID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_NoteText_for_User_MonetaryAccount_SwitchServicePayment",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/switch-service-payment/:switch-service-paymentID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "switch-service-paymentID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: NoteTextBankSwitchServiceNetherlandsIncomingPayment
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextBankSwitchServiceNetherlandsIncomingPaymentUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "switch-service-paymentID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteTextBankSwitchServiceNetherlandsIncomingPayment}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "switch-service-paymentID": props["switch-service-paymentID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextBankSwitchServiceNetherlandsIncomingPaymentUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "switch-service-payment", serialization.serialize(it.path["switch-service-paymentID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextBankSwitchServiceNetherlandsIncomingPaymentUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"switch-service-paymentID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/switch-service-payment/:switch-service-paymentID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_NoteText_for_User_MonetaryAccount_SwitchServicePayment {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "switch-service-paymentID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextBankSwitchServiceNetherlandsIncomingPaymentDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_NoteText_for_User_MonetaryAccount_SwitchServicePayment400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "switch-service-paymentID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "switch-service-paymentID": props["switch-service-paymentID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextBankSwitchServiceNetherlandsIncomingPaymentDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_NoteText_for_User_MonetaryAccount_SwitchServicePayment400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_NoteText_for_User_MonetaryAccount_SwitchServicePayment: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "switch-service-payment", serialization.serialize(it.path["switch-service-paymentID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextBankSwitchServiceNetherlandsIncomingPaymentDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_NoteText_for_User_MonetaryAccount_SwitchServicePayment400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"switch-service-paymentID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_NoteText_for_User_MonetaryAccount_SwitchServicePayment",
    method: "DELETE",
    path: "user/:userID/monetary-account/:monetary-accountID/switch-service-payment/:switch-service-paymentID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace List_all_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "bunqme-fundraiser-resultID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextBunqMeFundraiserResultListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "bunqme-fundraiser-resultID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "bunqme-fundraiser-resultID": props["bunqme-fundraiser-resultID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextBunqMeFundraiserResultListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "bunqme-fundraiser-result", serialization.serialize(it.path["bunqme-fundraiser-resultID"]), "note-text"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextBunqMeFundraiserResultListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"bunqme-fundraiser-resultID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/bunqme-fundraiser-result/:bunqme-fundraiser-resultID/note-text",
    server,
    client
  } as const
}

export namespace CREATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "bunqme-fundraiser-resultID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: NoteTextBunqMeFundraiserResult
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextBunqMeFundraiserResultCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "bunqme-fundraiser-resultID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteTextBunqMeFundraiserResult}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "bunqme-fundraiser-resultID": props["bunqme-fundraiser-resultID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextBunqMeFundraiserResultCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "bunqme-fundraiser-result", serialization.serialize(it.path["bunqme-fundraiser-resultID"]), "note-text"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextBunqMeFundraiserResultCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"bunqme-fundraiser-resultID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/bunqme-fundraiser-result/:bunqme-fundraiser-resultID/note-text",
    server,
    client
  } as const
}

export namespace READ_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "bunqme-fundraiser-resultID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextBunqMeFundraiserResultRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "bunqme-fundraiser-resultID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "bunqme-fundraiser-resultID": props["bunqme-fundraiser-resultID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextBunqMeFundraiserResultRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "bunqme-fundraiser-result", serialization.serialize(it.path["bunqme-fundraiser-resultID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextBunqMeFundraiserResultRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"bunqme-fundraiser-resultID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/bunqme-fundraiser-result/:bunqme-fundraiser-resultID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "bunqme-fundraiser-resultID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: NoteTextBunqMeFundraiserResult
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextBunqMeFundraiserResultUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "bunqme-fundraiser-resultID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteTextBunqMeFundraiserResult}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "bunqme-fundraiser-resultID": props["bunqme-fundraiser-resultID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextBunqMeFundraiserResultUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "bunqme-fundraiser-result", serialization.serialize(it.path["bunqme-fundraiser-resultID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextBunqMeFundraiserResultUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"bunqme-fundraiser-resultID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/bunqme-fundraiser-result/:bunqme-fundraiser-resultID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "bunqme-fundraiser-resultID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextBunqMeFundraiserResultDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "bunqme-fundraiser-resultID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "bunqme-fundraiser-resultID": props["bunqme-fundraiser-resultID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextBunqMeFundraiserResultDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "bunqme-fundraiser-result", serialization.serialize(it.path["bunqme-fundraiser-resultID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextBunqMeFundraiserResultDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"bunqme-fundraiser-resultID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult",
    method: "DELETE",
    path: "user/:userID/monetary-account/:monetary-accountID/bunqme-fundraiser-result/:bunqme-fundraiser-resultID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace List_all_NoteText_for_User_MonetaryAccount_DraftPayment {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "draft-paymentID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextDraftPaymentListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_NoteText_for_User_MonetaryAccount_DraftPayment400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "draft-paymentID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "draft-paymentID": props["draft-paymentID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextDraftPaymentListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_NoteText_for_User_MonetaryAccount_DraftPayment400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_NoteText_for_User_MonetaryAccount_DraftPayment: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "draft-payment", serialization.serialize(it.path["draft-paymentID"]), "note-text"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextDraftPaymentListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_NoteText_for_User_MonetaryAccount_DraftPayment400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"draft-paymentID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_NoteText_for_User_MonetaryAccount_DraftPayment",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/draft-payment/:draft-paymentID/note-text",
    server,
    client
  } as const
}

export namespace CREATE_NoteText_for_User_MonetaryAccount_DraftPayment {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "draft-paymentID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: NoteTextDraftPayment
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextDraftPaymentCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_NoteText_for_User_MonetaryAccount_DraftPayment400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "draft-paymentID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteTextDraftPayment}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "draft-paymentID": props["draft-paymentID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextDraftPaymentCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_NoteText_for_User_MonetaryAccount_DraftPayment400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_NoteText_for_User_MonetaryAccount_DraftPayment: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "draft-payment", serialization.serialize(it.path["draft-paymentID"]), "note-text"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextDraftPaymentCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_NoteText_for_User_MonetaryAccount_DraftPayment400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"draft-paymentID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_NoteText_for_User_MonetaryAccount_DraftPayment",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/draft-payment/:draft-paymentID/note-text",
    server,
    client
  } as const
}

export namespace READ_NoteText_for_User_MonetaryAccount_DraftPayment {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "draft-paymentID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextDraftPaymentRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_NoteText_for_User_MonetaryAccount_DraftPayment400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "draft-paymentID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "draft-paymentID": props["draft-paymentID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextDraftPaymentRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_NoteText_for_User_MonetaryAccount_DraftPayment400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_NoteText_for_User_MonetaryAccount_DraftPayment: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "draft-payment", serialization.serialize(it.path["draft-paymentID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextDraftPaymentRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_NoteText_for_User_MonetaryAccount_DraftPayment400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"draft-paymentID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_NoteText_for_User_MonetaryAccount_DraftPayment",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/draft-payment/:draft-paymentID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_NoteText_for_User_MonetaryAccount_DraftPayment {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "draft-paymentID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: NoteTextDraftPayment
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextDraftPaymentUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_NoteText_for_User_MonetaryAccount_DraftPayment400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "draft-paymentID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteTextDraftPayment}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "draft-paymentID": props["draft-paymentID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextDraftPaymentUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_NoteText_for_User_MonetaryAccount_DraftPayment400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_NoteText_for_User_MonetaryAccount_DraftPayment: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "draft-payment", serialization.serialize(it.path["draft-paymentID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextDraftPaymentUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_NoteText_for_User_MonetaryAccount_DraftPayment400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"draft-paymentID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_NoteText_for_User_MonetaryAccount_DraftPayment",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/draft-payment/:draft-paymentID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_NoteText_for_User_MonetaryAccount_DraftPayment {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "draft-paymentID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextDraftPaymentDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_NoteText_for_User_MonetaryAccount_DraftPayment400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "draft-paymentID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "draft-paymentID": props["draft-paymentID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextDraftPaymentDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_NoteText_for_User_MonetaryAccount_DraftPayment400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_NoteText_for_User_MonetaryAccount_DraftPayment: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "draft-payment", serialization.serialize(it.path["draft-paymentID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextDraftPaymentDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_NoteText_for_User_MonetaryAccount_DraftPayment400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"draft-paymentID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_NoteText_for_User_MonetaryAccount_DraftPayment",
    method: "DELETE",
    path: "user/:userID/monetary-account/:monetary-accountID/draft-payment/:draft-paymentID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace List_all_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "ideal-merchant-transactionID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextIdealMerchantTransactionListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "ideal-merchant-transactionID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "ideal-merchant-transactionID": props["ideal-merchant-transactionID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextIdealMerchantTransactionListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "ideal-merchant-transaction", serialization.serialize(it.path["ideal-merchant-transactionID"]), "note-text"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextIdealMerchantTransactionListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"ideal-merchant-transactionID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/ideal-merchant-transaction/:ideal-merchant-transactionID/note-text",
    server,
    client
  } as const
}

export namespace CREATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "ideal-merchant-transactionID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: NoteTextIdealMerchantTransaction
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextIdealMerchantTransactionCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "ideal-merchant-transactionID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteTextIdealMerchantTransaction}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "ideal-merchant-transactionID": props["ideal-merchant-transactionID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextIdealMerchantTransactionCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "ideal-merchant-transaction", serialization.serialize(it.path["ideal-merchant-transactionID"]), "note-text"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextIdealMerchantTransactionCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"ideal-merchant-transactionID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/ideal-merchant-transaction/:ideal-merchant-transactionID/note-text",
    server,
    client
  } as const
}

export namespace READ_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "ideal-merchant-transactionID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextIdealMerchantTransactionRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "ideal-merchant-transactionID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "ideal-merchant-transactionID": props["ideal-merchant-transactionID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextIdealMerchantTransactionRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "ideal-merchant-transaction", serialization.serialize(it.path["ideal-merchant-transactionID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextIdealMerchantTransactionRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"ideal-merchant-transactionID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/ideal-merchant-transaction/:ideal-merchant-transactionID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "ideal-merchant-transactionID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: NoteTextIdealMerchantTransaction
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextIdealMerchantTransactionUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "ideal-merchant-transactionID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteTextIdealMerchantTransaction}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "ideal-merchant-transactionID": props["ideal-merchant-transactionID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextIdealMerchantTransactionUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "ideal-merchant-transaction", serialization.serialize(it.path["ideal-merchant-transactionID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextIdealMerchantTransactionUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"ideal-merchant-transactionID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/ideal-merchant-transaction/:ideal-merchant-transactionID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "ideal-merchant-transactionID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextIdealMerchantTransactionDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "ideal-merchant-transactionID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "ideal-merchant-transactionID": props["ideal-merchant-transactionID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextIdealMerchantTransactionDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "ideal-merchant-transaction", serialization.serialize(it.path["ideal-merchant-transactionID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextIdealMerchantTransactionDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"ideal-merchant-transactionID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction",
    method: "DELETE",
    path: "user/:userID/monetary-account/:monetary-accountID/ideal-merchant-transaction/:ideal-merchant-transactionID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace List_all_NoteText_for_User_MonetaryAccount_MastercardAction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "mastercard-actionID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextMasterCardActionListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_NoteText_for_User_MonetaryAccount_MastercardAction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "mastercard-actionID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "mastercard-actionID": props["mastercard-actionID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextMasterCardActionListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_NoteText_for_User_MonetaryAccount_MastercardAction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_NoteText_for_User_MonetaryAccount_MastercardAction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "mastercard-action", serialization.serialize(it.path["mastercard-actionID"]), "note-text"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextMasterCardActionListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_NoteText_for_User_MonetaryAccount_MastercardAction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"mastercard-actionID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_NoteText_for_User_MonetaryAccount_MastercardAction",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/mastercard-action/:mastercard-actionID/note-text",
    server,
    client
  } as const
}

export namespace CREATE_NoteText_for_User_MonetaryAccount_MastercardAction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "mastercard-actionID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: NoteTextMasterCardAction
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextMasterCardActionCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_NoteText_for_User_MonetaryAccount_MastercardAction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "mastercard-actionID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteTextMasterCardAction}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "mastercard-actionID": props["mastercard-actionID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextMasterCardActionCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_NoteText_for_User_MonetaryAccount_MastercardAction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_NoteText_for_User_MonetaryAccount_MastercardAction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "mastercard-action", serialization.serialize(it.path["mastercard-actionID"]), "note-text"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextMasterCardActionCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_NoteText_for_User_MonetaryAccount_MastercardAction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"mastercard-actionID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_NoteText_for_User_MonetaryAccount_MastercardAction",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/mastercard-action/:mastercard-actionID/note-text",
    server,
    client
  } as const
}

export namespace READ_NoteText_for_User_MonetaryAccount_MastercardAction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "mastercard-actionID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextMasterCardActionRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_NoteText_for_User_MonetaryAccount_MastercardAction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "mastercard-actionID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "mastercard-actionID": props["mastercard-actionID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextMasterCardActionRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_NoteText_for_User_MonetaryAccount_MastercardAction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_NoteText_for_User_MonetaryAccount_MastercardAction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "mastercard-action", serialization.serialize(it.path["mastercard-actionID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextMasterCardActionRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_NoteText_for_User_MonetaryAccount_MastercardAction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"mastercard-actionID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_NoteText_for_User_MonetaryAccount_MastercardAction",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/mastercard-action/:mastercard-actionID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_NoteText_for_User_MonetaryAccount_MastercardAction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "mastercard-actionID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: NoteTextMasterCardAction
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextMasterCardActionUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_NoteText_for_User_MonetaryAccount_MastercardAction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "mastercard-actionID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteTextMasterCardAction}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "mastercard-actionID": props["mastercard-actionID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextMasterCardActionUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_NoteText_for_User_MonetaryAccount_MastercardAction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_NoteText_for_User_MonetaryAccount_MastercardAction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "mastercard-action", serialization.serialize(it.path["mastercard-actionID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextMasterCardActionUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_NoteText_for_User_MonetaryAccount_MastercardAction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"mastercard-actionID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_NoteText_for_User_MonetaryAccount_MastercardAction",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/mastercard-action/:mastercard-actionID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_NoteText_for_User_MonetaryAccount_MastercardAction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "mastercard-actionID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextMasterCardActionDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_NoteText_for_User_MonetaryAccount_MastercardAction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "mastercard-actionID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "mastercard-actionID": props["mastercard-actionID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextMasterCardActionDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_NoteText_for_User_MonetaryAccount_MastercardAction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_NoteText_for_User_MonetaryAccount_MastercardAction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "mastercard-action", serialization.serialize(it.path["mastercard-actionID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextMasterCardActionDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_NoteText_for_User_MonetaryAccount_MastercardAction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"mastercard-actionID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_NoteText_for_User_MonetaryAccount_MastercardAction",
    method: "DELETE",
    path: "user/:userID/monetary-account/:monetary-accountID/mastercard-action/:mastercard-actionID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace List_all_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "open-banking-merchant-transactionID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextOpenBankingMerchantTransactionListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "open-banking-merchant-transactionID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "open-banking-merchant-transactionID": props["open-banking-merchant-transactionID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextOpenBankingMerchantTransactionListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "open-banking-merchant-transaction", serialization.serialize(it.path["open-banking-merchant-transactionID"]), "note-text"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextOpenBankingMerchantTransactionListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"open-banking-merchant-transactionID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/open-banking-merchant-transaction/:open-banking-merchant-transactionID/note-text",
    server,
    client
  } as const
}

export namespace CREATE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "open-banking-merchant-transactionID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: NoteTextOpenBankingMerchantTransaction
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextOpenBankingMerchantTransactionCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "open-banking-merchant-transactionID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteTextOpenBankingMerchantTransaction}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "open-banking-merchant-transactionID": props["open-banking-merchant-transactionID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextOpenBankingMerchantTransactionCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "open-banking-merchant-transaction", serialization.serialize(it.path["open-banking-merchant-transactionID"]), "note-text"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextOpenBankingMerchantTransactionCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"open-banking-merchant-transactionID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/open-banking-merchant-transaction/:open-banking-merchant-transactionID/note-text",
    server,
    client
  } as const
}

export namespace READ_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "open-banking-merchant-transactionID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextOpenBankingMerchantTransactionRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "open-banking-merchant-transactionID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "open-banking-merchant-transactionID": props["open-banking-merchant-transactionID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextOpenBankingMerchantTransactionRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "open-banking-merchant-transaction", serialization.serialize(it.path["open-banking-merchant-transactionID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextOpenBankingMerchantTransactionRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"open-banking-merchant-transactionID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/open-banking-merchant-transaction/:open-banking-merchant-transactionID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "open-banking-merchant-transactionID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: NoteTextOpenBankingMerchantTransaction
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextOpenBankingMerchantTransactionUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "open-banking-merchant-transactionID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteTextOpenBankingMerchantTransaction}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "open-banking-merchant-transactionID": props["open-banking-merchant-transactionID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextOpenBankingMerchantTransactionUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "open-banking-merchant-transaction", serialization.serialize(it.path["open-banking-merchant-transactionID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextOpenBankingMerchantTransactionUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"open-banking-merchant-transactionID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/open-banking-merchant-transaction/:open-banking-merchant-transactionID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "open-banking-merchant-transactionID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextOpenBankingMerchantTransactionDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "open-banking-merchant-transactionID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "open-banking-merchant-transactionID": props["open-banking-merchant-transactionID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextOpenBankingMerchantTransactionDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "open-banking-merchant-transaction", serialization.serialize(it.path["open-banking-merchant-transactionID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextOpenBankingMerchantTransactionDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"open-banking-merchant-transactionID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction",
    method: "DELETE",
    path: "user/:userID/monetary-account/:monetary-accountID/open-banking-merchant-transaction/:open-banking-merchant-transactionID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace List_all_NoteText_for_User_MonetaryAccount_PaymentBatch {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "payment-batchID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextPaymentBatchListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_NoteText_for_User_MonetaryAccount_PaymentBatch400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "payment-batchID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "payment-batchID": props["payment-batchID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextPaymentBatchListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_NoteText_for_User_MonetaryAccount_PaymentBatch400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_NoteText_for_User_MonetaryAccount_PaymentBatch: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-batch", serialization.serialize(it.path["payment-batchID"]), "note-text"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextPaymentBatchListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_NoteText_for_User_MonetaryAccount_PaymentBatch400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"payment-batchID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_NoteText_for_User_MonetaryAccount_PaymentBatch",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/payment-batch/:payment-batchID/note-text",
    server,
    client
  } as const
}

export namespace CREATE_NoteText_for_User_MonetaryAccount_PaymentBatch {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "payment-batchID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: NoteTextPaymentBatch
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextPaymentBatchCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_NoteText_for_User_MonetaryAccount_PaymentBatch400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "payment-batchID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteTextPaymentBatch}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "payment-batchID": props["payment-batchID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextPaymentBatchCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_NoteText_for_User_MonetaryAccount_PaymentBatch400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_NoteText_for_User_MonetaryAccount_PaymentBatch: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-batch", serialization.serialize(it.path["payment-batchID"]), "note-text"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextPaymentBatchCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_NoteText_for_User_MonetaryAccount_PaymentBatch400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"payment-batchID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_NoteText_for_User_MonetaryAccount_PaymentBatch",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/payment-batch/:payment-batchID/note-text",
    server,
    client
  } as const
}

export namespace READ_NoteText_for_User_MonetaryAccount_PaymentBatch {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "payment-batchID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextPaymentBatchRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_NoteText_for_User_MonetaryAccount_PaymentBatch400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "payment-batchID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "payment-batchID": props["payment-batchID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextPaymentBatchRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_NoteText_for_User_MonetaryAccount_PaymentBatch400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_NoteText_for_User_MonetaryAccount_PaymentBatch: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-batch", serialization.serialize(it.path["payment-batchID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextPaymentBatchRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_NoteText_for_User_MonetaryAccount_PaymentBatch400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"payment-batchID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_NoteText_for_User_MonetaryAccount_PaymentBatch",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/payment-batch/:payment-batchID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_NoteText_for_User_MonetaryAccount_PaymentBatch {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "payment-batchID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: NoteTextPaymentBatch
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextPaymentBatchUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_NoteText_for_User_MonetaryAccount_PaymentBatch400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "payment-batchID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteTextPaymentBatch}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "payment-batchID": props["payment-batchID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextPaymentBatchUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_NoteText_for_User_MonetaryAccount_PaymentBatch400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_NoteText_for_User_MonetaryAccount_PaymentBatch: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-batch", serialization.serialize(it.path["payment-batchID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextPaymentBatchUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_NoteText_for_User_MonetaryAccount_PaymentBatch400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"payment-batchID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_NoteText_for_User_MonetaryAccount_PaymentBatch",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/payment-batch/:payment-batchID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_NoteText_for_User_MonetaryAccount_PaymentBatch {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "payment-batchID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextPaymentBatchDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_NoteText_for_User_MonetaryAccount_PaymentBatch400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "payment-batchID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "payment-batchID": props["payment-batchID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextPaymentBatchDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_NoteText_for_User_MonetaryAccount_PaymentBatch400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_NoteText_for_User_MonetaryAccount_PaymentBatch: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-batch", serialization.serialize(it.path["payment-batchID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextPaymentBatchDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_NoteText_for_User_MonetaryAccount_PaymentBatch400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"payment-batchID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_NoteText_for_User_MonetaryAccount_PaymentBatch",
    method: "DELETE",
    path: "user/:userID/monetary-account/:monetary-accountID/payment-batch/:payment-batchID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace List_all_NoteText_for_User_MonetaryAccount_PaymentDelayed {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "payment-delayedID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextPaymentDelayedListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_NoteText_for_User_MonetaryAccount_PaymentDelayed400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "payment-delayedID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "payment-delayedID": props["payment-delayedID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextPaymentDelayedListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_NoteText_for_User_MonetaryAccount_PaymentDelayed400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_NoteText_for_User_MonetaryAccount_PaymentDelayed: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-delayed", serialization.serialize(it.path["payment-delayedID"]), "note-text"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextPaymentDelayedListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_NoteText_for_User_MonetaryAccount_PaymentDelayed400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"payment-delayedID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_NoteText_for_User_MonetaryAccount_PaymentDelayed",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/payment-delayed/:payment-delayedID/note-text",
    server,
    client
  } as const
}

export namespace CREATE_NoteText_for_User_MonetaryAccount_PaymentDelayed {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "payment-delayedID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: NoteTextPaymentDelayed
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextPaymentDelayedCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_NoteText_for_User_MonetaryAccount_PaymentDelayed400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "payment-delayedID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteTextPaymentDelayed}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "payment-delayedID": props["payment-delayedID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextPaymentDelayedCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_NoteText_for_User_MonetaryAccount_PaymentDelayed400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_NoteText_for_User_MonetaryAccount_PaymentDelayed: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-delayed", serialization.serialize(it.path["payment-delayedID"]), "note-text"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextPaymentDelayedCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_NoteText_for_User_MonetaryAccount_PaymentDelayed400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"payment-delayedID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_NoteText_for_User_MonetaryAccount_PaymentDelayed",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/payment-delayed/:payment-delayedID/note-text",
    server,
    client
  } as const
}

export namespace READ_NoteText_for_User_MonetaryAccount_PaymentDelayed {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "payment-delayedID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextPaymentDelayedRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_NoteText_for_User_MonetaryAccount_PaymentDelayed400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "payment-delayedID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "payment-delayedID": props["payment-delayedID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextPaymentDelayedRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_NoteText_for_User_MonetaryAccount_PaymentDelayed400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_NoteText_for_User_MonetaryAccount_PaymentDelayed: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-delayed", serialization.serialize(it.path["payment-delayedID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextPaymentDelayedRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_NoteText_for_User_MonetaryAccount_PaymentDelayed400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"payment-delayedID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_NoteText_for_User_MonetaryAccount_PaymentDelayed",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/payment-delayed/:payment-delayedID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_NoteText_for_User_MonetaryAccount_PaymentDelayed {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "payment-delayedID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: NoteTextPaymentDelayed
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextPaymentDelayedUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_NoteText_for_User_MonetaryAccount_PaymentDelayed400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "payment-delayedID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteTextPaymentDelayed}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "payment-delayedID": props["payment-delayedID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextPaymentDelayedUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_NoteText_for_User_MonetaryAccount_PaymentDelayed400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_NoteText_for_User_MonetaryAccount_PaymentDelayed: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-delayed", serialization.serialize(it.path["payment-delayedID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextPaymentDelayedUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_NoteText_for_User_MonetaryAccount_PaymentDelayed400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"payment-delayedID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_NoteText_for_User_MonetaryAccount_PaymentDelayed",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/payment-delayed/:payment-delayedID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_NoteText_for_User_MonetaryAccount_PaymentDelayed {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "payment-delayedID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextPaymentDelayedDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_NoteText_for_User_MonetaryAccount_PaymentDelayed400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "payment-delayedID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "payment-delayedID": props["payment-delayedID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextPaymentDelayedDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_NoteText_for_User_MonetaryAccount_PaymentDelayed400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_NoteText_for_User_MonetaryAccount_PaymentDelayed: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-delayed", serialization.serialize(it.path["payment-delayedID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextPaymentDelayedDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_NoteText_for_User_MonetaryAccount_PaymentDelayed400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"payment-delayedID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_NoteText_for_User_MonetaryAccount_PaymentDelayed",
    method: "DELETE",
    path: "user/:userID/monetary-account/:monetary-accountID/payment-delayed/:payment-delayedID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace List_all_NoteText_for_User_MonetaryAccount_Payment {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "paymentID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextPaymentListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_NoteText_for_User_MonetaryAccount_Payment400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "paymentID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "paymentID": props["paymentID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextPaymentListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_NoteText_for_User_MonetaryAccount_Payment400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_NoteText_for_User_MonetaryAccount_Payment: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment", serialization.serialize(it.path["paymentID"]), "note-text"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextPaymentListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_NoteText_for_User_MonetaryAccount_Payment400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"paymentID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_NoteText_for_User_MonetaryAccount_Payment",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/payment/:paymentID/note-text",
    server,
    client
  } as const
}

export namespace CREATE_NoteText_for_User_MonetaryAccount_Payment {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "paymentID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: NoteTextPayment
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextPaymentCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_NoteText_for_User_MonetaryAccount_Payment400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "paymentID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteTextPayment}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "paymentID": props["paymentID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextPaymentCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_NoteText_for_User_MonetaryAccount_Payment400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_NoteText_for_User_MonetaryAccount_Payment: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment", serialization.serialize(it.path["paymentID"]), "note-text"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextPaymentCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_NoteText_for_User_MonetaryAccount_Payment400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"paymentID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_NoteText_for_User_MonetaryAccount_Payment",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/payment/:paymentID/note-text",
    server,
    client
  } as const
}

export namespace READ_NoteText_for_User_MonetaryAccount_Payment {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "paymentID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextPaymentRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_NoteText_for_User_MonetaryAccount_Payment400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "paymentID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "paymentID": props["paymentID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextPaymentRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_NoteText_for_User_MonetaryAccount_Payment400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_NoteText_for_User_MonetaryAccount_Payment: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment", serialization.serialize(it.path["paymentID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextPaymentRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_NoteText_for_User_MonetaryAccount_Payment400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"paymentID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_NoteText_for_User_MonetaryAccount_Payment",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/payment/:paymentID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_NoteText_for_User_MonetaryAccount_Payment {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "paymentID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: NoteTextPayment
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextPaymentUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_NoteText_for_User_MonetaryAccount_Payment400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "paymentID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteTextPayment}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "paymentID": props["paymentID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextPaymentUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_NoteText_for_User_MonetaryAccount_Payment400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_NoteText_for_User_MonetaryAccount_Payment: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment", serialization.serialize(it.path["paymentID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextPaymentUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_NoteText_for_User_MonetaryAccount_Payment400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"paymentID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_NoteText_for_User_MonetaryAccount_Payment",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/payment/:paymentID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_NoteText_for_User_MonetaryAccount_Payment {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "paymentID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextPaymentDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_NoteText_for_User_MonetaryAccount_Payment400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "paymentID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "paymentID": props["paymentID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextPaymentDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_NoteText_for_User_MonetaryAccount_Payment400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_NoteText_for_User_MonetaryAccount_Payment: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment", serialization.serialize(it.path["paymentID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextPaymentDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_NoteText_for_User_MonetaryAccount_Payment400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"paymentID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_NoteText_for_User_MonetaryAccount_Payment",
    method: "DELETE",
    path: "user/:userID/monetary-account/:monetary-accountID/payment/:paymentID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace List_all_NoteText_for_User_MonetaryAccount_RequestInquiryBatch {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "request-inquiry-batchID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextRequestInquiryBatchListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_NoteText_for_User_MonetaryAccount_RequestInquiryBatch400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "request-inquiry-batchID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-inquiry-batchID": props["request-inquiry-batchID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextRequestInquiryBatchListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_NoteText_for_User_MonetaryAccount_RequestInquiryBatch400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_NoteText_for_User_MonetaryAccount_RequestInquiryBatch: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry-batch", serialization.serialize(it.path["request-inquiry-batchID"]), "note-text"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextRequestInquiryBatchListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_NoteText_for_User_MonetaryAccount_RequestInquiryBatch400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"request-inquiry-batchID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_NoteText_for_User_MonetaryAccount_RequestInquiryBatch",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry-batch/:request-inquiry-batchID/note-text",
    server,
    client
  } as const
}

export namespace CREATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "request-inquiry-batchID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: NoteTextRequestInquiryBatch
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextRequestInquiryBatchCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "request-inquiry-batchID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteTextRequestInquiryBatch}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-inquiry-batchID": props["request-inquiry-batchID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextRequestInquiryBatchCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry-batch", serialization.serialize(it.path["request-inquiry-batchID"]), "note-text"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextRequestInquiryBatchCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"request-inquiry-batchID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry-batch/:request-inquiry-batchID/note-text",
    server,
    client
  } as const
}

export namespace READ_NoteText_for_User_MonetaryAccount_RequestInquiryBatch {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "request-inquiry-batchID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextRequestInquiryBatchRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_NoteText_for_User_MonetaryAccount_RequestInquiryBatch400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "request-inquiry-batchID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-inquiry-batchID": props["request-inquiry-batchID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextRequestInquiryBatchRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_NoteText_for_User_MonetaryAccount_RequestInquiryBatch400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_NoteText_for_User_MonetaryAccount_RequestInquiryBatch: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry-batch", serialization.serialize(it.path["request-inquiry-batchID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextRequestInquiryBatchRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_NoteText_for_User_MonetaryAccount_RequestInquiryBatch400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"request-inquiry-batchID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_NoteText_for_User_MonetaryAccount_RequestInquiryBatch",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry-batch/:request-inquiry-batchID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "request-inquiry-batchID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: NoteTextRequestInquiryBatch
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextRequestInquiryBatchUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "request-inquiry-batchID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteTextRequestInquiryBatch}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-inquiry-batchID": props["request-inquiry-batchID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextRequestInquiryBatchUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry-batch", serialization.serialize(it.path["request-inquiry-batchID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextRequestInquiryBatchUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"request-inquiry-batchID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry-batch/:request-inquiry-batchID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "request-inquiry-batchID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextRequestInquiryBatchDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "request-inquiry-batchID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-inquiry-batchID": props["request-inquiry-batchID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextRequestInquiryBatchDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry-batch", serialization.serialize(it.path["request-inquiry-batchID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextRequestInquiryBatchDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"request-inquiry-batchID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch",
    method: "DELETE",
    path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry-batch/:request-inquiry-batchID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace List_all_NoteText_for_User_MonetaryAccount_RequestInquiry {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "request-inquiryID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextRequestInquiryListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_NoteText_for_User_MonetaryAccount_RequestInquiry400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "request-inquiryID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-inquiryID": props["request-inquiryID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextRequestInquiryListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_NoteText_for_User_MonetaryAccount_RequestInquiry400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_NoteText_for_User_MonetaryAccount_RequestInquiry: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry", serialization.serialize(it.path["request-inquiryID"]), "note-text"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextRequestInquiryListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_NoteText_for_User_MonetaryAccount_RequestInquiry400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"request-inquiryID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_NoteText_for_User_MonetaryAccount_RequestInquiry",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry/:request-inquiryID/note-text",
    server,
    client
  } as const
}

export namespace CREATE_NoteText_for_User_MonetaryAccount_RequestInquiry {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "request-inquiryID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: NoteTextRequestInquiry
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextRequestInquiryCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_NoteText_for_User_MonetaryAccount_RequestInquiry400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "request-inquiryID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteTextRequestInquiry}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-inquiryID": props["request-inquiryID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextRequestInquiryCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_NoteText_for_User_MonetaryAccount_RequestInquiry400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_NoteText_for_User_MonetaryAccount_RequestInquiry: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry", serialization.serialize(it.path["request-inquiryID"]), "note-text"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextRequestInquiryCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_NoteText_for_User_MonetaryAccount_RequestInquiry400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"request-inquiryID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_NoteText_for_User_MonetaryAccount_RequestInquiry",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry/:request-inquiryID/note-text",
    server,
    client
  } as const
}

export namespace READ_NoteText_for_User_MonetaryAccount_RequestInquiry {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "request-inquiryID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextRequestInquiryRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_NoteText_for_User_MonetaryAccount_RequestInquiry400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "request-inquiryID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-inquiryID": props["request-inquiryID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextRequestInquiryRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_NoteText_for_User_MonetaryAccount_RequestInquiry400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_NoteText_for_User_MonetaryAccount_RequestInquiry: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry", serialization.serialize(it.path["request-inquiryID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextRequestInquiryRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_NoteText_for_User_MonetaryAccount_RequestInquiry400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"request-inquiryID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_NoteText_for_User_MonetaryAccount_RequestInquiry",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry/:request-inquiryID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_NoteText_for_User_MonetaryAccount_RequestInquiry {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "request-inquiryID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: NoteTextRequestInquiry
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextRequestInquiryUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_NoteText_for_User_MonetaryAccount_RequestInquiry400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "request-inquiryID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteTextRequestInquiry}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-inquiryID": props["request-inquiryID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextRequestInquiryUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_NoteText_for_User_MonetaryAccount_RequestInquiry400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_NoteText_for_User_MonetaryAccount_RequestInquiry: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry", serialization.serialize(it.path["request-inquiryID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextRequestInquiryUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_NoteText_for_User_MonetaryAccount_RequestInquiry400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"request-inquiryID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_NoteText_for_User_MonetaryAccount_RequestInquiry",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry/:request-inquiryID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_NoteText_for_User_MonetaryAccount_RequestInquiry {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "request-inquiryID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextRequestInquiryDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_NoteText_for_User_MonetaryAccount_RequestInquiry400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "request-inquiryID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-inquiryID": props["request-inquiryID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextRequestInquiryDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_NoteText_for_User_MonetaryAccount_RequestInquiry400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_NoteText_for_User_MonetaryAccount_RequestInquiry: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry", serialization.serialize(it.path["request-inquiryID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextRequestInquiryDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_NoteText_for_User_MonetaryAccount_RequestInquiry400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"request-inquiryID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_NoteText_for_User_MonetaryAccount_RequestInquiry",
    method: "DELETE",
    path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry/:request-inquiryID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace List_all_NoteText_for_User_MonetaryAccount_RequestResponse {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "request-responseID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextRequestResponseListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_NoteText_for_User_MonetaryAccount_RequestResponse400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "request-responseID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-responseID": props["request-responseID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextRequestResponseListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_NoteText_for_User_MonetaryAccount_RequestResponse400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_NoteText_for_User_MonetaryAccount_RequestResponse: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-response", serialization.serialize(it.path["request-responseID"]), "note-text"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextRequestResponseListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_NoteText_for_User_MonetaryAccount_RequestResponse400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"request-responseID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_NoteText_for_User_MonetaryAccount_RequestResponse",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/request-response/:request-responseID/note-text",
    server,
    client
  } as const
}

export namespace CREATE_NoteText_for_User_MonetaryAccount_RequestResponse {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "request-responseID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: NoteTextRequestResponse
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextRequestResponseCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_NoteText_for_User_MonetaryAccount_RequestResponse400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "request-responseID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteTextRequestResponse}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-responseID": props["request-responseID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextRequestResponseCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_NoteText_for_User_MonetaryAccount_RequestResponse400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_NoteText_for_User_MonetaryAccount_RequestResponse: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-response", serialization.serialize(it.path["request-responseID"]), "note-text"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextRequestResponseCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_NoteText_for_User_MonetaryAccount_RequestResponse400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"request-responseID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_NoteText_for_User_MonetaryAccount_RequestResponse",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/request-response/:request-responseID/note-text",
    server,
    client
  } as const
}

export namespace READ_NoteText_for_User_MonetaryAccount_RequestResponse {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "request-responseID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextRequestResponseRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_NoteText_for_User_MonetaryAccount_RequestResponse400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "request-responseID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-responseID": props["request-responseID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextRequestResponseRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_NoteText_for_User_MonetaryAccount_RequestResponse400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_NoteText_for_User_MonetaryAccount_RequestResponse: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-response", serialization.serialize(it.path["request-responseID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextRequestResponseRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_NoteText_for_User_MonetaryAccount_RequestResponse400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"request-responseID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_NoteText_for_User_MonetaryAccount_RequestResponse",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/request-response/:request-responseID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_NoteText_for_User_MonetaryAccount_RequestResponse {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "request-responseID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: NoteTextRequestResponse
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextRequestResponseUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_NoteText_for_User_MonetaryAccount_RequestResponse400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "request-responseID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteTextRequestResponse}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-responseID": props["request-responseID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextRequestResponseUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_NoteText_for_User_MonetaryAccount_RequestResponse400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_NoteText_for_User_MonetaryAccount_RequestResponse: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-response", serialization.serialize(it.path["request-responseID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextRequestResponseUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_NoteText_for_User_MonetaryAccount_RequestResponse400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"request-responseID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_NoteText_for_User_MonetaryAccount_RequestResponse",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/request-response/:request-responseID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_NoteText_for_User_MonetaryAccount_RequestResponse {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "request-responseID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextRequestResponseDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_NoteText_for_User_MonetaryAccount_RequestResponse400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "request-responseID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-responseID": props["request-responseID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextRequestResponseDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_NoteText_for_User_MonetaryAccount_RequestResponse400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_NoteText_for_User_MonetaryAccount_RequestResponse: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-response", serialization.serialize(it.path["request-responseID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextRequestResponseDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_NoteText_for_User_MonetaryAccount_RequestResponse400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"request-responseID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_NoteText_for_User_MonetaryAccount_RequestResponse",
    method: "DELETE",
    path: "user/:userID/monetary-account/:monetary-accountID/request-response/:request-responseID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace List_all_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "scheduleID": number,
    "schedule-instanceID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextScheduleInstanceListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "scheduleID": number, "schedule-instanceID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "scheduleID": props["scheduleID"], "schedule-instanceID": props["schedule-instanceID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextScheduleInstanceListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule", serialization.serialize(it.path["scheduleID"]), "schedule-instance", serialization.serialize(it.path["schedule-instanceID"]), "note-text"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextScheduleInstanceListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"scheduleID": serialization.deserialize(it.path[5]),"schedule-instanceID": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule/:scheduleID/schedule-instance/:schedule-instanceID/note-text",
    server,
    client
  } as const
}

export namespace CREATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "scheduleID": number,
    "schedule-instanceID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: NoteTextScheduleInstance
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextScheduleInstanceCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "scheduleID": number, "schedule-instanceID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteTextScheduleInstance}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "scheduleID": props["scheduleID"], "schedule-instanceID": props["schedule-instanceID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextScheduleInstanceCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule", serialization.serialize(it.path["scheduleID"]), "schedule-instance", serialization.serialize(it.path["schedule-instanceID"]), "note-text"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextScheduleInstanceCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"scheduleID": serialization.deserialize(it.path[5]),"schedule-instanceID": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule/:scheduleID/schedule-instance/:schedule-instanceID/note-text",
    server,
    client
  } as const
}

export namespace READ_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "scheduleID": number,
    "schedule-instanceID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextScheduleInstanceRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "scheduleID": number, "schedule-instanceID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "scheduleID": props["scheduleID"], "schedule-instanceID": props["schedule-instanceID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextScheduleInstanceRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule", serialization.serialize(it.path["scheduleID"]), "schedule-instance", serialization.serialize(it.path["schedule-instanceID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextScheduleInstanceRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"scheduleID": serialization.deserialize(it.path[5]),"schedule-instanceID": serialization.deserialize(it.path[7]),"itemId": serialization.deserialize(it.path[9])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule/:scheduleID/schedule-instance/:schedule-instanceID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "scheduleID": number,
    "schedule-instanceID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: NoteTextScheduleInstance
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextScheduleInstanceUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "scheduleID": number, "schedule-instanceID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteTextScheduleInstance}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "scheduleID": props["scheduleID"], "schedule-instanceID": props["schedule-instanceID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextScheduleInstanceUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule", serialization.serialize(it.path["scheduleID"]), "schedule-instance", serialization.serialize(it.path["schedule-instanceID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextScheduleInstanceUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"scheduleID": serialization.deserialize(it.path[5]),"schedule-instanceID": serialization.deserialize(it.path[7]),"itemId": serialization.deserialize(it.path[9])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule/:scheduleID/schedule-instance/:schedule-instanceID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "scheduleID": number,
    "schedule-instanceID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextScheduleInstanceDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "scheduleID": number, "schedule-instanceID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "scheduleID": props["scheduleID"], "schedule-instanceID": props["schedule-instanceID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextScheduleInstanceDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule", serialization.serialize(it.path["scheduleID"]), "schedule-instance", serialization.serialize(it.path["schedule-instanceID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextScheduleInstanceDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"scheduleID": serialization.deserialize(it.path[5]),"schedule-instanceID": serialization.deserialize(it.path[7]),"itemId": serialization.deserialize(it.path[9])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance",
    method: "DELETE",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule/:scheduleID/schedule-instance/:schedule-instanceID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace List_all_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "schedule-payment-batchID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextSchedulePaymentBatchListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "schedule-payment-batchID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-payment-batchID": props["schedule-payment-batchID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextSchedulePaymentBatchListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment-batch", serialization.serialize(it.path["schedule-payment-batchID"]), "note-text"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextSchedulePaymentBatchListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"schedule-payment-batchID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment-batch/:schedule-payment-batchID/note-text",
    server,
    client
  } as const
}

export namespace CREATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "schedule-payment-batchID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: NoteTextSchedulePaymentBatch
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextSchedulePaymentBatchCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "schedule-payment-batchID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteTextSchedulePaymentBatch}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-payment-batchID": props["schedule-payment-batchID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextSchedulePaymentBatchCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment-batch", serialization.serialize(it.path["schedule-payment-batchID"]), "note-text"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextSchedulePaymentBatchCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"schedule-payment-batchID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment-batch/:schedule-payment-batchID/note-text",
    server,
    client
  } as const
}

export namespace READ_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "schedule-payment-batchID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextSchedulePaymentBatchRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "schedule-payment-batchID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-payment-batchID": props["schedule-payment-batchID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextSchedulePaymentBatchRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment-batch", serialization.serialize(it.path["schedule-payment-batchID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextSchedulePaymentBatchRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"schedule-payment-batchID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment-batch/:schedule-payment-batchID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "schedule-payment-batchID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: NoteTextSchedulePaymentBatch
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextSchedulePaymentBatchUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "schedule-payment-batchID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteTextSchedulePaymentBatch}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-payment-batchID": props["schedule-payment-batchID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextSchedulePaymentBatchUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment-batch", serialization.serialize(it.path["schedule-payment-batchID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextSchedulePaymentBatchUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"schedule-payment-batchID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment-batch/:schedule-payment-batchID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "schedule-payment-batchID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextSchedulePaymentBatchDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "schedule-payment-batchID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-payment-batchID": props["schedule-payment-batchID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextSchedulePaymentBatchDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment-batch", serialization.serialize(it.path["schedule-payment-batchID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextSchedulePaymentBatchDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"schedule-payment-batchID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch",
    method: "DELETE",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment-batch/:schedule-payment-batchID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace List_all_NoteText_for_User_MonetaryAccount_SchedulePayment {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "schedule-paymentID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextSchedulePaymentListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_NoteText_for_User_MonetaryAccount_SchedulePayment400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "schedule-paymentID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-paymentID": props["schedule-paymentID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextSchedulePaymentListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_NoteText_for_User_MonetaryAccount_SchedulePayment400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_NoteText_for_User_MonetaryAccount_SchedulePayment: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment", serialization.serialize(it.path["schedule-paymentID"]), "note-text"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextSchedulePaymentListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_NoteText_for_User_MonetaryAccount_SchedulePayment400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"schedule-paymentID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_NoteText_for_User_MonetaryAccount_SchedulePayment",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment/:schedule-paymentID/note-text",
    server,
    client
  } as const
}

export namespace CREATE_NoteText_for_User_MonetaryAccount_SchedulePayment {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "schedule-paymentID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: NoteTextSchedulePayment
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextSchedulePaymentCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_NoteText_for_User_MonetaryAccount_SchedulePayment400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "schedule-paymentID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteTextSchedulePayment}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-paymentID": props["schedule-paymentID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextSchedulePaymentCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_NoteText_for_User_MonetaryAccount_SchedulePayment400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_NoteText_for_User_MonetaryAccount_SchedulePayment: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment", serialization.serialize(it.path["schedule-paymentID"]), "note-text"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextSchedulePaymentCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_NoteText_for_User_MonetaryAccount_SchedulePayment400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"schedule-paymentID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_NoteText_for_User_MonetaryAccount_SchedulePayment",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment/:schedule-paymentID/note-text",
    server,
    client
  } as const
}

export namespace READ_NoteText_for_User_MonetaryAccount_SchedulePayment {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "schedule-paymentID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextSchedulePaymentRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_NoteText_for_User_MonetaryAccount_SchedulePayment400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "schedule-paymentID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-paymentID": props["schedule-paymentID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextSchedulePaymentRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_NoteText_for_User_MonetaryAccount_SchedulePayment400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_NoteText_for_User_MonetaryAccount_SchedulePayment: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment", serialization.serialize(it.path["schedule-paymentID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextSchedulePaymentRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_NoteText_for_User_MonetaryAccount_SchedulePayment400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"schedule-paymentID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_NoteText_for_User_MonetaryAccount_SchedulePayment",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment/:schedule-paymentID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_NoteText_for_User_MonetaryAccount_SchedulePayment {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "schedule-paymentID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: NoteTextSchedulePayment
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextSchedulePaymentUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_NoteText_for_User_MonetaryAccount_SchedulePayment400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "schedule-paymentID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteTextSchedulePayment}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-paymentID": props["schedule-paymentID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextSchedulePaymentUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_NoteText_for_User_MonetaryAccount_SchedulePayment400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_NoteText_for_User_MonetaryAccount_SchedulePayment: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment", serialization.serialize(it.path["schedule-paymentID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextSchedulePaymentUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_NoteText_for_User_MonetaryAccount_SchedulePayment400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"schedule-paymentID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_NoteText_for_User_MonetaryAccount_SchedulePayment",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment/:schedule-paymentID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_NoteText_for_User_MonetaryAccount_SchedulePayment {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "schedule-paymentID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextSchedulePaymentDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_NoteText_for_User_MonetaryAccount_SchedulePayment400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "schedule-paymentID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-paymentID": props["schedule-paymentID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextSchedulePaymentDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_NoteText_for_User_MonetaryAccount_SchedulePayment400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_NoteText_for_User_MonetaryAccount_SchedulePayment: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment", serialization.serialize(it.path["schedule-paymentID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextSchedulePaymentDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_NoteText_for_User_MonetaryAccount_SchedulePayment400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"schedule-paymentID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_NoteText_for_User_MonetaryAccount_SchedulePayment",
    method: "DELETE",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment/:schedule-paymentID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace List_all_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "schedule-request-inquiry-batchID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextScheduleRequestBatchListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "schedule-request-inquiry-batchID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-request-inquiry-batchID": props["schedule-request-inquiry-batchID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextScheduleRequestBatchListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-request-inquiry-batch", serialization.serialize(it.path["schedule-request-inquiry-batchID"]), "note-text"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextScheduleRequestBatchListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"schedule-request-inquiry-batchID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-request-inquiry-batch/:schedule-request-inquiry-batchID/note-text",
    server,
    client
  } as const
}

export namespace CREATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "schedule-request-inquiry-batchID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: NoteTextScheduleRequestBatch
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextScheduleRequestBatchCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "schedule-request-inquiry-batchID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteTextScheduleRequestBatch}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-request-inquiry-batchID": props["schedule-request-inquiry-batchID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextScheduleRequestBatchCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-request-inquiry-batch", serialization.serialize(it.path["schedule-request-inquiry-batchID"]), "note-text"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextScheduleRequestBatchCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"schedule-request-inquiry-batchID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-request-inquiry-batch/:schedule-request-inquiry-batchID/note-text",
    server,
    client
  } as const
}

export namespace READ_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "schedule-request-inquiry-batchID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextScheduleRequestBatchRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "schedule-request-inquiry-batchID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-request-inquiry-batchID": props["schedule-request-inquiry-batchID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextScheduleRequestBatchRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-request-inquiry-batch", serialization.serialize(it.path["schedule-request-inquiry-batchID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextScheduleRequestBatchRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"schedule-request-inquiry-batchID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-request-inquiry-batch/:schedule-request-inquiry-batchID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "schedule-request-inquiry-batchID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: NoteTextScheduleRequestBatch
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextScheduleRequestBatchUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "schedule-request-inquiry-batchID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteTextScheduleRequestBatch}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-request-inquiry-batchID": props["schedule-request-inquiry-batchID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextScheduleRequestBatchUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-request-inquiry-batch", serialization.serialize(it.path["schedule-request-inquiry-batchID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextScheduleRequestBatchUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"schedule-request-inquiry-batchID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-request-inquiry-batch/:schedule-request-inquiry-batchID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "schedule-request-inquiry-batchID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextScheduleRequestBatchDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "schedule-request-inquiry-batchID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-request-inquiry-batchID": props["schedule-request-inquiry-batchID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextScheduleRequestBatchDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-request-inquiry-batch", serialization.serialize(it.path["schedule-request-inquiry-batchID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextScheduleRequestBatchDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"schedule-request-inquiry-batchID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch",
    method: "DELETE",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-request-inquiry-batch/:schedule-request-inquiry-batchID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace List_all_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "schedule-request-inquiryID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextScheduleRequestListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "schedule-request-inquiryID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-request-inquiryID": props["schedule-request-inquiryID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextScheduleRequestListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-request-inquiry", serialization.serialize(it.path["schedule-request-inquiryID"]), "note-text"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextScheduleRequestListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"schedule-request-inquiryID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-request-inquiry/:schedule-request-inquiryID/note-text",
    server,
    client
  } as const
}

export namespace CREATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "schedule-request-inquiryID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: NoteTextScheduleRequest
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextScheduleRequestCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "schedule-request-inquiryID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteTextScheduleRequest}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-request-inquiryID": props["schedule-request-inquiryID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextScheduleRequestCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-request-inquiry", serialization.serialize(it.path["schedule-request-inquiryID"]), "note-text"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextScheduleRequestCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"schedule-request-inquiryID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-request-inquiry/:schedule-request-inquiryID/note-text",
    server,
    client
  } as const
}

export namespace READ_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "schedule-request-inquiryID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextScheduleRequestRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "schedule-request-inquiryID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-request-inquiryID": props["schedule-request-inquiryID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextScheduleRequestRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-request-inquiry", serialization.serialize(it.path["schedule-request-inquiryID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextScheduleRequestRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"schedule-request-inquiryID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-request-inquiry/:schedule-request-inquiryID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "schedule-request-inquiryID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: NoteTextScheduleRequest
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextScheduleRequestUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "schedule-request-inquiryID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteTextScheduleRequest}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-request-inquiryID": props["schedule-request-inquiryID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextScheduleRequestUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-request-inquiry", serialization.serialize(it.path["schedule-request-inquiryID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextScheduleRequestUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"schedule-request-inquiryID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-request-inquiry/:schedule-request-inquiryID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "schedule-request-inquiryID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextScheduleRequestDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "schedule-request-inquiryID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-request-inquiryID": props["schedule-request-inquiryID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextScheduleRequestDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-request-inquiry", serialization.serialize(it.path["schedule-request-inquiryID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextScheduleRequestDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"schedule-request-inquiryID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry",
    method: "DELETE",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-request-inquiry/:schedule-request-inquiryID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace List_all_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "sofort-merchant-transactionID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextSofortMerchantTransactionListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "sofort-merchant-transactionID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "sofort-merchant-transactionID": props["sofort-merchant-transactionID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextSofortMerchantTransactionListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "sofort-merchant-transaction", serialization.serialize(it.path["sofort-merchant-transactionID"]), "note-text"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextSofortMerchantTransactionListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"sofort-merchant-transactionID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/sofort-merchant-transaction/:sofort-merchant-transactionID/note-text",
    server,
    client
  } as const
}

export namespace CREATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "sofort-merchant-transactionID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: NoteTextSofortMerchantTransaction
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextSofortMerchantTransactionCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "sofort-merchant-transactionID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteTextSofortMerchantTransaction}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "sofort-merchant-transactionID": props["sofort-merchant-transactionID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextSofortMerchantTransactionCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "sofort-merchant-transaction", serialization.serialize(it.path["sofort-merchant-transactionID"]), "note-text"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextSofortMerchantTransactionCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"sofort-merchant-transactionID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/sofort-merchant-transaction/:sofort-merchant-transactionID/note-text",
    server,
    client
  } as const
}

export namespace READ_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "sofort-merchant-transactionID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextSofortMerchantTransactionRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "sofort-merchant-transactionID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "sofort-merchant-transactionID": props["sofort-merchant-transactionID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextSofortMerchantTransactionRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "sofort-merchant-transaction", serialization.serialize(it.path["sofort-merchant-transactionID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextSofortMerchantTransactionRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"sofort-merchant-transactionID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/sofort-merchant-transaction/:sofort-merchant-transactionID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "sofort-merchant-transactionID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: NoteTextSofortMerchantTransaction
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextSofortMerchantTransactionUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "sofort-merchant-transactionID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteTextSofortMerchantTransaction}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "sofort-merchant-transactionID": props["sofort-merchant-transactionID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextSofortMerchantTransactionUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "sofort-merchant-transaction", serialization.serialize(it.path["sofort-merchant-transactionID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextSofortMerchantTransactionUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"sofort-merchant-transactionID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/sofort-merchant-transaction/:sofort-merchant-transactionID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "sofort-merchant-transactionID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextSofortMerchantTransactionDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "sofort-merchant-transactionID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "sofort-merchant-transactionID": props["sofort-merchant-transactionID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextSofortMerchantTransactionDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "sofort-merchant-transaction", serialization.serialize(it.path["sofort-merchant-transactionID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextSofortMerchantTransactionDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"sofort-merchant-transactionID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction",
    method: "DELETE",
    path: "user/:userID/monetary-account/:monetary-accountID/sofort-merchant-transaction/:sofort-merchant-transactionID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace List_all_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "whitelistID": number,
    "whitelist-resultID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextWhitelistResultListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "whitelistID": number, "whitelist-resultID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "whitelistID": props["whitelistID"], "whitelist-resultID": props["whitelist-resultID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextWhitelistResultListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "whitelist", serialization.serialize(it.path["whitelistID"]), "whitelist-result", serialization.serialize(it.path["whitelist-resultID"]), "note-text"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextWhitelistResultListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"whitelistID": serialization.deserialize(it.path[5]),"whitelist-resultID": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/whitelist/:whitelistID/whitelist-result/:whitelist-resultID/note-text",
    server,
    client
  } as const
}

export namespace CREATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "whitelistID": number,
    "whitelist-resultID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: NoteTextWhitelistResult
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextWhitelistResultCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "whitelistID": number, "whitelist-resultID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteTextWhitelistResult}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "whitelistID": props["whitelistID"], "whitelist-resultID": props["whitelist-resultID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextWhitelistResultCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "whitelist", serialization.serialize(it.path["whitelistID"]), "whitelist-result", serialization.serialize(it.path["whitelist-resultID"]), "note-text"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextWhitelistResultCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"whitelistID": serialization.deserialize(it.path[5]),"whitelist-resultID": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/whitelist/:whitelistID/whitelist-result/:whitelist-resultID/note-text",
    server,
    client
  } as const
}

export namespace READ_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "whitelistID": number,
    "whitelist-resultID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextWhitelistResultRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "whitelistID": number, "whitelist-resultID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "whitelistID": props["whitelistID"], "whitelist-resultID": props["whitelist-resultID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextWhitelistResultRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "whitelist", serialization.serialize(it.path["whitelistID"]), "whitelist-result", serialization.serialize(it.path["whitelist-resultID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextWhitelistResultRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"whitelistID": serialization.deserialize(it.path[5]),"whitelist-resultID": serialization.deserialize(it.path[7]),"itemId": serialization.deserialize(it.path[9])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/whitelist/:whitelistID/whitelist-result/:whitelist-resultID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "whitelistID": number,
    "whitelist-resultID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: NoteTextWhitelistResult
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextWhitelistResultUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "whitelistID": number, "whitelist-resultID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NoteTextWhitelistResult}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "whitelistID": props["whitelistID"], "whitelist-resultID": props["whitelist-resultID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextWhitelistResultUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "whitelist", serialization.serialize(it.path["whitelistID"]), "whitelist-result", serialization.serialize(it.path["whitelist-resultID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextWhitelistResultUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"whitelistID": serialization.deserialize(it.path[5]),"whitelist-resultID": serialization.deserialize(it.path[7]),"itemId": serialization.deserialize(it.path[9])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/whitelist/:whitelistID/whitelist-result/:whitelist-resultID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "whitelistID": number,
    "whitelist-resultID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NoteTextWhitelistResultDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "whitelistID": number, "whitelist-resultID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "whitelistID": props["whitelistID"], "whitelist-resultID": props["whitelist-resultID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NoteTextWhitelistResultDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "whitelist", serialization.serialize(it.path["whitelistID"]), "whitelist-result", serialization.serialize(it.path["whitelist-resultID"]), "note-text", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NoteTextWhitelistResultDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"whitelistID": serialization.deserialize(it.path[5]),"whitelist-resultID": serialization.deserialize(it.path[7]),"itemId": serialization.deserialize(it.path[9])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult",
    method: "DELETE",
    path: "user/:userID/monetary-account/:monetary-accountID/whitelist/:whitelistID/whitelist-result/:whitelist-resultID/note-text/:itemId",
    server,
    client
  } as const
}

export namespace List_all_NotificationFilterEmail_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NotificationFilterEmailListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_NotificationFilterEmail_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NotificationFilterEmailListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_NotificationFilterEmail_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_NotificationFilterEmail_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "notification-filter-email"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NotificationFilterEmailListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_NotificationFilterEmail_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_NotificationFilterEmail_for_User",
    method: "GET",
    path: "user/:userID/notification-filter-email",
    server,
    client
  } as const
}

export namespace CREATE_NotificationFilterEmail_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: NotificationFilterEmail
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NotificationFilterEmailCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_NotificationFilterEmail_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NotificationFilterEmail}): Request => ({
    path: {"userID": props["userID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NotificationFilterEmailCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_NotificationFilterEmail_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_NotificationFilterEmail_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "notification-filter-email"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NotificationFilterEmailCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_NotificationFilterEmail_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_NotificationFilterEmail_for_User",
    method: "POST",
    path: "user/:userID/notification-filter-email",
    server,
    client
  } as const
}

export namespace List_all_NotificationFilterFailure_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NotificationFilterFailureListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_NotificationFilterFailure_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NotificationFilterFailureListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_NotificationFilterFailure_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_NotificationFilterFailure_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "notification-filter-failure"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NotificationFilterFailureListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_NotificationFilterFailure_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_NotificationFilterFailure_for_User",
    method: "GET",
    path: "user/:userID/notification-filter-failure",
    server,
    client
  } as const
}

export namespace CREATE_NotificationFilterFailure_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: NotificationFilterFailure
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NotificationFilterFailureCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_NotificationFilterFailure_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NotificationFilterFailure}): Request => ({
    path: {"userID": props["userID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NotificationFilterFailureCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_NotificationFilterFailure_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_NotificationFilterFailure_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "notification-filter-failure"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NotificationFilterFailureCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_NotificationFilterFailure_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_NotificationFilterFailure_for_User",
    method: "POST",
    path: "user/:userID/notification-filter-failure",
    server,
    client
  } as const
}

export namespace List_all_NotificationFilterPush_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NotificationFilterPushListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_NotificationFilterPush_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NotificationFilterPushListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_NotificationFilterPush_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_NotificationFilterPush_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "notification-filter-push"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NotificationFilterPushListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_NotificationFilterPush_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_NotificationFilterPush_for_User",
    method: "GET",
    path: "user/:userID/notification-filter-push",
    server,
    client
  } as const
}

export namespace CREATE_NotificationFilterPush_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: NotificationFilterPush
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NotificationFilterPushCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_NotificationFilterPush_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NotificationFilterPush}): Request => ({
    path: {"userID": props["userID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NotificationFilterPushCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_NotificationFilterPush_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_NotificationFilterPush_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "notification-filter-push"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NotificationFilterPushCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_NotificationFilterPush_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_NotificationFilterPush_for_User",
    method: "POST",
    path: "user/:userID/notification-filter-push",
    server,
    client
  } as const
}

export namespace List_all_NotificationFilterUrl_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NotificationFilterUrlListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_NotificationFilterUrl_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NotificationFilterUrlListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_NotificationFilterUrl_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_NotificationFilterUrl_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "notification-filter-url"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NotificationFilterUrlListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_NotificationFilterUrl_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_NotificationFilterUrl_for_User",
    method: "GET",
    path: "user/:userID/notification-filter-url",
    server,
    client
  } as const
}

export namespace CREATE_NotificationFilterUrl_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: NotificationFilterUrl
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NotificationFilterUrlCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_NotificationFilterUrl_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NotificationFilterUrl}): Request => ({
    path: {"userID": props["userID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NotificationFilterUrlCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_NotificationFilterUrl_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_NotificationFilterUrl_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "notification-filter-url"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NotificationFilterUrlCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_NotificationFilterUrl_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_NotificationFilterUrl_for_User",
    method: "POST",
    path: "user/:userID/notification-filter-url",
    server,
    client
  } as const
}

export namespace List_all_NotificationFilterUrl_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NotificationFilterUrlMonetaryAccountListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_NotificationFilterUrl_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NotificationFilterUrlMonetaryAccountListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_NotificationFilterUrl_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_NotificationFilterUrl_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "notification-filter-url"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NotificationFilterUrlMonetaryAccountListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_NotificationFilterUrl_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_NotificationFilterUrl_for_User_MonetaryAccount",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/notification-filter-url",
    server,
    client
  } as const
}

export namespace CREATE_NotificationFilterUrl_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: NotificationFilterUrlMonetaryAccount
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: NotificationFilterUrlMonetaryAccountCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_NotificationFilterUrl_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": NotificationFilterUrlMonetaryAccount}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": NotificationFilterUrlMonetaryAccountCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_NotificationFilterUrl_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_NotificationFilterUrl_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "notification-filter-url"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<NotificationFilterUrlMonetaryAccountCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_NotificationFilterUrl_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_NotificationFilterUrl_for_User_MonetaryAccount",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/notification-filter-url",
    server,
    client
  } as const
}

export namespace READ_OauthClient_for_User {
  type Path = {
    "userID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: OauthClientRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_OauthClient_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": OauthClientRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_OauthClient_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_OauthClient_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "oauth-client", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<OauthClientRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_OauthClient_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"itemId": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_OauthClient_for_User",
    method: "GET",
    path: "user/:userID/oauth-client/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_OauthClient_for_User {
  type Path = {
    "userID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: OauthClient
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: OauthClientUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_OauthClient_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": OauthClient}): Request => ({
    path: {"userID": props["userID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": OauthClientUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_OauthClient_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_OauthClient_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "oauth-client", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<OauthClientUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_OauthClient_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"itemId": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_OauthClient_for_User",
    method: "PUT",
    path: "user/:userID/oauth-client/:itemId",
    server,
    client
  } as const
}

export namespace List_all_OauthClient_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: OauthClientListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_OauthClient_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": OauthClientListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_OauthClient_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_OauthClient_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "oauth-client"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<OauthClientListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_OauthClient_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_OauthClient_for_User",
    method: "GET",
    path: "user/:userID/oauth-client",
    server,
    client
  } as const
}

export namespace CREATE_OauthClient_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: OauthClient
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: OauthClientCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_OauthClient_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": OauthClient}): Request => ({
    path: {"userID": props["userID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": OauthClientCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_OauthClient_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_OauthClient_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "oauth-client"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<OauthClientCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_OauthClient_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_OauthClient_for_User",
    method: "POST",
    path: "user/:userID/oauth-client",
    server,
    client
  } as const
}

export namespace List_all_Payment_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: PaymentListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_Payment_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": PaymentListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_Payment_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_Payment_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<PaymentListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_Payment_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_Payment_for_User_MonetaryAccount",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/payment",
    server,
    client
  } as const
}

export namespace CREATE_Payment_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: Payment
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: PaymentCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_Payment_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": Payment}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": PaymentCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_Payment_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_Payment_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<PaymentCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_Payment_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_Payment_for_User_MonetaryAccount",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/payment",
    server,
    client
  } as const
}

export namespace READ_Payment_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: PaymentRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_Payment_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": PaymentRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_Payment_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_Payment_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<PaymentRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_Payment_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_Payment_for_User_MonetaryAccount",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/payment/:itemId",
    server,
    client
  } as const
}

export namespace List_all_Payment_for_User_MonetaryAccount_MastercardAction {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "mastercard-actionID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: MasterCardPaymentListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_Payment_for_User_MonetaryAccount_MastercardAction400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "mastercard-actionID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "mastercard-actionID": props["mastercard-actionID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": MasterCardPaymentListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_Payment_for_User_MonetaryAccount_MastercardAction400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_Payment_for_User_MonetaryAccount_MastercardAction: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "mastercard-action", serialization.serialize(it.path["mastercard-actionID"]), "payment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<MasterCardPaymentListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_Payment_for_User_MonetaryAccount_MastercardAction400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"mastercard-actionID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_Payment_for_User_MonetaryAccount_MastercardAction",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/mastercard-action/:mastercard-actionID/payment",
    server,
    client
  } as const
}

export namespace List_all_PaymentAutoAllocate_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: PaymentAutoAllocateListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_PaymentAutoAllocate_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": PaymentAutoAllocateListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_PaymentAutoAllocate_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_PaymentAutoAllocate_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-auto-allocate"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<PaymentAutoAllocateListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_PaymentAutoAllocate_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_PaymentAutoAllocate_for_User_MonetaryAccount",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/payment-auto-allocate",
    server,
    client
  } as const
}

export namespace CREATE_PaymentAutoAllocate_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: PaymentAutoAllocate
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: PaymentAutoAllocateCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_PaymentAutoAllocate_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": PaymentAutoAllocate}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": PaymentAutoAllocateCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_PaymentAutoAllocate_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_PaymentAutoAllocate_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-auto-allocate"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<PaymentAutoAllocateCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_PaymentAutoAllocate_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_PaymentAutoAllocate_for_User_MonetaryAccount",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/payment-auto-allocate",
    server,
    client
  } as const
}

export namespace READ_PaymentAutoAllocate_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: PaymentAutoAllocateRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_PaymentAutoAllocate_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": PaymentAutoAllocateRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_PaymentAutoAllocate_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_PaymentAutoAllocate_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-auto-allocate", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<PaymentAutoAllocateRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_PaymentAutoAllocate_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_PaymentAutoAllocate_for_User_MonetaryAccount",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/payment-auto-allocate/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_PaymentAutoAllocate_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: PaymentAutoAllocate
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: PaymentAutoAllocateUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_PaymentAutoAllocate_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": PaymentAutoAllocate}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": PaymentAutoAllocateUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_PaymentAutoAllocate_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_PaymentAutoAllocate_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-auto-allocate", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<PaymentAutoAllocateUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_PaymentAutoAllocate_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_PaymentAutoAllocate_for_User_MonetaryAccount",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/payment-auto-allocate/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_PaymentAutoAllocate_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: PaymentAutoAllocateDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_PaymentAutoAllocate_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": PaymentAutoAllocateDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_PaymentAutoAllocate_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_PaymentAutoAllocate_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-auto-allocate", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<PaymentAutoAllocateDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_PaymentAutoAllocate_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_PaymentAutoAllocate_for_User_MonetaryAccount",
    method: "DELETE",
    path: "user/:userID/monetary-account/:monetary-accountID/payment-auto-allocate/:itemId",
    server,
    client
  } as const
}

export namespace List_all_PaymentAutoAllocate_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: PaymentAutoAllocateUserListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_PaymentAutoAllocate_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": PaymentAutoAllocateUserListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_PaymentAutoAllocate_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_PaymentAutoAllocate_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "payment-auto-allocate"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<PaymentAutoAllocateUserListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_PaymentAutoAllocate_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_PaymentAutoAllocate_for_User",
    method: "GET",
    path: "user/:userID/payment-auto-allocate",
    server,
    client
  } as const
}

export namespace List_all_PaymentBatch_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: PaymentBatchListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_PaymentBatch_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": PaymentBatchListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_PaymentBatch_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_PaymentBatch_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-batch"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<PaymentBatchListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_PaymentBatch_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_PaymentBatch_for_User_MonetaryAccount",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/payment-batch",
    server,
    client
  } as const
}

export namespace CREATE_PaymentBatch_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: PaymentBatch
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: PaymentBatchCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_PaymentBatch_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": PaymentBatch}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": PaymentBatchCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_PaymentBatch_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_PaymentBatch_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-batch"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<PaymentBatchCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_PaymentBatch_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_PaymentBatch_for_User_MonetaryAccount",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/payment-batch",
    server,
    client
  } as const
}

export namespace READ_PaymentBatch_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: PaymentBatchRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_PaymentBatch_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": PaymentBatchRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_PaymentBatch_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_PaymentBatch_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-batch", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<PaymentBatchRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_PaymentBatch_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_PaymentBatch_for_User_MonetaryAccount",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/payment-batch/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_PaymentBatch_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: PaymentBatch
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: PaymentBatchUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_PaymentBatch_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": PaymentBatch}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": PaymentBatchUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_PaymentBatch_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_PaymentBatch_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-batch", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<PaymentBatchUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_PaymentBatch_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_PaymentBatch_for_User_MonetaryAccount",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/payment-batch/:itemId",
    server,
    client
  } as const
}

export namespace READ_PaymentServiceProviderCredential {
  type Path = {
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: PaymentServiceProviderCredentialRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_PaymentServiceProviderCredential400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": PaymentServiceProviderCredentialRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_PaymentServiceProviderCredential400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_PaymentServiceProviderCredential: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["payment-service-provider-credential", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<PaymentServiceProviderCredentialRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_PaymentServiceProviderCredential400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "itemId": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_PaymentServiceProviderCredential",
    method: "GET",
    path: "payment-service-provider-credential/:itemId",
    server,
    client
  } as const
}

export namespace CREATE_PaymentServiceProviderCredential {
  type Path = {}
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: PaymentServiceProviderCredential
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: PaymentServiceProviderCredentialCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_PaymentServiceProviderCredential400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": PaymentServiceProviderCredential}): Request => ({
    path: {},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": PaymentServiceProviderCredentialCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_PaymentServiceProviderCredential400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_PaymentServiceProviderCredential: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["payment-service-provider-credential"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<PaymentServiceProviderCredentialCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_PaymentServiceProviderCredential400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
      
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_PaymentServiceProviderCredential",
    method: "POST",
    path: "payment-service-provider-credential",
    server,
    client
  } as const
}

export namespace List_all_PaymentServiceProviderDraftPayment_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: PaymentServiceProviderDraftPaymentListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_PaymentServiceProviderDraftPayment_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": PaymentServiceProviderDraftPaymentListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_PaymentServiceProviderDraftPayment_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_PaymentServiceProviderDraftPayment_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "payment-service-provider-draft-payment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<PaymentServiceProviderDraftPaymentListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_PaymentServiceProviderDraftPayment_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_PaymentServiceProviderDraftPayment_for_User",
    method: "GET",
    path: "user/:userID/payment-service-provider-draft-payment",
    server,
    client
  } as const
}

export namespace CREATE_PaymentServiceProviderDraftPayment_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: PaymentServiceProviderDraftPayment
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: PaymentServiceProviderDraftPaymentCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_PaymentServiceProviderDraftPayment_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": PaymentServiceProviderDraftPayment}): Request => ({
    path: {"userID": props["userID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": PaymentServiceProviderDraftPaymentCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_PaymentServiceProviderDraftPayment_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_PaymentServiceProviderDraftPayment_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "payment-service-provider-draft-payment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<PaymentServiceProviderDraftPaymentCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_PaymentServiceProviderDraftPayment_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_PaymentServiceProviderDraftPayment_for_User",
    method: "POST",
    path: "user/:userID/payment-service-provider-draft-payment",
    server,
    client
  } as const
}

export namespace READ_PaymentServiceProviderDraftPayment_for_User {
  type Path = {
    "userID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: PaymentServiceProviderDraftPaymentRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_PaymentServiceProviderDraftPayment_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": PaymentServiceProviderDraftPaymentRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_PaymentServiceProviderDraftPayment_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_PaymentServiceProviderDraftPayment_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "payment-service-provider-draft-payment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<PaymentServiceProviderDraftPaymentRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_PaymentServiceProviderDraftPayment_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"itemId": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_PaymentServiceProviderDraftPayment_for_User",
    method: "GET",
    path: "user/:userID/payment-service-provider-draft-payment/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_PaymentServiceProviderDraftPayment_for_User {
  type Path = {
    "userID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: PaymentServiceProviderDraftPayment
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: PaymentServiceProviderDraftPaymentUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_PaymentServiceProviderDraftPayment_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": PaymentServiceProviderDraftPayment}): Request => ({
    path: {"userID": props["userID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": PaymentServiceProviderDraftPaymentUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_PaymentServiceProviderDraftPayment_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_PaymentServiceProviderDraftPayment_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "payment-service-provider-draft-payment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<PaymentServiceProviderDraftPaymentUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_PaymentServiceProviderDraftPayment_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"itemId": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_PaymentServiceProviderDraftPayment_for_User",
    method: "PUT",
    path: "user/:userID/payment-service-provider-draft-payment/:itemId",
    server,
    client
  } as const
}

export namespace List_all_PaymentServiceProviderIssuerTransaction_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: PaymentServiceProviderIssuerTransactionListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_PaymentServiceProviderIssuerTransaction_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": PaymentServiceProviderIssuerTransactionListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_PaymentServiceProviderIssuerTransaction_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_PaymentServiceProviderIssuerTransaction_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "payment-service-provider-issuer-transaction"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<PaymentServiceProviderIssuerTransactionListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_PaymentServiceProviderIssuerTransaction_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_PaymentServiceProviderIssuerTransaction_for_User",
    method: "GET",
    path: "user/:userID/payment-service-provider-issuer-transaction",
    server,
    client
  } as const
}

export namespace CREATE_PaymentServiceProviderIssuerTransaction_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: PaymentServiceProviderIssuerTransaction
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: PaymentServiceProviderIssuerTransactionCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_PaymentServiceProviderIssuerTransaction_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": PaymentServiceProviderIssuerTransaction}): Request => ({
    path: {"userID": props["userID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": PaymentServiceProviderIssuerTransactionCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_PaymentServiceProviderIssuerTransaction_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_PaymentServiceProviderIssuerTransaction_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "payment-service-provider-issuer-transaction"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<PaymentServiceProviderIssuerTransactionCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_PaymentServiceProviderIssuerTransaction_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_PaymentServiceProviderIssuerTransaction_for_User",
    method: "POST",
    path: "user/:userID/payment-service-provider-issuer-transaction",
    server,
    client
  } as const
}

export namespace READ_PaymentServiceProviderIssuerTransaction_for_User {
  type Path = {
    "userID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: PaymentServiceProviderIssuerTransactionRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_PaymentServiceProviderIssuerTransaction_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": PaymentServiceProviderIssuerTransactionRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_PaymentServiceProviderIssuerTransaction_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_PaymentServiceProviderIssuerTransaction_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "payment-service-provider-issuer-transaction", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<PaymentServiceProviderIssuerTransactionRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_PaymentServiceProviderIssuerTransaction_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"itemId": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_PaymentServiceProviderIssuerTransaction_for_User",
    method: "GET",
    path: "user/:userID/payment-service-provider-issuer-transaction/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_PaymentServiceProviderIssuerTransaction_for_User {
  type Path = {
    "userID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: PaymentServiceProviderIssuerTransaction
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: PaymentServiceProviderIssuerTransactionUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_PaymentServiceProviderIssuerTransaction_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": PaymentServiceProviderIssuerTransaction}): Request => ({
    path: {"userID": props["userID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": PaymentServiceProviderIssuerTransactionUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_PaymentServiceProviderIssuerTransaction_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_PaymentServiceProviderIssuerTransaction_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "payment-service-provider-issuer-transaction", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<PaymentServiceProviderIssuerTransactionUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_PaymentServiceProviderIssuerTransaction_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"itemId": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_PaymentServiceProviderIssuerTransaction_for_User",
    method: "PUT",
    path: "user/:userID/payment-service-provider-issuer-transaction/:itemId",
    server,
    client
  } as const
}

export namespace List_all_PdfContent_for_User_Invoice {
  type Path = {
    "userID": number,
    "invoiceID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: InvoiceExportPdfContentListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_PdfContent_for_User_Invoice400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "invoiceID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "invoiceID": props["invoiceID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": InvoiceExportPdfContentListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_PdfContent_for_User_Invoice400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_PdfContent_for_User_Invoice: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "invoice", serialization.serialize(it.path["invoiceID"]), "pdf-content"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<InvoiceExportPdfContentListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_PdfContent_for_User_Invoice400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"invoiceID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_PdfContent_for_User_Invoice",
    method: "GET",
    path: "user/:userID/invoice/:invoiceID/pdf-content",
    server,
    client
  } as const
}

export namespace CREATE_Replace_for_User_Card {
  type Path = {
    "userID": number,
    "cardID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: CardReplace
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CardReplaceCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_Replace_for_User_Card400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "cardID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": CardReplace}): Request => ({
    path: {"userID": props["userID"], "cardID": props["cardID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CardReplaceCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_Replace_for_User_Card400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_Replace_for_User_Card: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "card", serialization.serialize(it.path["cardID"]), "replace"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CardReplaceCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_Replace_for_User_Card400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"cardID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_Replace_for_User_Card",
    method: "POST",
    path: "user/:userID/card/:cardID/replace",
    server,
    client
  } as const
}

export namespace List_all_RequestInquiry_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: RequestInquiryListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_RequestInquiry_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": RequestInquiryListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_RequestInquiry_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_RequestInquiry_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<RequestInquiryListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_RequestInquiry_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_RequestInquiry_for_User_MonetaryAccount",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry",
    server,
    client
  } as const
}

export namespace CREATE_RequestInquiry_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: RequestInquiry
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: RequestInquiryCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_RequestInquiry_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": RequestInquiry}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": RequestInquiryCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_RequestInquiry_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_RequestInquiry_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<RequestInquiryCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_RequestInquiry_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_RequestInquiry_for_User_MonetaryAccount",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry",
    server,
    client
  } as const
}

export namespace READ_RequestInquiry_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: RequestInquiryRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_RequestInquiry_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": RequestInquiryRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_RequestInquiry_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_RequestInquiry_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<RequestInquiryRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_RequestInquiry_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_RequestInquiry_for_User_MonetaryAccount",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_RequestInquiry_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: RequestInquiry
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: RequestInquiryUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_RequestInquiry_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": RequestInquiry}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": RequestInquiryUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_RequestInquiry_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_RequestInquiry_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<RequestInquiryUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_RequestInquiry_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_RequestInquiry_for_User_MonetaryAccount",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry/:itemId",
    server,
    client
  } as const
}

export namespace List_all_RequestInquiryBatch_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: RequestInquiryBatchListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_RequestInquiryBatch_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": RequestInquiryBatchListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_RequestInquiryBatch_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_RequestInquiryBatch_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry-batch"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<RequestInquiryBatchListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_RequestInquiryBatch_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_RequestInquiryBatch_for_User_MonetaryAccount",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry-batch",
    server,
    client
  } as const
}

export namespace CREATE_RequestInquiryBatch_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: RequestInquiryBatch
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: RequestInquiryBatchCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_RequestInquiryBatch_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": RequestInquiryBatch}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": RequestInquiryBatchCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_RequestInquiryBatch_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_RequestInquiryBatch_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry-batch"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<RequestInquiryBatchCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_RequestInquiryBatch_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_RequestInquiryBatch_for_User_MonetaryAccount",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry-batch",
    server,
    client
  } as const
}

export namespace READ_RequestInquiryBatch_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: RequestInquiryBatchRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_RequestInquiryBatch_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": RequestInquiryBatchRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_RequestInquiryBatch_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_RequestInquiryBatch_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry-batch", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<RequestInquiryBatchRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_RequestInquiryBatch_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_RequestInquiryBatch_for_User_MonetaryAccount",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry-batch/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_RequestInquiryBatch_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: RequestInquiryBatch
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: RequestInquiryBatchUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_RequestInquiryBatch_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": RequestInquiryBatch}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": RequestInquiryBatchUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_RequestInquiryBatch_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_RequestInquiryBatch_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry-batch", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<RequestInquiryBatchUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_RequestInquiryBatch_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_RequestInquiryBatch_for_User_MonetaryAccount",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry-batch/:itemId",
    server,
    client
  } as const
}

export namespace READ_RequestResponse_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: RequestResponseRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_RequestResponse_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": RequestResponseRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_RequestResponse_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_RequestResponse_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-response", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<RequestResponseRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_RequestResponse_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_RequestResponse_for_User_MonetaryAccount",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/request-response/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_RequestResponse_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: RequestResponse
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: RequestResponseUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_RequestResponse_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": RequestResponse}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": RequestResponseUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_RequestResponse_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_RequestResponse_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-response", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<RequestResponseUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_RequestResponse_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_RequestResponse_for_User_MonetaryAccount",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/request-response/:itemId",
    server,
    client
  } as const
}

export namespace List_all_RequestResponse_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: RequestResponseListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_RequestResponse_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": RequestResponseListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_RequestResponse_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_RequestResponse_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-response"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<RequestResponseListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_RequestResponse_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_RequestResponse_for_User_MonetaryAccount",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/request-response",
    server,
    client
  } as const
}

export namespace CREATE_SandboxUserCompany {
  type Path = {}
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: SandboxUserCompany
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: SandboxUserCompanyCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_SandboxUserCompany400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": SandboxUserCompany}): Request => ({
    path: {},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": SandboxUserCompanyCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_SandboxUserCompany400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_SandboxUserCompany: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["sandbox-user-company"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<SandboxUserCompanyCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_SandboxUserCompany400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
      
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_SandboxUserCompany",
    method: "POST",
    path: "sandbox-user-company",
    server,
    client
  } as const
}

export namespace CREATE_SandboxUserPerson {
  type Path = {}
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: SandboxUserPerson
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: SandboxUserPersonCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_SandboxUserPerson400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": SandboxUserPerson}): Request => ({
    path: {},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": SandboxUserPersonCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_SandboxUserPerson400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_SandboxUserPerson: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["sandbox-user-person"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<SandboxUserPersonCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_SandboxUserPerson400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
      
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_SandboxUserPerson",
    method: "POST",
    path: "sandbox-user-person",
    server,
    client
  } as const
}

export namespace READ_Schedule_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: ScheduleRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_Schedule_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": ScheduleRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_Schedule_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_Schedule_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<ScheduleRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_Schedule_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_Schedule_for_User_MonetaryAccount",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule/:itemId",
    server,
    client
  } as const
}

export namespace List_all_Schedule_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: ScheduleListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_Schedule_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": ScheduleListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_Schedule_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_Schedule_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<ScheduleListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_Schedule_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_Schedule_for_User_MonetaryAccount",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule",
    server,
    client
  } as const
}

export namespace List_all_Schedule_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: ScheduleUserListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_Schedule_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": ScheduleUserListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_Schedule_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_Schedule_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "schedule"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<ScheduleUserListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_Schedule_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_Schedule_for_User",
    method: "GET",
    path: "user/:userID/schedule",
    server,
    client
  } as const
}

export namespace READ_ScheduleInstance_for_User_MonetaryAccount_Schedule {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "scheduleID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: ScheduleInstanceRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_ScheduleInstance_for_User_MonetaryAccount_Schedule400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "scheduleID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "scheduleID": props["scheduleID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": ScheduleInstanceRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_ScheduleInstance_for_User_MonetaryAccount_Schedule400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_ScheduleInstance_for_User_MonetaryAccount_Schedule: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule", serialization.serialize(it.path["scheduleID"]), "schedule-instance", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<ScheduleInstanceRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_ScheduleInstance_for_User_MonetaryAccount_Schedule400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"scheduleID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_ScheduleInstance_for_User_MonetaryAccount_Schedule",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule/:scheduleID/schedule-instance/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_ScheduleInstance_for_User_MonetaryAccount_Schedule {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "scheduleID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: ScheduleInstance
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: ScheduleInstanceUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_ScheduleInstance_for_User_MonetaryAccount_Schedule400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "scheduleID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": ScheduleInstance}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "scheduleID": props["scheduleID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": ScheduleInstanceUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_ScheduleInstance_for_User_MonetaryAccount_Schedule400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_ScheduleInstance_for_User_MonetaryAccount_Schedule: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule", serialization.serialize(it.path["scheduleID"]), "schedule-instance", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<ScheduleInstanceUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_ScheduleInstance_for_User_MonetaryAccount_Schedule400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"scheduleID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_ScheduleInstance_for_User_MonetaryAccount_Schedule",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule/:scheduleID/schedule-instance/:itemId",
    server,
    client
  } as const
}

export namespace List_all_ScheduleInstance_for_User_MonetaryAccount_Schedule {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "scheduleID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: ScheduleInstanceListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_ScheduleInstance_for_User_MonetaryAccount_Schedule400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "scheduleID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "scheduleID": props["scheduleID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": ScheduleInstanceListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_ScheduleInstance_for_User_MonetaryAccount_Schedule400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_ScheduleInstance_for_User_MonetaryAccount_Schedule: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule", serialization.serialize(it.path["scheduleID"]), "schedule-instance"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<ScheduleInstanceListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_ScheduleInstance_for_User_MonetaryAccount_Schedule400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"scheduleID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_ScheduleInstance_for_User_MonetaryAccount_Schedule",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule/:scheduleID/schedule-instance",
    server,
    client
  } as const
}

export namespace List_all_SchedulePayment_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: SchedulePaymentListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_SchedulePayment_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": SchedulePaymentListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_SchedulePayment_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_SchedulePayment_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<SchedulePaymentListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_SchedulePayment_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_SchedulePayment_for_User_MonetaryAccount",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment",
    server,
    client
  } as const
}

export namespace CREATE_SchedulePayment_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: SchedulePayment
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: SchedulePaymentCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_SchedulePayment_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": SchedulePayment}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": SchedulePaymentCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_SchedulePayment_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_SchedulePayment_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<SchedulePaymentCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_SchedulePayment_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_SchedulePayment_for_User_MonetaryAccount",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment",
    server,
    client
  } as const
}

export namespace READ_SchedulePayment_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: SchedulePaymentRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_SchedulePayment_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": SchedulePaymentRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_SchedulePayment_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_SchedulePayment_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<SchedulePaymentRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_SchedulePayment_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_SchedulePayment_for_User_MonetaryAccount",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_SchedulePayment_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: SchedulePayment
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: SchedulePaymentUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_SchedulePayment_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": SchedulePayment}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": SchedulePaymentUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_SchedulePayment_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_SchedulePayment_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<SchedulePaymentUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_SchedulePayment_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_SchedulePayment_for_User_MonetaryAccount",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_SchedulePayment_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: SchedulePaymentDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_SchedulePayment_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": SchedulePaymentDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_SchedulePayment_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_SchedulePayment_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<SchedulePaymentDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_SchedulePayment_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_SchedulePayment_for_User_MonetaryAccount",
    method: "DELETE",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment/:itemId",
    server,
    client
  } as const
}

export namespace READ_SchedulePaymentBatch_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: SchedulePaymentBatchRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_SchedulePaymentBatch_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": SchedulePaymentBatchRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_SchedulePaymentBatch_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_SchedulePaymentBatch_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment-batch", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<SchedulePaymentBatchRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_SchedulePaymentBatch_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_SchedulePaymentBatch_for_User_MonetaryAccount",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment-batch/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_SchedulePaymentBatch_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: SchedulePaymentBatch
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: SchedulePaymentBatchUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_SchedulePaymentBatch_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": SchedulePaymentBatch}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": SchedulePaymentBatchUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_SchedulePaymentBatch_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_SchedulePaymentBatch_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment-batch", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<SchedulePaymentBatchUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_SchedulePaymentBatch_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_SchedulePaymentBatch_for_User_MonetaryAccount",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment-batch/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_SchedulePaymentBatch_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: SchedulePaymentBatchDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_SchedulePaymentBatch_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": SchedulePaymentBatchDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_SchedulePaymentBatch_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_SchedulePaymentBatch_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment-batch", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<SchedulePaymentBatchDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_SchedulePaymentBatch_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_SchedulePaymentBatch_for_User_MonetaryAccount",
    method: "DELETE",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment-batch/:itemId",
    server,
    client
  } as const
}

export namespace CREATE_SchedulePaymentBatch_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: SchedulePaymentBatch
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: SchedulePaymentBatchCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_SchedulePaymentBatch_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": SchedulePaymentBatch}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": SchedulePaymentBatchCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_SchedulePaymentBatch_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_SchedulePaymentBatch_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment-batch"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<SchedulePaymentBatchCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_SchedulePaymentBatch_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_SchedulePaymentBatch_for_User_MonetaryAccount",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment-batch",
    server,
    client
  } as const
}

export namespace CREATE_ServerError {
  type Path = {}
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: ServerError
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: ServerErrorCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_ServerError400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": ServerError}): Request => ({
    path: {},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": ServerErrorCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_ServerError400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_ServerError: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["server-error"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<ServerErrorCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_ServerError400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
      
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_ServerError",
    method: "POST",
    path: "server-error",
    server,
    client
  } as const
}

export namespace List_all_ServerPublicKey_for_Installation {
  type Path = {
    "installationID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: InstallationServerPublicKeyListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_ServerPublicKey_for_Installation400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"installationID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"installationID": props["installationID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": InstallationServerPublicKeyListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_ServerPublicKey_for_Installation400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_ServerPublicKey_for_Installation: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["installation", serialization.serialize(it.path["installationID"]), "server-public-key"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<InstallationServerPublicKeyListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_ServerPublicKey_for_Installation400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "installationID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_ServerPublicKey_for_Installation",
    method: "GET",
    path: "installation/:installationID/server-public-key",
    server,
    client
  } as const
}

export namespace DELETE_Session {
  type Path = {
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: SessionDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_Session400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": SessionDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_Session400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_Session: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["session", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<SessionDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_Session400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "itemId": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_Session",
    method: "DELETE",
    path: "session/:itemId",
    server,
    client
  } as const
}

export namespace CREATE_SessionServer {
  type Path = {}
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: SessionServer
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: SessionServerCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_SessionServer400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": SessionServer}): Request => ({
    path: {},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": SessionServerCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_SessionServer400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_SessionServer: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["session-server"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<SessionServerCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_SessionServer400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
      
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_SessionServer",
    method: "POST",
    path: "session-server",
    server,
    client
  } as const
}

export namespace List_all_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: ShareInviteMonetaryAccountInquiryListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": ShareInviteMonetaryAccountInquiryListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "share-invite-monetary-account-inquiry"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<ShareInviteMonetaryAccountInquiryListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/share-invite-monetary-account-inquiry",
    server,
    client
  } as const
}

export namespace CREATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: ShareInviteMonetaryAccountInquiry
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: ShareInviteMonetaryAccountInquiryCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": ShareInviteMonetaryAccountInquiry}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": ShareInviteMonetaryAccountInquiryCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "share-invite-monetary-account-inquiry"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<ShareInviteMonetaryAccountInquiryCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/share-invite-monetary-account-inquiry",
    server,
    client
  } as const
}

export namespace READ_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: ShareInviteMonetaryAccountInquiryRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": ShareInviteMonetaryAccountInquiryRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "share-invite-monetary-account-inquiry", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<ShareInviteMonetaryAccountInquiryRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/share-invite-monetary-account-inquiry/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: ShareInviteMonetaryAccountInquiry
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: ShareInviteMonetaryAccountInquiryUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": ShareInviteMonetaryAccountInquiry}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": ShareInviteMonetaryAccountInquiryUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "share-invite-monetary-account-inquiry", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<ShareInviteMonetaryAccountInquiryUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount",
    method: "PUT",
    path: "user/:userID/monetary-account/:monetary-accountID/share-invite-monetary-account-inquiry/:itemId",
    server,
    client
  } as const
}

export namespace READ_ShareInviteMonetaryAccountResponse_for_User {
  type Path = {
    "userID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: ShareInviteMonetaryAccountResponseRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_ShareInviteMonetaryAccountResponse_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": ShareInviteMonetaryAccountResponseRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_ShareInviteMonetaryAccountResponse_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_ShareInviteMonetaryAccountResponse_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "share-invite-monetary-account-response", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<ShareInviteMonetaryAccountResponseRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_ShareInviteMonetaryAccountResponse_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"itemId": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_ShareInviteMonetaryAccountResponse_for_User",
    method: "GET",
    path: "user/:userID/share-invite-monetary-account-response/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_ShareInviteMonetaryAccountResponse_for_User {
  type Path = {
    "userID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: ShareInviteMonetaryAccountResponse
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: ShareInviteMonetaryAccountResponseUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_ShareInviteMonetaryAccountResponse_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": ShareInviteMonetaryAccountResponse}): Request => ({
    path: {"userID": props["userID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": ShareInviteMonetaryAccountResponseUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_ShareInviteMonetaryAccountResponse_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_ShareInviteMonetaryAccountResponse_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "share-invite-monetary-account-response", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<ShareInviteMonetaryAccountResponseUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_ShareInviteMonetaryAccountResponse_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"itemId": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_ShareInviteMonetaryAccountResponse_for_User",
    method: "PUT",
    path: "user/:userID/share-invite-monetary-account-response/:itemId",
    server,
    client
  } as const
}

export namespace List_all_ShareInviteMonetaryAccountResponse_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: ShareInviteMonetaryAccountResponseListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_ShareInviteMonetaryAccountResponse_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": ShareInviteMonetaryAccountResponseListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_ShareInviteMonetaryAccountResponse_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_ShareInviteMonetaryAccountResponse_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "share-invite-monetary-account-response"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<ShareInviteMonetaryAccountResponseListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_ShareInviteMonetaryAccountResponse_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_ShareInviteMonetaryAccountResponse_for_User",
    method: "GET",
    path: "user/:userID/share-invite-monetary-account-response",
    server,
    client
  } as const
}

export namespace READ_SofortMerchantTransaction_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: SofortMerchantTransactionRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_SofortMerchantTransaction_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": SofortMerchantTransactionRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_SofortMerchantTransaction_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_SofortMerchantTransaction_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "sofort-merchant-transaction", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<SofortMerchantTransactionRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_SofortMerchantTransaction_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_SofortMerchantTransaction_for_User_MonetaryAccount",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/sofort-merchant-transaction/:itemId",
    server,
    client
  } as const
}

export namespace List_all_SofortMerchantTransaction_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: SofortMerchantTransactionListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_SofortMerchantTransaction_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": SofortMerchantTransactionListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_SofortMerchantTransaction_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_SofortMerchantTransaction_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "sofort-merchant-transaction"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<SofortMerchantTransactionListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_SofortMerchantTransaction_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_SofortMerchantTransaction_for_User_MonetaryAccount",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/sofort-merchant-transaction",
    server,
    client
  } as const
}

export namespace CREATE_Statement_for_User_MonetaryAccount_Event {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "eventID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: ExportStatementPayment
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: ExportStatementPaymentCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_Statement_for_User_MonetaryAccount_Event400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "eventID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": ExportStatementPayment}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "eventID": props["eventID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": ExportStatementPaymentCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_Statement_for_User_MonetaryAccount_Event400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_Statement_for_User_MonetaryAccount_Event: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "event", serialization.serialize(it.path["eventID"]), "statement"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<ExportStatementPaymentCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_Statement_for_User_MonetaryAccount_Event400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"eventID": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_Statement_for_User_MonetaryAccount_Event",
    method: "POST",
    path: "user/:userID/monetary-account/:monetary-accountID/event/:eventID/statement",
    server,
    client
  } as const
}

export namespace READ_Statement_for_User_MonetaryAccount_Event {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "eventID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: ExportStatementPaymentRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_Statement_for_User_MonetaryAccount_Event400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "eventID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "eventID": props["eventID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": ExportStatementPaymentRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_Statement_for_User_MonetaryAccount_Event400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_Statement_for_User_MonetaryAccount_Event: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "event", serialization.serialize(it.path["eventID"]), "statement", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<ExportStatementPaymentRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_Statement_for_User_MonetaryAccount_Event400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"eventID": serialization.deserialize(it.path[5]),"itemId": serialization.deserialize(it.path[7])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_Statement_for_User_MonetaryAccount_Event",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/event/:eventID/statement/:itemId",
    server,
    client
  } as const
}

export namespace READ_SwitchServicePayment_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: BankSwitchServiceNetherlandsIncomingPaymentRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_SwitchServicePayment_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": BankSwitchServiceNetherlandsIncomingPaymentRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_SwitchServicePayment_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_SwitchServicePayment_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "switch-service-payment", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<BankSwitchServiceNetherlandsIncomingPaymentRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_SwitchServicePayment_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_SwitchServicePayment_for_User_MonetaryAccount",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/switch-service-payment/:itemId",
    server,
    client
  } as const
}

export namespace CREATE_TokenQrRequestIdeal_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: TokenQrRequestIdeal
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: TokenQrRequestIdealCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_TokenQrRequestIdeal_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": TokenQrRequestIdeal}): Request => ({
    path: {"userID": props["userID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": TokenQrRequestIdealCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_TokenQrRequestIdeal_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_TokenQrRequestIdeal_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "token-qr-request-ideal"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<TokenQrRequestIdealCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_TokenQrRequestIdeal_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_TokenQrRequestIdeal_for_User",
    method: "POST",
    path: "user/:userID/token-qr-request-ideal",
    server,
    client
  } as const
}

export namespace CREATE_TokenQrRequestSofort_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: TokenQrRequestSofort
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: TokenQrRequestSofortCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_TokenQrRequestSofort_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": TokenQrRequestSofort}): Request => ({
    path: {"userID": props["userID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": TokenQrRequestSofortCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_TokenQrRequestSofort_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_TokenQrRequestSofort_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "token-qr-request-sofort"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<TokenQrRequestSofortCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_TokenQrRequestSofort_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_TokenQrRequestSofort_for_User",
    method: "POST",
    path: "user/:userID/token-qr-request-sofort",
    server,
    client
  } as const
}

export namespace List_all_TransferwiseCurrency_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: TransferwiseCurrencyListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_TransferwiseCurrency_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": TransferwiseCurrencyListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_TransferwiseCurrency_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_TransferwiseCurrency_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "transferwise-currency"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<TransferwiseCurrencyListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_TransferwiseCurrency_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_TransferwiseCurrency_for_User",
    method: "GET",
    path: "user/:userID/transferwise-currency",
    server,
    client
  } as const
}

export namespace CREATE_TransferwiseQuote_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: TransferwiseQuote
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: TransferwiseQuoteCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_TransferwiseQuote_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": TransferwiseQuote}): Request => ({
    path: {"userID": props["userID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": TransferwiseQuoteCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_TransferwiseQuote_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_TransferwiseQuote_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "transferwise-quote"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<TransferwiseQuoteCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_TransferwiseQuote_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_TransferwiseQuote_for_User",
    method: "POST",
    path: "user/:userID/transferwise-quote",
    server,
    client
  } as const
}

export namespace READ_TransferwiseQuote_for_User {
  type Path = {
    "userID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: TransferwiseQuoteRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_TransferwiseQuote_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": TransferwiseQuoteRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_TransferwiseQuote_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_TransferwiseQuote_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "transferwise-quote", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<TransferwiseQuoteRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_TransferwiseQuote_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"itemId": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_TransferwiseQuote_for_User",
    method: "GET",
    path: "user/:userID/transferwise-quote/:itemId",
    server,
    client
  } as const
}

export namespace CREATE_TransferwiseQuoteTemporary_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: TransferwiseQuoteTemporary
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: TransferwiseQuoteTemporaryCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_TransferwiseQuoteTemporary_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": TransferwiseQuoteTemporary}): Request => ({
    path: {"userID": props["userID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": TransferwiseQuoteTemporaryCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_TransferwiseQuoteTemporary_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_TransferwiseQuoteTemporary_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "transferwise-quote-temporary"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<TransferwiseQuoteTemporaryCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_TransferwiseQuoteTemporary_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_TransferwiseQuoteTemporary_for_User",
    method: "POST",
    path: "user/:userID/transferwise-quote-temporary",
    server,
    client
  } as const
}

export namespace READ_TransferwiseQuoteTemporary_for_User {
  type Path = {
    "userID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: TransferwiseQuoteTemporaryRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_TransferwiseQuoteTemporary_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": TransferwiseQuoteTemporaryRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_TransferwiseQuoteTemporary_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_TransferwiseQuoteTemporary_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "transferwise-quote-temporary", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<TransferwiseQuoteTemporaryRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_TransferwiseQuoteTemporary_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"itemId": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_TransferwiseQuoteTemporary_for_User",
    method: "GET",
    path: "user/:userID/transferwise-quote-temporary/:itemId",
    server,
    client
  } as const
}

export namespace List_all_TransferwiseRecipient_for_User_TransferwiseQuote {
  type Path = {
    "userID": number,
    "transferwise-quoteID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: TransferwiseAccountQuoteListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_TransferwiseRecipient_for_User_TransferwiseQuote400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "transferwise-quoteID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "transferwise-quoteID": props["transferwise-quoteID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": TransferwiseAccountQuoteListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_TransferwiseRecipient_for_User_TransferwiseQuote400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_TransferwiseRecipient_for_User_TransferwiseQuote: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "transferwise-quote", serialization.serialize(it.path["transferwise-quoteID"]), "transferwise-recipient"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<TransferwiseAccountQuoteListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_TransferwiseRecipient_for_User_TransferwiseQuote400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"transferwise-quoteID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_TransferwiseRecipient_for_User_TransferwiseQuote",
    method: "GET",
    path: "user/:userID/transferwise-quote/:transferwise-quoteID/transferwise-recipient",
    server,
    client
  } as const
}

export namespace CREATE_TransferwiseRecipient_for_User_TransferwiseQuote {
  type Path = {
    "userID": number,
    "transferwise-quoteID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: TransferwiseAccountQuote
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: TransferwiseAccountQuoteCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_TransferwiseRecipient_for_User_TransferwiseQuote400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "transferwise-quoteID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": TransferwiseAccountQuote}): Request => ({
    path: {"userID": props["userID"], "transferwise-quoteID": props["transferwise-quoteID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": TransferwiseAccountQuoteCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_TransferwiseRecipient_for_User_TransferwiseQuote400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_TransferwiseRecipient_for_User_TransferwiseQuote: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "transferwise-quote", serialization.serialize(it.path["transferwise-quoteID"]), "transferwise-recipient"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<TransferwiseAccountQuoteCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_TransferwiseRecipient_for_User_TransferwiseQuote400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"transferwise-quoteID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_TransferwiseRecipient_for_User_TransferwiseQuote",
    method: "POST",
    path: "user/:userID/transferwise-quote/:transferwise-quoteID/transferwise-recipient",
    server,
    client
  } as const
}

export namespace READ_TransferwiseRecipient_for_User_TransferwiseQuote {
  type Path = {
    "userID": number,
    "transferwise-quoteID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: TransferwiseAccountQuoteRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_TransferwiseRecipient_for_User_TransferwiseQuote400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "transferwise-quoteID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "transferwise-quoteID": props["transferwise-quoteID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": TransferwiseAccountQuoteRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_TransferwiseRecipient_for_User_TransferwiseQuote400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_TransferwiseRecipient_for_User_TransferwiseQuote: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "transferwise-quote", serialization.serialize(it.path["transferwise-quoteID"]), "transferwise-recipient", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<TransferwiseAccountQuoteRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_TransferwiseRecipient_for_User_TransferwiseQuote400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"transferwise-quoteID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_TransferwiseRecipient_for_User_TransferwiseQuote",
    method: "GET",
    path: "user/:userID/transferwise-quote/:transferwise-quoteID/transferwise-recipient/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_TransferwiseRecipient_for_User_TransferwiseQuote {
  type Path = {
    "userID": number,
    "transferwise-quoteID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: TransferwiseAccountQuoteDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_TransferwiseRecipient_for_User_TransferwiseQuote400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "transferwise-quoteID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "transferwise-quoteID": props["transferwise-quoteID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": TransferwiseAccountQuoteDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_TransferwiseRecipient_for_User_TransferwiseQuote400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_TransferwiseRecipient_for_User_TransferwiseQuote: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "transferwise-quote", serialization.serialize(it.path["transferwise-quoteID"]), "transferwise-recipient", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<TransferwiseAccountQuoteDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_TransferwiseRecipient_for_User_TransferwiseQuote400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"transferwise-quoteID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_TransferwiseRecipient_for_User_TransferwiseQuote",
    method: "DELETE",
    path: "user/:userID/transferwise-quote/:transferwise-quoteID/transferwise-recipient/:itemId",
    server,
    client
  } as const
}

export namespace List_all_TransferwiseRecipientRequirement_for_User_TransferwiseQuote {
  type Path = {
    "userID": number,
    "transferwise-quoteID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: TransferwiseAccountRequirementListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_TransferwiseRecipientRequirement_for_User_TransferwiseQuote400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "transferwise-quoteID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "transferwise-quoteID": props["transferwise-quoteID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": TransferwiseAccountRequirementListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_TransferwiseRecipientRequirement_for_User_TransferwiseQuote400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_TransferwiseRecipientRequirement_for_User_TransferwiseQuote: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "transferwise-quote", serialization.serialize(it.path["transferwise-quoteID"]), "transferwise-recipient-requirement"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<TransferwiseAccountRequirementListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_TransferwiseRecipientRequirement_for_User_TransferwiseQuote400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"transferwise-quoteID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_TransferwiseRecipientRequirement_for_User_TransferwiseQuote",
    method: "GET",
    path: "user/:userID/transferwise-quote/:transferwise-quoteID/transferwise-recipient-requirement",
    server,
    client
  } as const
}

export namespace CREATE_TransferwiseRecipientRequirement_for_User_TransferwiseQuote {
  type Path = {
    "userID": number,
    "transferwise-quoteID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: TransferwiseAccountRequirement
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: TransferwiseAccountRequirementCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_TransferwiseRecipientRequirement_for_User_TransferwiseQuote400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "transferwise-quoteID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": TransferwiseAccountRequirement}): Request => ({
    path: {"userID": props["userID"], "transferwise-quoteID": props["transferwise-quoteID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": TransferwiseAccountRequirementCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_TransferwiseRecipientRequirement_for_User_TransferwiseQuote400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_TransferwiseRecipientRequirement_for_User_TransferwiseQuote: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "transferwise-quote", serialization.serialize(it.path["transferwise-quoteID"]), "transferwise-recipient-requirement"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<TransferwiseAccountRequirementCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_TransferwiseRecipientRequirement_for_User_TransferwiseQuote400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"transferwise-quoteID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_TransferwiseRecipientRequirement_for_User_TransferwiseQuote",
    method: "POST",
    path: "user/:userID/transferwise-quote/:transferwise-quoteID/transferwise-recipient-requirement",
    server,
    client
  } as const
}

export namespace List_all_TransferwiseTransfer_for_User_TransferwiseQuote {
  type Path = {
    "userID": number,
    "transferwise-quoteID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: TransferwiseTransferListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_TransferwiseTransfer_for_User_TransferwiseQuote400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "transferwise-quoteID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "transferwise-quoteID": props["transferwise-quoteID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": TransferwiseTransferListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_TransferwiseTransfer_for_User_TransferwiseQuote400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_TransferwiseTransfer_for_User_TransferwiseQuote: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "transferwise-quote", serialization.serialize(it.path["transferwise-quoteID"]), "transferwise-transfer"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<TransferwiseTransferListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_TransferwiseTransfer_for_User_TransferwiseQuote400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"transferwise-quoteID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_TransferwiseTransfer_for_User_TransferwiseQuote",
    method: "GET",
    path: "user/:userID/transferwise-quote/:transferwise-quoteID/transferwise-transfer",
    server,
    client
  } as const
}

export namespace CREATE_TransferwiseTransfer_for_User_TransferwiseQuote {
  type Path = {
    "userID": number,
    "transferwise-quoteID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: TransferwiseTransfer
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: TransferwiseTransferCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_TransferwiseTransfer_for_User_TransferwiseQuote400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "transferwise-quoteID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": TransferwiseTransfer}): Request => ({
    path: {"userID": props["userID"], "transferwise-quoteID": props["transferwise-quoteID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": TransferwiseTransferCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_TransferwiseTransfer_for_User_TransferwiseQuote400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_TransferwiseTransfer_for_User_TransferwiseQuote: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "transferwise-quote", serialization.serialize(it.path["transferwise-quoteID"]), "transferwise-transfer"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<TransferwiseTransferCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_TransferwiseTransfer_for_User_TransferwiseQuote400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"transferwise-quoteID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_TransferwiseTransfer_for_User_TransferwiseQuote",
    method: "POST",
    path: "user/:userID/transferwise-quote/:transferwise-quoteID/transferwise-transfer",
    server,
    client
  } as const
}

export namespace READ_TransferwiseTransfer_for_User_TransferwiseQuote {
  type Path = {
    "userID": number,
    "transferwise-quoteID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: TransferwiseTransferRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_TransferwiseTransfer_for_User_TransferwiseQuote400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "transferwise-quoteID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "transferwise-quoteID": props["transferwise-quoteID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": TransferwiseTransferRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_TransferwiseTransfer_for_User_TransferwiseQuote400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_TransferwiseTransfer_for_User_TransferwiseQuote: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "transferwise-quote", serialization.serialize(it.path["transferwise-quoteID"]), "transferwise-transfer", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<TransferwiseTransferRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_TransferwiseTransfer_for_User_TransferwiseQuote400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"transferwise-quoteID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_TransferwiseTransfer_for_User_TransferwiseQuote",
    method: "GET",
    path: "user/:userID/transferwise-quote/:transferwise-quoteID/transferwise-transfer/:itemId",
    server,
    client
  } as const
}

export namespace CREATE_TransferwiseTransferRequirement_for_User_TransferwiseQuote {
  type Path = {
    "userID": number,
    "transferwise-quoteID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: TransferwiseTransferRequirement
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: TransferwiseTransferRequirementCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_TransferwiseTransferRequirement_for_User_TransferwiseQuote400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "transferwise-quoteID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": TransferwiseTransferRequirement}): Request => ({
    path: {"userID": props["userID"], "transferwise-quoteID": props["transferwise-quoteID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": TransferwiseTransferRequirementCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_TransferwiseTransferRequirement_for_User_TransferwiseQuote400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_TransferwiseTransferRequirement_for_User_TransferwiseQuote: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "transferwise-quote", serialization.serialize(it.path["transferwise-quoteID"]), "transferwise-transfer-requirement"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<TransferwiseTransferRequirementCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_TransferwiseTransferRequirement_for_User_TransferwiseQuote400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"transferwise-quoteID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_TransferwiseTransferRequirement_for_User_TransferwiseQuote",
    method: "POST",
    path: "user/:userID/transferwise-quote/:transferwise-quoteID/transferwise-transfer-requirement",
    server,
    client
  } as const
}

export namespace List_all_TransferwiseUser_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: TransferwiseUserListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_TransferwiseUser_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": TransferwiseUserListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_TransferwiseUser_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_TransferwiseUser_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "transferwise-user"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<TransferwiseUserListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_TransferwiseUser_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_TransferwiseUser_for_User",
    method: "GET",
    path: "user/:userID/transferwise-user",
    server,
    client
  } as const
}

export namespace CREATE_TransferwiseUser_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: TransferwiseUser
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: TransferwiseUserCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_TransferwiseUser_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": TransferwiseUser}): Request => ({
    path: {"userID": props["userID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": TransferwiseUserCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_TransferwiseUser_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_TransferwiseUser_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "transferwise-user"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<TransferwiseUserCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_TransferwiseUser_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_TransferwiseUser_for_User",
    method: "POST",
    path: "user/:userID/transferwise-user",
    server,
    client
  } as const
}

export namespace List_all_TreeProgress_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: TreeProgressListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_TreeProgress_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": TreeProgressListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_TreeProgress_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_TreeProgress_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "tree-progress"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<TreeProgressListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_TreeProgress_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_TreeProgress_for_User",
    method: "GET",
    path: "user/:userID/tree-progress",
    server,
    client
  } as const
}

export namespace READ_User {
  type Path = {
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UserRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UserRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UserRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "itemId": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_User",
    method: "GET",
    path: "user/:itemId",
    server,
    client
  } as const
}

export namespace List_all_User {
  type Path = {}
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UserListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UserListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UserListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
      
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_User",
    method: "GET",
    path: "user",
    server,
    client
  } as const
}

export namespace READ_UserCompany {
  type Path = {
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UserCompanyRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_UserCompany400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UserCompanyRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_UserCompany400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_UserCompany: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user-company", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UserCompanyRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_UserCompany400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "itemId": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_UserCompany",
    method: "GET",
    path: "user-company/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_UserCompany {
  type Path = {
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: UserCompany
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UserCompanyUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_UserCompany400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": UserCompany}): Request => ({
    path: {"itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UserCompanyUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_UserCompany400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_UserCompany: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user-company", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UserCompanyUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_UserCompany400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "itemId": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_UserCompany",
    method: "PUT",
    path: "user-company/:itemId",
    server,
    client
  } as const
}

export namespace READ_UserPaymentServiceProvider {
  type Path = {
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UserPaymentServiceProviderRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_UserPaymentServiceProvider400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UserPaymentServiceProviderRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_UserPaymentServiceProvider400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_UserPaymentServiceProvider: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user-payment-service-provider", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UserPaymentServiceProviderRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_UserPaymentServiceProvider400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "itemId": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_UserPaymentServiceProvider",
    method: "GET",
    path: "user-payment-service-provider/:itemId",
    server,
    client
  } as const
}

export namespace READ_UserPerson {
  type Path = {
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UserPersonRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_UserPerson400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UserPersonRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_UserPerson400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_UserPerson: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user-person", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UserPersonRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_UserPerson400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "itemId": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_UserPerson",
    method: "GET",
    path: "user-person/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_UserPerson {
  type Path = {
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: UserPerson
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UserPersonUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_UserPerson400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": UserPerson}): Request => ({
    path: {"itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UserPersonUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_UserPerson400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_UserPerson: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user-person", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UserPersonUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_UserPerson400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "itemId": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_UserPerson",
    method: "PUT",
    path: "user-person/:itemId",
    server,
    client
  } as const
}

export namespace READ_WhitelistSdd_for_User {
  type Path = {
    "userID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: WhitelistSddRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_WhitelistSdd_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": WhitelistSddRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_WhitelistSdd_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_WhitelistSdd_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "whitelist-sdd", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<WhitelistSddRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_WhitelistSdd_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"itemId": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_WhitelistSdd_for_User",
    method: "GET",
    path: "user/:userID/whitelist-sdd/:itemId",
    server,
    client
  } as const
}

export namespace List_all_WhitelistSdd_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: WhitelistSddListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_WhitelistSdd_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": WhitelistSddListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_WhitelistSdd_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_WhitelistSdd_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "whitelist-sdd"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<WhitelistSddListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_WhitelistSdd_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_WhitelistSdd_for_User",
    method: "GET",
    path: "user/:userID/whitelist-sdd",
    server,
    client
  } as const
}

export namespace READ_WhitelistSdd_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: WhitelistSddMonetaryAccountPayingRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_WhitelistSdd_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": WhitelistSddMonetaryAccountPayingRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_WhitelistSdd_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_WhitelistSdd_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "whitelist-sdd", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<WhitelistSddMonetaryAccountPayingRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_WhitelistSdd_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3]),"itemId": serialization.deserialize(it.path[5])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_WhitelistSdd_for_User_MonetaryAccount",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/whitelist-sdd/:itemId",
    server,
    client
  } as const
}

export namespace List_all_WhitelistSdd_for_User_MonetaryAccount {
  type Path = {
    "userID": number,
    "monetary-accountID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: WhitelistSddMonetaryAccountPayingListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_WhitelistSdd_for_User_MonetaryAccount400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "monetary-accountID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "monetary-accountID": props["monetary-accountID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": WhitelistSddMonetaryAccountPayingListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_WhitelistSdd_for_User_MonetaryAccount400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_WhitelistSdd_for_User_MonetaryAccount: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "whitelist-sdd"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<WhitelistSddMonetaryAccountPayingListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_WhitelistSdd_for_User_MonetaryAccount400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"monetary-accountID": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_WhitelistSdd_for_User_MonetaryAccount",
    method: "GET",
    path: "user/:userID/monetary-account/:monetary-accountID/whitelist-sdd",
    server,
    client
  } as const
}

export namespace READ_WhitelistSddOneOff_for_User {
  type Path = {
    "userID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: WhitelistSddOneOffRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_WhitelistSddOneOff_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": WhitelistSddOneOffRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_WhitelistSddOneOff_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_WhitelistSddOneOff_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "whitelist-sdd-one-off", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<WhitelistSddOneOffRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_WhitelistSddOneOff_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"itemId": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_WhitelistSddOneOff_for_User",
    method: "GET",
    path: "user/:userID/whitelist-sdd-one-off/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_WhitelistSddOneOff_for_User {
  type Path = {
    "userID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: WhitelistSddOneOff
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: WhitelistSddOneOffUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_WhitelistSddOneOff_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": WhitelistSddOneOff}): Request => ({
    path: {"userID": props["userID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": WhitelistSddOneOffUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_WhitelistSddOneOff_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_WhitelistSddOneOff_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "whitelist-sdd-one-off", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<WhitelistSddOneOffUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_WhitelistSddOneOff_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"itemId": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_WhitelistSddOneOff_for_User",
    method: "PUT",
    path: "user/:userID/whitelist-sdd-one-off/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_WhitelistSddOneOff_for_User {
  type Path = {
    "userID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: WhitelistSddOneOffDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_WhitelistSddOneOff_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": WhitelistSddOneOffDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_WhitelistSddOneOff_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_WhitelistSddOneOff_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "whitelist-sdd-one-off", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<WhitelistSddOneOffDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_WhitelistSddOneOff_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"itemId": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_WhitelistSddOneOff_for_User",
    method: "DELETE",
    path: "user/:userID/whitelist-sdd-one-off/:itemId",
    server,
    client
  } as const
}

export namespace List_all_WhitelistSddOneOff_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: WhitelistSddOneOffListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_WhitelistSddOneOff_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": WhitelistSddOneOffListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_WhitelistSddOneOff_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_WhitelistSddOneOff_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "whitelist-sdd-one-off"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<WhitelistSddOneOffListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_WhitelistSddOneOff_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_WhitelistSddOneOff_for_User",
    method: "GET",
    path: "user/:userID/whitelist-sdd-one-off",
    server,
    client
  } as const
}

export namespace CREATE_WhitelistSddOneOff_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: WhitelistSddOneOff
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: WhitelistSddOneOffCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_WhitelistSddOneOff_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": WhitelistSddOneOff}): Request => ({
    path: {"userID": props["userID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": WhitelistSddOneOffCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_WhitelistSddOneOff_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_WhitelistSddOneOff_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "whitelist-sdd-one-off"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<WhitelistSddOneOffCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_WhitelistSddOneOff_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_WhitelistSddOneOff_for_User",
    method: "POST",
    path: "user/:userID/whitelist-sdd-one-off",
    server,
    client
  } as const
}

export namespace READ_WhitelistSddRecurring_for_User {
  type Path = {
    "userID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: WhitelistSddRecurringRead
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: READ_WhitelistSddRecurring_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "itemId": props["itemId"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": WhitelistSddRecurringRead}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": READ_WhitelistSddRecurring_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    rEAD_WhitelistSddRecurring_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "whitelist-sdd-recurring", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<WhitelistSddRecurringRead>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<READ_WhitelistSddRecurring_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"itemId": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "rEAD_WhitelistSddRecurring_for_User",
    method: "GET",
    path: "user/:userID/whitelist-sdd-recurring/:itemId",
    server,
    client
  } as const
}

export namespace UPDATE_WhitelistSddRecurring_for_User {
  type Path = {
    "userID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "PUT"
    queries: Queries
    headers: Headers
    body: WhitelistSddRecurring
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: WhitelistSddRecurringUpdate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: UPDATE_WhitelistSddRecurring_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": WhitelistSddRecurring}): Request => ({
    path: {"userID": props["userID"], "itemId": props["itemId"]},
    method: "PUT",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": WhitelistSddRecurringUpdate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": UPDATE_WhitelistSddRecurring_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    uPDATE_WhitelistSddRecurring_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "PUT",
      path: ["user", serialization.serialize(it.path["userID"]), "whitelist-sdd-recurring", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<WhitelistSddRecurringUpdate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<UPDATE_WhitelistSddRecurring_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "PUT",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"itemId": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "uPDATE_WhitelistSddRecurring_for_User",
    method: "PUT",
    path: "user/:userID/whitelist-sdd-recurring/:itemId",
    server,
    client
  } as const
}

export namespace DELETE_WhitelistSddRecurring_for_User {
  type Path = {
    "userID": number,
    "itemId": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "DELETE"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: WhitelistSddRecurringDelete
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: DELETE_WhitelistSddRecurring_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "itemId": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"], "itemId": props["itemId"]},
    method: "DELETE",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": WhitelistSddRecurringDelete}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": DELETE_WhitelistSddRecurring_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    dELETE_WhitelistSddRecurring_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "DELETE",
      path: ["user", serialization.serialize(it.path["userID"]), "whitelist-sdd-recurring", serialization.serialize(it.path["itemId"])],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<WhitelistSddRecurringDelete>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<DELETE_WhitelistSddRecurring_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "DELETE",
        path: { 
          "userID": serialization.deserialize(it.path[1]),"itemId": serialization.deserialize(it.path[3])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "dELETE_WhitelistSddRecurring_for_User",
    method: "DELETE",
    path: "user/:userID/whitelist-sdd-recurring/:itemId",
    server,
    client
  } as const
}

export namespace List_all_WhitelistSddRecurring_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "GET"
    queries: Queries
    headers: Headers
    body: undefined
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: WhitelistSddRecurringListing[]
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: List_all_WhitelistSddRecurring_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string}): Request => ({
    path: {"userID": props["userID"]},
    method: "GET",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: undefined,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": WhitelistSddRecurringListing[]}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": List_all_WhitelistSddRecurring_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    list_all_WhitelistSddRecurring_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "GET",
      path: ["user", serialization.serialize(it.path["userID"]), "whitelist-sdd-recurring"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<WhitelistSddRecurringListing[]>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<List_all_WhitelistSddRecurring_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "GET",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "list_all_WhitelistSddRecurring_for_User",
    method: "GET",
    path: "user/:userID/whitelist-sdd-recurring",
    server,
    client
  } as const
}

export namespace CREATE_WhitelistSddRecurring_for_User {
  type Path = {
    "userID": number,
  }
  type Queries = {}
  type Headers = {
    "Cache-Control": string | undefined,
    "User-Agent": string,
    "X-Bunq-Language": string | undefined,
    "X-Bunq-Region": string | undefined,
    "X-Bunq-Client-Request-Id": string | undefined,
    "X-Bunq-Geolocation": string | undefined,
    "X-Bunq-Client-Authentication": string,
  }
  export type Request = { 
    path: Path
    method: "POST"
    queries: Queries
    headers: Headers
    body: WhitelistSddRecurring
  }
  export type Response200 = {
    status: 200
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: WhitelistSddRecurringCreate
  }
  export type Response400 = {
    status: 400
    headers: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined}
    body: CREATE_WhitelistSddRecurring_for_User400ResponseBody
  }
  export type Response = Response200 | Response400
  export const request = (props: {"userID": number, "Cache-Control": string | undefined, "User-Agent": string, "X-Bunq-Language": string | undefined, "X-Bunq-Region": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Geolocation": string | undefined, "X-Bunq-Client-Authentication": string, "body": WhitelistSddRecurring}): Request => ({
    path: {"userID": props["userID"]},
    method: "POST",
    queries: {},
    headers: {"Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"]},
    body: props.body,
  })
  export const response200 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": WhitelistSddRecurringCreate}): Response200 => ({
    status: 200,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export const response400 = (props: {"X-Bunq-Client-Response-Id": string | undefined, "X-Bunq-Client-Request-Id": string | undefined, "X-Bunq-Server-Signature": string | undefined, "body": CREATE_WhitelistSddRecurring_for_User400ResponseBody}): Response400 => ({
    status: 400,
    headers: {"X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"]},
    body: props.body,
  })
  export type Handler = {
    cREATE_WhitelistSddRecurring_for_User: (request:Request) => Promise<Response>
  }
  export const client: Wirespec.Client<Request, Response> = (serialization: Wirespec.Serialization) => ({
    to: (it) => ({
      method: "POST",
      path: ["user", serialization.serialize(it.path["userID"]), "whitelist-sdd-recurring"],
      queries: {},
      headers: {"Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"])},
      body: serialization.serialize(it.body)
    }),
    from: (it) => {
      switch (it.status) {
        case 200:
          return {
            status: 200,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<WhitelistSddRecurringCreate>(it.body)
          };
        case 400:
          return {
            status: 400,
            headers: {"X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"])},
            body: serialization.deserialize<CREATE_WhitelistSddRecurring_for_User400ResponseBody>(it.body)
          };
        default:
          throw new Error(`Cannot internalize response with status: ${it.status}`);
      }
    }
  })
  export const server:Wirespec.Server<Request, Response> = (serialization: Wirespec.Serialization) => ({
    from: (it) => {
      return {
        method: "POST",
        path: { 
          "userID": serialization.deserialize(it.path[1])
        },
        queries: {
  
        },
        headers: {
          "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]),      "User-Agent": serialization.deserialize(it.headers["User-Agent"]),      "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]),      "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]),      "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]),      "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]),      "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
        },
        body: serialization.deserialize(it.body)
      }
    },
    to: (it) => ({
      status: it.status,
      headers: {},
      body: serialization.serialize(it.body),
    })
  })
  export const api = {
    name: "cREATE_WhitelistSddRecurring_for_User",
    method: "POST",
    path: "user/:userID/whitelist-sdd-recurring",
    server,
    client
  } as const
}

export type List_all_AdditionalTransactionInformationCategory_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_AdditionalTransactionInformationCategoryUserDefined_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_Attachment_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_Attachment_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_AttachmentPublic400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_AttachmentPublic400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_Avatar400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_Avatar400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_BillingContractSubscription_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_BunqmeFundraiserProfile_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_BunqmeFundraiserProfile_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_BunqmeFundraiserResult_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_BunqmeTab_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_BunqmeTab_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_BunqmeTab_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_BunqmeTab_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_BunqmeTabResultResponse_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_CallbackUrl_for_User_OauthClient400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_CallbackUrl_for_User_OauthClient400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_CallbackUrl_for_User_OauthClient400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_CallbackUrl_for_User_OauthClient400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_CallbackUrl_for_User_OauthClient400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_Card_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_Card_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_Card_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_CardBatch_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_CardBatchReplace_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_CardCredit_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_CardDebit_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_CardName_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_CertificatePinned_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_CertificatePinned_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_CertificatePinned_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_CertificatePinned_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_ChallengeRequest_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_ChallengeRequest_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_Company_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_Company_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_Company_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_Company_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_ConfirmationOfFunds_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_Content_for_User_ChatConversation_Attachment400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_Content_for_User_MonetaryAccount_Attachment400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_Content_for_AttachmentPublic400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_Content_for_User_Attachment400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_Content_for_User_ExportAnnualOverview400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_Content_for_User_MonetaryAccount_ExportRib400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_Content_for_User_Card_ExportStatementCard400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_Content_for_User_MonetaryAccount_CustomerStatement400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_Content_for_User_MonetaryAccount_Event_Statement400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_CredentialPasswordIp_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_CredentialPasswordIp_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_CurrencyCloudBeneficiary_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_CurrencyCloudBeneficiary_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_CurrencyCloudBeneficiary_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_CurrencyCloudBeneficiaryRequirement_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_CurrencyCloudPaymentQuote_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_CurrencyConversion_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_CurrencyConversion_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_CurrencyConversionQuote_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_CurrencyConversionQuote_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_CurrencyConversionQuote_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_CustomerStatement_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_CustomerStatement_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_CustomerStatement_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_CustomerStatement_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_Definition_for_User_MonetaryAccount_PaymentAutoAllocate400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_Device400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_Device400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_DeviceServer400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_DeviceServer400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_DeviceServer400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_DraftPayment_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_DraftPayment_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_DraftPayment_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_DraftPayment_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_Event_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_Event_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_ExportAnnualOverview_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_ExportAnnualOverview_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_ExportAnnualOverview_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_ExportAnnualOverview_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_ExportRib_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_ExportRib_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_ExportRib_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_ExportRib_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_ExportStatementCard_for_User_Card400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_ExportStatementCard_for_User_Card400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_ExportStatementCardCsv_for_User_Card400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_ExportStatementCardCsv_for_User_Card400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_ExportStatementCardCsv_for_User_Card400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_ExportStatementCardCsv_for_User_Card400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_ExportStatementCardPdf_for_User_Card400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_ExportStatementCardPdf_for_User_Card400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_ExportStatementCardPdf_for_User_Card400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_ExportStatementCardPdf_for_User_Card400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_FeatureAnnouncement_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_GeneratedCvc2_for_User_Card400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_GeneratedCvc2_for_User_Card400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_GeneratedCvc2_for_User_Card400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_GeneratedCvc2_for_User_Card400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_IdealMerchantTransaction_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_IdealMerchantTransaction_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_IdealMerchantTransaction_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_InsightPreferenceDate_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_Insights_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_InsightsSearch_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_Installation400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_Installation400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_Installation400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_Instance_for_User_MonetaryAccount_PaymentAutoAllocate400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_Instance_for_User_MonetaryAccount_PaymentAutoAllocate400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_Invoice_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_Invoice_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_Invoice_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_Invoice_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_InvoiceExport_for_User_Invoice400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_InvoiceExport_for_User_Invoice400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_InvoiceExport_for_User_Invoice400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_InvoiceExport_for_User_Invoice400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_Ip_for_User_CredentialPasswordIp400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_Ip_for_User_CredentialPasswordIp400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_Ip_for_User_CredentialPasswordIp400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_Ip_for_User_CredentialPasswordIp400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_LegalName_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_Limit_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_MastercardAction_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_MastercardAction_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_MonetaryAccount_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_MonetaryAccount_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_MonetaryAccountBank_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_MonetaryAccountBank_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_MonetaryAccountBank_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_MonetaryAccountBank_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_MonetaryAccountCard_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_MonetaryAccountCard_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_MonetaryAccountCard_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_MonetaryAccountExternal_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_MonetaryAccountExternal_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_MonetaryAccountExternal_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_MonetaryAccountExternal_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_MonetaryAccountExternalSavings_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_MonetaryAccountExternalSavings_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_MonetaryAccountExternalSavings_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_MonetaryAccountExternalSavings_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_MonetaryAccountJoint_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_MonetaryAccountJoint_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_MonetaryAccountJoint_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_MonetaryAccountJoint_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_MonetaryAccountSavings_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_MonetaryAccountSavings_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_MonetaryAccountSavings_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_MonetaryAccountSavings_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_Name_for_UserCompany400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_NoteAttachment_for_User_MonetaryAccount_DraftPayment400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_NoteAttachment_for_User_MonetaryAccount_DraftPayment400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_NoteAttachment_for_User_MonetaryAccount_DraftPayment400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_NoteAttachment_for_User_MonetaryAccount_MastercardAction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_NoteAttachment_for_User_MonetaryAccount_MastercardAction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_NoteAttachment_for_User_MonetaryAccount_MastercardAction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_NoteAttachment_for_User_MonetaryAccount_PaymentBatch400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_NoteAttachment_for_User_MonetaryAccount_PaymentBatch400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_NoteAttachment_for_User_MonetaryAccount_Payment400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_NoteAttachment_for_User_MonetaryAccount_Payment400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_NoteAttachment_for_User_MonetaryAccount_Payment400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_NoteAttachment_for_User_MonetaryAccount_Payment400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_NoteAttachment_for_User_MonetaryAccount_Payment400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiry400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_NoteAttachment_for_User_MonetaryAccount_RequestInquiry400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_NoteAttachment_for_User_MonetaryAccount_RequestResponse400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_NoteAttachment_for_User_MonetaryAccount_RequestResponse400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_NoteAttachment_for_User_MonetaryAccount_RequestResponse400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_NoteAttachment_for_User_MonetaryAccount_SchedulePayment400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_NoteAttachment_for_User_MonetaryAccount_SchedulePayment400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_NoteText_for_User_MonetaryAccount_AdyenCardTransaction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_NoteText_for_User_MonetaryAccount_AdyenCardTransaction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_NoteText_for_User_MonetaryAccount_SwitchServicePayment400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_NoteText_for_User_MonetaryAccount_SwitchServicePayment400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_NoteText_for_User_MonetaryAccount_SwitchServicePayment400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_NoteText_for_User_MonetaryAccount_DraftPayment400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_NoteText_for_User_MonetaryAccount_DraftPayment400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_NoteText_for_User_MonetaryAccount_DraftPayment400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_NoteText_for_User_MonetaryAccount_DraftPayment400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_NoteText_for_User_MonetaryAccount_DraftPayment400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_NoteText_for_User_MonetaryAccount_MastercardAction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_NoteText_for_User_MonetaryAccount_MastercardAction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_NoteText_for_User_MonetaryAccount_MastercardAction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_NoteText_for_User_MonetaryAccount_MastercardAction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_NoteText_for_User_MonetaryAccount_MastercardAction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_NoteText_for_User_MonetaryAccount_PaymentBatch400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_NoteText_for_User_MonetaryAccount_PaymentBatch400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_NoteText_for_User_MonetaryAccount_PaymentBatch400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_NoteText_for_User_MonetaryAccount_PaymentBatch400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_NoteText_for_User_MonetaryAccount_PaymentBatch400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_NoteText_for_User_MonetaryAccount_PaymentDelayed400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_NoteText_for_User_MonetaryAccount_PaymentDelayed400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_NoteText_for_User_MonetaryAccount_PaymentDelayed400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_NoteText_for_User_MonetaryAccount_PaymentDelayed400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_NoteText_for_User_MonetaryAccount_PaymentDelayed400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_NoteText_for_User_MonetaryAccount_Payment400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_NoteText_for_User_MonetaryAccount_Payment400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_NoteText_for_User_MonetaryAccount_Payment400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_NoteText_for_User_MonetaryAccount_Payment400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_NoteText_for_User_MonetaryAccount_Payment400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_NoteText_for_User_MonetaryAccount_RequestInquiryBatch400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_NoteText_for_User_MonetaryAccount_RequestInquiryBatch400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_NoteText_for_User_MonetaryAccount_RequestInquiry400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_NoteText_for_User_MonetaryAccount_RequestInquiry400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_NoteText_for_User_MonetaryAccount_RequestInquiry400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_NoteText_for_User_MonetaryAccount_RequestInquiry400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_NoteText_for_User_MonetaryAccount_RequestInquiry400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_NoteText_for_User_MonetaryAccount_RequestResponse400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_NoteText_for_User_MonetaryAccount_RequestResponse400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_NoteText_for_User_MonetaryAccount_RequestResponse400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_NoteText_for_User_MonetaryAccount_RequestResponse400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_NoteText_for_User_MonetaryAccount_RequestResponse400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_NoteText_for_User_MonetaryAccount_SchedulePayment400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_NoteText_for_User_MonetaryAccount_SchedulePayment400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_NoteText_for_User_MonetaryAccount_SchedulePayment400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_NoteText_for_User_MonetaryAccount_SchedulePayment400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_NoteText_for_User_MonetaryAccount_SchedulePayment400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_NotificationFilterEmail_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_NotificationFilterEmail_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_NotificationFilterFailure_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_NotificationFilterFailure_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_NotificationFilterPush_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_NotificationFilterPush_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_NotificationFilterUrl_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_NotificationFilterUrl_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_NotificationFilterUrl_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_NotificationFilterUrl_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_OauthClient_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_OauthClient_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_OauthClient_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_OauthClient_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_Payment_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_Payment_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_Payment_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_Payment_for_User_MonetaryAccount_MastercardAction400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_PaymentAutoAllocate_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_PaymentAutoAllocate_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_PaymentAutoAllocate_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_PaymentAutoAllocate_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_PaymentAutoAllocate_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_PaymentAutoAllocate_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_PaymentBatch_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_PaymentBatch_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_PaymentBatch_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_PaymentBatch_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_PaymentServiceProviderCredential400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_PaymentServiceProviderCredential400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_PaymentServiceProviderDraftPayment_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_PaymentServiceProviderDraftPayment_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_PaymentServiceProviderDraftPayment_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_PaymentServiceProviderDraftPayment_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_PaymentServiceProviderIssuerTransaction_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_PaymentServiceProviderIssuerTransaction_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_PaymentServiceProviderIssuerTransaction_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_PaymentServiceProviderIssuerTransaction_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_PdfContent_for_User_Invoice400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_Replace_for_User_Card400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_RequestInquiry_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_RequestInquiry_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_RequestInquiry_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_RequestInquiry_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_RequestInquiryBatch_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_RequestInquiryBatch_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_RequestInquiryBatch_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_RequestInquiryBatch_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_RequestResponse_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_RequestResponse_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_RequestResponse_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_SandboxUserCompany400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_SandboxUserPerson400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_Schedule_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_Schedule_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_Schedule_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_ScheduleInstance_for_User_MonetaryAccount_Schedule400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_ScheduleInstance_for_User_MonetaryAccount_Schedule400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_ScheduleInstance_for_User_MonetaryAccount_Schedule400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_SchedulePayment_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_SchedulePayment_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_SchedulePayment_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_SchedulePayment_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_SchedulePayment_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_SchedulePaymentBatch_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_SchedulePaymentBatch_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_SchedulePaymentBatch_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_SchedulePaymentBatch_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_ServerError400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_ServerPublicKey_for_Installation400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_Session400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_SessionServer400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_ShareInviteMonetaryAccountResponse_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_ShareInviteMonetaryAccountResponse_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_ShareInviteMonetaryAccountResponse_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_SofortMerchantTransaction_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_SofortMerchantTransaction_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_Statement_for_User_MonetaryAccount_Event400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_Statement_for_User_MonetaryAccount_Event400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_SwitchServicePayment_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_TokenQrRequestIdeal_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_TokenQrRequestSofort_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_TransferwiseCurrency_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_TransferwiseQuote_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_TransferwiseQuote_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_TransferwiseQuoteTemporary_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_TransferwiseQuoteTemporary_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_TransferwiseRecipient_for_User_TransferwiseQuote400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_TransferwiseRecipient_for_User_TransferwiseQuote400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_TransferwiseRecipient_for_User_TransferwiseQuote400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_TransferwiseRecipient_for_User_TransferwiseQuote400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_TransferwiseRecipientRequirement_for_User_TransferwiseQuote400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_TransferwiseRecipientRequirement_for_User_TransferwiseQuote400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_TransferwiseTransfer_for_User_TransferwiseQuote400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_TransferwiseTransfer_for_User_TransferwiseQuote400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_TransferwiseTransfer_for_User_TransferwiseQuote400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_TransferwiseTransferRequirement_for_User_TransferwiseQuote400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_TransferwiseUser_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_TransferwiseUser_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_TreeProgress_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_UserCompany400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_UserCompany400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_UserPaymentServiceProvider400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_UserPerson400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_UserPerson400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_WhitelistSdd_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_WhitelistSdd_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_WhitelistSdd_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_WhitelistSdd_for_User_MonetaryAccount400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_WhitelistSddOneOff_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_WhitelistSddOneOff_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_WhitelistSddOneOff_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_WhitelistSddOneOff_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_WhitelistSddOneOff_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type READ_WhitelistSddRecurring_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type UPDATE_WhitelistSddRecurring_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type DELETE_WhitelistSddRecurring_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type List_all_WhitelistSddRecurring_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type CREATE_WhitelistSddRecurring_for_User400ResponseBody = {
  "Error": ErrorArray[] | undefined
}


export type AdditionalInformation = {
  "category": string | undefined,
  "reason": string | undefined,
  "comment": string | undefined,
  "attachment": AttachmentMasterCardActionRefund[] | undefined,
  "terms_and_conditions": string | undefined
}


export type AdditionalTransactionInformationCategory = {
  "category": string | undefined,
  "type": string | undefined,
  "status": string | undefined,
  "order": number | undefined,
  "description": string | undefined,
  "description_translated": string | undefined,
  "color": string | undefined,
  "icon": string | undefined
}


export type AdditionalTransactionInformationCategoryListing = {
  "category": string | undefined,
  "type": string | undefined,
  "status": string | undefined,
  "order": number | undefined,
  "description": string | undefined,
  "description_translated": string | undefined,
  "color": string | undefined,
  "icon": string | undefined
}


export type AdditionalTransactionInformationCategoryUserDefined = {
  "category": string | undefined,
  "status": string,
  "description": string | undefined,
  "color": string | undefined,
  "icon": string | undefined
}


export type AdditionalTransactionInformationCategoryUserDefinedCreate = {
  "Id": BunqId | undefined
}


export type Address = {
  "street": string | undefined,
  "house_number": string | undefined,
  "po_box": string | undefined,
  "postal_code": string | undefined,
  "city": string | undefined,
  "country": string | undefined,
  "extra": string | undefined,
  "mailbox_name": string | undefined,
  "province": string | undefined,
  "is_user_address_updated": boolean | undefined
}


export type Amount = {
  "value": string | undefined,
  "currency": string | undefined
}


export type Attachment = {
  "description": string | undefined,
  "content_type": string | undefined,
  "urls": AttachmentUrl[] | undefined
}


export type AttachmentConversationContentListing = {

}


export type AttachmentMasterCardActionRefund = {
  "id": number | undefined
}


export type AttachmentMonetaryAccount = {

}


export type AttachmentMonetaryAccountContentListing = {

}


export type AttachmentMonetaryAccountCreate = {
  "id": number | undefined
}


export type AttachmentMonetaryAccountPayment = {
  "id": number | undefined,
  "monetary_account_id": number | undefined
}


export type AttachmentPublic = {

}


export type AttachmentPublicContentListing = {

}


export type AttachmentPublicCreate = {
  "Id": BunqId | undefined
}


export type AttachmentPublicRead = {
  "uuid": string | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "attachment": Attachment | undefined
}


export type AttachmentUrl = {
  "type": string | undefined,
  "url": string | undefined
}


export type AttachmentUserContentListing = {

}


export type AttachmentUserRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "attachment": Attachment | undefined
}


export type Avatar = {
  "uuid": string | undefined,
  "anchor_uuid": string | undefined,
  "image": Image[] | undefined,
  "style": string | undefined
}


export type AvatarCreate = {
  "uuid": string | undefined
}


export type AvatarRead = {
  "uuid": string | undefined,
  "image": Image[] | undefined
}


export type BankSwitchServiceNetherlandsIncoming = {
  "alias": LabelMonetaryAccount | undefined,
  "counterparty_alias": LabelMonetaryAccount | undefined,
  "status": string | undefined,
  "user_alias": LabelUser | undefined,
  "sub_status": string | undefined,
  "time_start_desired": string | undefined,
  "time_start_actual": string | undefined,
  "time_end": string | undefined,
  "attachment": Attachment | undefined,
  "rejection_reason": string | undefined,
  "rejection_reason_description": string | undefined,
  "rejection_reason_description_translated": string | undefined,
  "rejection_reason_together_url": string | undefined
}


export type BankSwitchServiceNetherlandsIncomingPayment = {
  "bank_switch_service": BankSwitchServiceNetherlandsIncoming | undefined,
  "payment": Payment | undefined
}


export type BankSwitchServiceNetherlandsIncomingPaymentRead = {
  "bank_switch_service": BankSwitchServiceNetherlandsIncoming | undefined,
  "payment": Payment | undefined
}


export type BillingContractSubscription = {
  "subscription_type": string | undefined,
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "contract_date_start": string | undefined,
  "contract_date_end": string | undefined,
  "contract_version": number | undefined,
  "subscription_type_downgrade": string | undefined,
  "status": string | undefined,
  "sub_status": string | undefined
}


export type BillingContractSubscriptionListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "contract_date_start": string | undefined,
  "contract_date_end": string | undefined,
  "contract_version": number | undefined,
  "subscription_type": string | undefined,
  "subscription_type_downgrade": string | undefined,
  "status": string | undefined,
  "sub_status": string | undefined
}


export type BirdeeInvestmentPortfolio = {
  "risk_profile_type": string | undefined,
  "investment_theme": string | undefined,
  "name": string | undefined,
  "goal": BirdeeInvestmentPortfolioGoal | undefined,
  "status": string | undefined,
  "number_of_strategy_change_annual_maximum": number | undefined,
  "number_of_strategy_change_annual_used": number | undefined,
  "external_identifier": string | undefined,
  "balance": BirdeeInvestmentPortfolioBalance | undefined,
  "allocations": BirdeePortfolioAllocation[] | undefined
}


export type BirdeeInvestmentPortfolioBalance = {
  "amount_available": Amount | undefined,
  "amount_deposit_total": Amount | undefined,
  "amount_withdrawal_total": Amount | undefined,
  "amount_fee_total": Amount | undefined,
  "amount_profit": Amount | undefined,
  "amount_deposit_pending": Amount | undefined,
  "amount_withdrawal_pending": Amount | undefined
}


export type BirdeeInvestmentPortfolioGoal = {
  "amount_target": Amount | undefined,
  "time_end": string | undefined
}


export type BirdeePortfolioAllocation = {
  "instrument_currency": string | undefined,
  "instrument_asset_class": string | undefined,
  "instrument_asset_class_name": string | undefined,
  "instrument_isin": string | undefined,
  "instrument_name": string | undefined,
  "instrument_region_name": string | undefined,
  "instrument_key_information_document_uri": string | undefined,
  "weight": string | undefined,
  "quantity": string | undefined,
  "price": string | undefined,
  "amount": string | undefined
}


export type BunqId = {
  "id": number | undefined
}


export type BunqMeFundraiserProfile = {
  "pointer": Pointer | undefined,
  "color": string | undefined,
  "alias": LabelMonetaryAccount | undefined,
  "currency": string | undefined,
  "description": string | undefined,
  "attachment": AttachmentPublic | undefined,
  "status": string | undefined,
  "redirect_url": string | undefined,
  "invite_profile_name": string | undefined,
  "merchant_available": BunqMeMerchantAvailable[] | undefined
}


export type BunqMeFundraiserProfileUserListing = {
  "monetary_account_id": number | undefined,
  "owner_user_id": number | undefined,
  "color": string | undefined,
  "alias": LabelMonetaryAccount | undefined,
  "currency": string | undefined,
  "description": string | undefined,
  "attachment": AttachmentPublic | undefined,
  "pointer": Pointer | undefined,
  "redirect_url": string | undefined,
  "status": string | undefined
}


export type BunqMeFundraiserProfileUserRead = {
  "monetary_account_id": number | undefined,
  "owner_user_id": number | undefined,
  "color": string | undefined,
  "alias": LabelMonetaryAccount | undefined,
  "currency": string | undefined,
  "description": string | undefined,
  "attachment": AttachmentPublic | undefined,
  "pointer": Pointer | undefined,
  "redirect_url": string | undefined,
  "status": string | undefined
}


export type BunqMeFundraiserResult = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "bunqme_fundraiser_profile": BunqMeFundraiserProfile | undefined,
  "payments": Payment[] | undefined
}


export type BunqMeFundraiserResultRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "bunqme_fundraiser_profile": BunqMeFundraiserProfile | undefined,
  "payments": Payment[] | undefined
}


export type BunqMeMerchantAvailable = {
  "merchant_type": string | undefined,
  "available": boolean | undefined
}


export type BunqMeTab = {
  "bunqme_tab_entry": BunqMeTabEntry,
  "status": string | undefined,
  "event_id": number | undefined
}


export type BunqMeTabCreate = {
  "id": number | undefined
}


export type BunqMeTabEntry = {
  "amount_inquired": Amount | undefined,
  "description": string | undefined,
  "redirect_url": string | undefined,
  "uuid": string | undefined,
  "alias": LabelMonetaryAccount | undefined,
  "status": string | undefined,
  "merchant_available": BunqMeMerchantAvailable[] | undefined,
  "invite_profile_name": string | undefined
}


export type BunqMeTabListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "time_expiry": string | undefined,
  "monetary_account_id": number | undefined,
  "status": string | undefined,
  "type": string | undefined,
  "alias_monetary_account": LabelMonetaryAccount | undefined,
  "bunqme_tab_share_url": string | undefined,
  "bunqme_tab_entry": BunqMeTabEntry | undefined,
  "bunqme_tab_entries": BunqMeTabEntry[] | undefined,
  "result_inquiries": BunqMeTabResultInquiry[] | undefined
}


export type BunqMeTabRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "time_expiry": string | undefined,
  "monetary_account_id": number | undefined,
  "status": string | undefined,
  "type": string | undefined,
  "alias_monetary_account": LabelMonetaryAccount | undefined,
  "bunqme_tab_share_url": string | undefined,
  "bunqme_tab_entry": BunqMeTabEntry | undefined,
  "bunqme_tab_entries": BunqMeTabEntry[] | undefined,
  "result_inquiries": BunqMeTabResultInquiry[] | undefined
}


export type BunqMeTabResultInquiry = {
  "payment": Payment | undefined,
  "bunq_me_tab_id": number | undefined
}


export type BunqMeTabResultResponse = {
  "payment": Payment | undefined
}


export type BunqMeTabResultResponseRead = {
  "payment": Payment | undefined
}


export type BunqMeTabUpdate = {
  "Id": BunqId | undefined
}


export type Card = {
  "pin_code": string | undefined,
  "activation_code": string | undefined,
  "status": string | undefined,
  "order_status": string | undefined,
  "card_limit": Amount | undefined,
  "card_limit_atm": Amount | undefined,
  "country_permission": CardCountryPermission[] | undefined,
  "pin_code_assignment": CardPinAssignment[] | undefined,
  "primary_account_numbers": CardPrimaryAccountNumber[] | undefined,
  "monetary_account_id_fallback": number | undefined,
  "preferred_name_on_card": string | undefined,
  "second_line": string | undefined,
  "cancellation_reason": string | undefined
}


export type CardBatch = {
  "cards": CardBatchEntry[]
}


export type CardBatchCreate = {
  "updated_card_ids": BunqId[] | undefined
}


export type CardBatchEntry = {
  "id": number,
  "status": string | undefined,
  "card_limit": Amount | undefined,
  "card_limit_atm": Amount | undefined,
  "country_permission": CardCountryPermission[] | undefined,
  "monetary_account_id_fallback": number | undefined
}


export type CardBatchReplace = {
  "cards": CardBatchReplaceEntry[]
}


export type CardBatchReplaceCreate = {
  "updated_card_ids": BunqId[] | undefined
}


export type CardBatchReplaceEntry = {
  "id": number,
  "name_on_card": string | undefined,
  "pin_code_assignment": CardPinAssignment[] | undefined,
  "second_line": string | undefined
}


export type CardCountryPermission = {
  "country": string | undefined,
  "expiry_time": string | undefined,
  "id": number | undefined
}


export type CardCredit = {
  "first_line": string | undefined,
  "second_line": string,
  "name_on_card": string,
  "preferred_name_on_card": string | undefined,
  "alias": Pointer | undefined,
  "type": string,
  "product_type": string,
  "pin_code_assignment": CardPinAssignment[] | undefined,
  "monetary_account_id_fallback": number | undefined,
  "order_status": string | undefined
}


export type CardCreditCreate = {
  "Id": BunqId | undefined
}


export type CardDebit = {
  "second_line": string,
  "name_on_card": string,
  "preferred_name_on_card": string | undefined,
  "alias": Pointer | undefined,
  "type": string,
  "product_type": string,
  "pin_code_assignment": CardPinAssignment[] | undefined,
  "monetary_account_id_fallback": number | undefined,
  "order_status": string | undefined
}


export type CardDebitCreate = {
  "Id": BunqId | undefined
}


export type CardGeneratedCvc2 = {
  "type": string | undefined
}


export type CardGeneratedCvc2Create = {
  "Id": BunqId | undefined
}


export type CardGeneratedCvc2Listing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "type": string | undefined,
  "cvc2": string | undefined,
  "status": string | undefined,
  "expiry_time": string | undefined
}


export type CardGeneratedCvc2Read = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "type": string | undefined,
  "cvc2": string | undefined,
  "status": string | undefined,
  "expiry_time": string | undefined
}


export type CardGeneratedCvc2Update = {
  "Id": BunqId | undefined
}


export type CardListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "public_uuid": string | undefined,
  "user_id": number | undefined,
  "user_owner_id": number | undefined,
  "user_holder_id": number | undefined,
  "type": string | undefined,
  "sub_type": string | undefined,
  "product_type": string | undefined,
  "product_sub_type": string | undefined,
  "first_line": string | undefined,
  "second_line": string | undefined,
  "status": string | undefined,
  "sub_status": string | undefined,
  "order_status": string | undefined,
  "expiry_date": string | undefined,
  "name_on_card": string | undefined,
  "preferred_name_on_card": string | undefined,
  "primary_account_numbers": CardPrimaryAccountNumber[] | undefined,
  "payment_account_reference": string | undefined,
  "card_limit": Amount | undefined,
  "card_limit_atm": Amount | undefined,
  "country_permission": CardCountryPermission[] | undefined,
  "label_monetary_account_ordered": LabelMonetaryAccount | undefined,
  "label_monetary_account_current": LabelMonetaryAccount | undefined,
  "monetary_account": MonetaryAccount | undefined,
  "pin_code_assignment": CardPinAssignment[] | undefined,
  "monetary_account_id_fallback": number | undefined,
  "country": string | undefined,
  "card_shipment_tracking_url": string | undefined,
  "is_card_eligible_for_free_replacement": boolean | undefined,
  "card_replacement": CardReplacement | undefined,
  "card_generated_cvc2": CardGeneratedCvc2 | undefined,
  "is_limited_edition": boolean | undefined,
  "card_metal_member_since_date": string | undefined,
  "company_employee_card": CompanyEmployeeCard | undefined
}


export type CardNameListing = {
  "possible_card_name_array": string[] | undefined
}


export type CardPinAssignment = {
  "type": string | undefined,
  "routing_type": string | undefined,
  "pin_code": string | undefined,
  "monetary_account_id": number | undefined,
  "status": string | undefined
}


export type CardPrimaryAccountNumber = {
  "id": number | undefined,
  "description": string | undefined,
  "status": string | undefined,
  "monetary_account_id": number | undefined,
  "uuid": string | undefined,
  "four_digit": string | undefined,
  "type": string | undefined
}


export type CardRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "public_uuid": string | undefined,
  "user_id": number | undefined,
  "user_owner_id": number | undefined,
  "user_holder_id": number | undefined,
  "type": string | undefined,
  "sub_type": string | undefined,
  "product_type": string | undefined,
  "product_sub_type": string | undefined,
  "first_line": string | undefined,
  "second_line": string | undefined,
  "status": string | undefined,
  "sub_status": string | undefined,
  "order_status": string | undefined,
  "expiry_date": string | undefined,
  "name_on_card": string | undefined,
  "preferred_name_on_card": string | undefined,
  "primary_account_numbers": CardPrimaryAccountNumber[] | undefined,
  "payment_account_reference": string | undefined,
  "card_limit": Amount | undefined,
  "card_limit_atm": Amount | undefined,
  "country_permission": CardCountryPermission[] | undefined,
  "label_monetary_account_ordered": LabelMonetaryAccount | undefined,
  "label_monetary_account_current": LabelMonetaryAccount | undefined,
  "monetary_account": MonetaryAccount | undefined,
  "pin_code_assignment": CardPinAssignment[] | undefined,
  "monetary_account_id_fallback": number | undefined,
  "country": string | undefined,
  "card_shipment_tracking_url": string | undefined,
  "is_card_eligible_for_free_replacement": boolean | undefined,
  "card_replacement": CardReplacement | undefined,
  "card_generated_cvc2": CardGeneratedCvc2 | undefined,
  "is_limited_edition": boolean | undefined,
  "card_metal_member_since_date": string | undefined,
  "company_employee_card": CompanyEmployeeCard | undefined
}


export type CardReplace = {
  "name_on_card": string | undefined,
  "preferred_name_on_card": string | undefined,
  "pin_code_assignment": CardPinAssignment[] | undefined,
  "second_line": string | undefined
}


export type CardReplaceCreate = {
  "Id": BunqId | undefined
}


export type CardReplacement = {
  "status": string | undefined,
  "address_main": Address | undefined,
  "address_postal": Address | undefined,
  "card_id": number | undefined,
  "card_new_id": number | undefined
}


export type CardUpdate = {
  "Id": BunqId | undefined
}


export type CashbackPayoutItem = {
  "status": string | undefined,
  "amount": Amount | undefined,
  "rate_applied": string | undefined,
  "transaction_category": AdditionalTransactionInformationCategory | undefined,
  "user_partner_promotion": UserPartnerPromotion | undefined
}


export type Certificate = {
  "certificate": string | undefined
}


export type CertificatePinned = {
  "certificate_chain": Certificate[]
}


export type CertificatePinnedCreate = {
  "id": number | undefined
}


export type CertificatePinnedDelete = {

}


export type CertificatePinnedListing = {
  "certificate_chain": string | undefined,
  "id": number | undefined
}


export type CertificatePinnedRead = {
  "certificate_chain": string | undefined,
  "id": number | undefined
}


export type CoOwner = {
  "alias": LabelUser | undefined,
  "status": string | undefined
}


export type CoOwnerInviteResponse = {
  "status": string | undefined,
  "alias": LabelMonetaryAccount | undefined,
  "counter_alias": LabelMonetaryAccount | undefined,
  "monetary_account_id": number | undefined,
  "monetary_account_type": string | undefined,
  "freeze_status": string | undefined,
  "label_freeze_user": LabelUser | undefined,
  "all_co_owner": CoOwner[] | undefined
}


export type Company = {
  "name": string,
  "address_main": Address,
  "address_postal": Address,
  "country": string,
  "ubo": Ubo[] | undefined,
  "chamber_of_commerce_number": string | undefined,
  "legal_form": string,
  "subscription_type": string,
  "avatar_uuid": string | undefined,
  "vat_number": CompanyVatNumber | undefined,
  "vat_numbers": CompanyVatNumber[] | undefined,
  "signup_track_type": string | undefined
}


export type CompanyCreate = {
  "Id": BunqId | undefined
}


export type CompanyEmployeeCard = {
  "pointer_counter_user": Pointer,
  "pointer_monetary_account": Pointer,
  "type": string,
  "product_type": string,
  "company_name_on_card": string | undefined,
  "employee_name_on_card": string | undefined,
  "employee_preferred_name_on_card": string | undefined,
  "amount_limit_monthly": Amount | undefined,
  "status": string | undefined,
  "card": Card | undefined,
  "amount_spent_monthly": Amount | undefined,
  "number_of_company_employee_card_receipt_pending": number | undefined
}


export type CompanyEmployeeCardReceipt = {
  "status": string | undefined
}


export type CompanyEmployeeSettingAdyenCardTransaction = {
  "pointer_counter_user": Pointer,
  "status": string | undefined,
  "monetary_account_payout_id": number | undefined
}


export type CompanyListing = {
  "UserCompany": UserCompany | undefined
}


export type CompanyRead = {
  "UserCompany": UserCompany | undefined
}


export type CompanyUpdate = {
  "Id": BunqId | undefined
}


export type CompanyVatNumber = {
  "type": string | undefined,
  "country": string | undefined,
  "value": string | undefined
}


export type ConfirmationOfFunds = {
  "pointer_iban": Pointer,
  "amount": Amount
}


export type ConfirmationOfFundsCreate = {
  "Id": BunqId | undefined
}


export type CurrencyCloudBeneficiary = {
  "name": string,
  "country": string,
  "currency": string,
  "payment_type": string,
  "legal_entity_type": string,
  "all_field": string[]
}


export type CurrencyCloudBeneficiaryCreate = {
  "Id": BunqId | undefined
}


export type CurrencyCloudBeneficiaryListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "name": string | undefined,
  "account_number": string | undefined,
  "currency": string | undefined,
  "external_identifier": string | undefined
}


export type CurrencyCloudBeneficiaryRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "name": string | undefined,
  "account_number": string | undefined,
  "currency": string | undefined,
  "external_identifier": string | undefined
}


export type CurrencyCloudBeneficiaryRequirementField = {
  "label": string | undefined,
  "name": string | undefined,
  "validation_expression": string | undefined,
  "input_type": string | undefined
}


export type CurrencyCloudBeneficiaryRequirementListing = {
  "payment_type": string | undefined,
  "legal_entity_type": string | undefined,
  "all_field": CurrencyCloudBeneficiaryRequirementField[] | undefined
}


export type CurrencyCloudPaymentQuote = {
  "pointers": Pointer[]
}


export type CurrencyCloudPaymentQuoteCreate = {
  "Id": BunqId | undefined
}


export type CurrencyConversion = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "status": string | undefined,
  "date_delivery_expected": string | undefined,
  "rate": string | undefined,
  "amount": Amount | undefined,
  "counter_amount": Amount | undefined,
  "group_uuid": string | undefined,
  "type": string | undefined,
  "order_type": string | undefined,
  "label_monetary_account": LabelMonetaryAccount | undefined,
  "counter_label_monetary_account": LabelMonetaryAccount | undefined,
  "payment": Payment | undefined
}


export type CurrencyConversionListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "status": string | undefined,
  "date_delivery_expected": string | undefined,
  "rate": string | undefined,
  "amount": Amount | undefined,
  "counter_amount": Amount | undefined,
  "group_uuid": string | undefined,
  "type": string | undefined,
  "order_type": string | undefined,
  "label_monetary_account": LabelMonetaryAccount | undefined,
  "counter_label_monetary_account": LabelMonetaryAccount | undefined,
  "payment": Payment | undefined
}


export type CurrencyConversionQuote = {
  "amount": Amount,
  "currency_source": string,
  "currency_target": string,
  "order_type": string,
  "counterparty_alias": Pointer,
  "status": string | undefined
}


export type CurrencyConversionQuoteCreate = {
  "Id": BunqId | undefined
}


export type CurrencyConversionQuoteRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "status": string | undefined,
  "amount_source": Amount | undefined,
  "amount_target": Amount | undefined,
  "rate": string | undefined,
  "time_expiry": string | undefined
}


export type CurrencyConversionQuoteUpdate = {
  "Id": BunqId | undefined
}


export type CurrencyConversionRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "status": string | undefined,
  "date_delivery_expected": string | undefined,
  "rate": string | undefined,
  "amount": Amount | undefined,
  "counter_amount": Amount | undefined,
  "group_uuid": string | undefined,
  "type": string | undefined,
  "order_type": string | undefined,
  "label_monetary_account": LabelMonetaryAccount | undefined,
  "counter_label_monetary_account": LabelMonetaryAccount | undefined,
  "payment": Payment | undefined
}


export type Customer = {
  "billing_account_id": string | undefined,
  "invoice_notification_preference": string | undefined,
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined
}


export type CustomerLimit = {
  "limit_monetary_account": number | undefined,
  "limit_monetary_account_remaining": number | undefined,
  "limit_card_debit_maestro": number | undefined,
  "limit_card_debit_mastercard": number | undefined,
  "limit_card_debit_wildcard": number | undefined,
  "limit_card_wildcard": number | undefined,
  "limit_card_replacement": number | undefined,
  "limit_amount_monthly": Amount | undefined,
  "spent_amount_monthly": Amount | undefined
}


export type CustomerLimitListing = {
  "limit_monetary_account": number | undefined,
  "limit_monetary_account_remaining": number | undefined,
  "limit_card_debit_maestro": number | undefined,
  "limit_card_debit_mastercard": number | undefined,
  "limit_card_debit_wildcard": number | undefined,
  "limit_card_wildcard": number | undefined,
  "limit_card_replacement": number | undefined,
  "limit_amount_monthly": Amount | undefined,
  "spent_amount_monthly": Amount | undefined
}


export type DeviceListing = {
  "DeviceServer": DeviceServer | undefined
}


export type DeviceRead = {
  "DeviceServer": DeviceServer | undefined
}


export type DeviceServer = {
  "description": string,
  "secret": string,
  "permitted_ips": string[] | undefined
}


export type DeviceServerCreate = {
  "Id": DeviceServerCreateId | undefined
}


export type DeviceServerCreateId = {
  "id": number | undefined
}


export type DeviceServerListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "description": string | undefined,
  "ip": string | undefined,
  "status": string | undefined
}


export type DeviceServerRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "description": string | undefined,
  "ip": string | undefined,
  "status": string | undefined
}


export type DraftPayment = {
  "status": string | undefined,
  "entries": DraftPaymentEntry[],
  "previous_updated_timestamp": string | undefined,
  "number_of_required_accepts": number,
  "schedule": Schedule | undefined
}


export type DraftPaymentAnchorObject = {
  "Payment": Payment | undefined,
  "PaymentBatch": PaymentBatch | undefined
}


export type DraftPaymentCreate = {
  "id": number | undefined
}


export type DraftPaymentEntry = {
  "amount": Amount | undefined,
  "counterparty_alias": LabelMonetaryAccount | undefined,
  "description": string | undefined,
  "merchant_reference": string | undefined,
  "attachment": AttachmentMonetaryAccountPayment[] | undefined,
  "id": number | undefined,
  "alias": LabelMonetaryAccount | undefined,
  "type": string | undefined
}


export type DraftPaymentListing = {
  "id": number | undefined,
  "monetary_account_id": number | undefined,
  "user_alias_created": LabelUser | undefined,
  "responses": DraftPaymentResponse[] | undefined,
  "status": string | undefined,
  "type": string | undefined,
  "entries": DraftPaymentEntry[] | undefined,
  "object": DraftPaymentAnchorObject | undefined,
  "request_reference_split_the_bill": RequestInquiryReference[] | undefined,
  "schedule": Schedule | undefined
}


export type DraftPaymentRead = {
  "id": number | undefined,
  "monetary_account_id": number | undefined,
  "user_alias_created": LabelUser | undefined,
  "responses": DraftPaymentResponse[] | undefined,
  "status": string | undefined,
  "type": string | undefined,
  "entries": DraftPaymentEntry[] | undefined,
  "object": DraftPaymentAnchorObject | undefined,
  "request_reference_split_the_bill": RequestInquiryReference[] | undefined,
  "schedule": Schedule | undefined
}


export type DraftPaymentResponse = {
  "status": string | undefined,
  "user_alias_created": LabelUser | undefined
}


export type DraftPaymentUpdate = {
  "id": number | undefined
}


export type ErrorArray = {
  "error_description": string | undefined,
  "error_description_translated": string | undefined
}


export type Event = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "action": string | undefined,
  "user_id": string | undefined,
  "monetary_account_id": string | undefined,
  "object": EventObject | undefined,
  "status": string | undefined,
  "object_data_at_event": EventObject | undefined,
  "is_event_latest_for_object": boolean | undefined,
  "is_event_reassignable": boolean | undefined
}


export type EventListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "action": string | undefined,
  "user_id": string | undefined,
  "monetary_account_id": string | undefined,
  "object": EventObject | undefined,
  "status": string | undefined
}


export type EventObject = {
  "BunqMeTab": BunqMeTab | undefined,
  "BunqMeTabResultResponse": BunqMeTabResultResponse | undefined,
  "BunqMeFundraiserResult": BunqMeFundraiserResult | undefined,
  "Card": Card | undefined,
  "CardDebit": CardDebit | undefined,
  "DraftPayment": DraftPayment | undefined,
  "FeatureAnnouncement": FeatureAnnouncement | undefined,
  "IdealMerchantTransaction": IdealMerchantTransaction | undefined,
  "Invoice": Invoice | undefined,
  "ScheduledPayment": SchedulePayment | undefined,
  "ScheduledPaymentBatch": SchedulePaymentBatch | undefined,
  "ScheduledInstance": ScheduleInstance | undefined,
  "MasterCardAction": MasterCardAction | undefined,
  "BankSwitchServiceNetherlandsIncomingPayment": BankSwitchServiceNetherlandsIncomingPayment | undefined,
  "Payment": Payment | undefined,
  "PaymentBatch": PaymentBatch | undefined,
  "RequestInquiryBatch": RequestInquiryBatch | undefined,
  "RequestInquiry": RequestInquiry | undefined,
  "RequestResponse": RequestResponse | undefined,
  "ShareInviteBankInquiry": ShareInviteMonetaryAccountInquiry | undefined,
  "ShareInviteBankResponse": ShareInviteMonetaryAccountResponse | undefined,
  "SofortMerchantTransaction": SofortMerchantTransaction | undefined,
  "TransferwisePayment": TransferwiseTransfer | undefined
}


export type EventRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "action": string | undefined,
  "user_id": string | undefined,
  "monetary_account_id": string | undefined,
  "object": EventObject | undefined,
  "status": string | undefined
}


export type ExportAnnualOverview = {
  "year": number
}


export type ExportAnnualOverviewContentListing = {

}


export type ExportAnnualOverviewCreate = {
  "id": number | undefined
}


export type ExportAnnualOverviewDelete = {

}


export type ExportAnnualOverviewListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "year": number | undefined,
  "alias_user": LabelUser | undefined
}


export type ExportAnnualOverviewRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "year": number | undefined,
  "alias_user": LabelUser | undefined
}


export type ExportRib = {

}


export type ExportRibContentListing = {

}


export type ExportRibCreate = {
  "id": number | undefined
}


export type ExportRibDelete = {

}


export type ExportRibListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined
}


export type ExportRibRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined
}


export type ExportStatement = {
  "statement_format": string,
  "date_start": string,
  "date_end": string,
  "regional_format": string | undefined,
  "include_attachment": boolean | undefined
}


export type ExportStatementCardContentListing = {

}


export type ExportStatementCardCsv = {
  "date_start": string,
  "date_end": string,
  "regional_format": string
}


export type ExportStatementCardCsvCreate = {
  "Id": BunqId | undefined
}


export type ExportStatementCardCsvDelete = {

}


export type ExportStatementCardCsvListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "date_start": string | undefined,
  "date_end": string | undefined,
  "status": string | undefined,
  "regional_format": string | undefined,
  "card_id": number | undefined
}


export type ExportStatementCardCsvRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "date_start": string | undefined,
  "date_end": string | undefined,
  "status": string | undefined,
  "regional_format": string | undefined,
  "card_id": number | undefined
}


export type ExportStatementCardListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "date_start": string | undefined,
  "date_end": string | undefined,
  "status": string | undefined,
  "regional_format": string | undefined,
  "card_id": number | undefined
}


export type ExportStatementCardPdf = {
  "date_start": string,
  "date_end": string
}


export type ExportStatementCardPdfCreate = {
  "Id": BunqId | undefined
}


export type ExportStatementCardPdfDelete = {

}


export type ExportStatementCardPdfListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "date_start": string | undefined,
  "date_end": string | undefined,
  "status": string | undefined,
  "card_id": number | undefined
}


export type ExportStatementCardPdfRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "date_start": string | undefined,
  "date_end": string | undefined,
  "status": string | undefined,
  "card_id": number | undefined
}


export type ExportStatementCardRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "date_start": string | undefined,
  "date_end": string | undefined,
  "status": string | undefined,
  "regional_format": string | undefined,
  "card_id": number | undefined
}


export type ExportStatementContentListing = {

}


export type ExportStatementCreate = {
  "Id": BunqId | undefined
}


export type ExportStatementDelete = {

}


export type ExportStatementListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "date_start": string | undefined,
  "date_end": string | undefined,
  "status": string | undefined,
  "statement_number": number | undefined,
  "statement_format": string | undefined,
  "regional_format": string | undefined,
  "alias_monetary_account": LabelMonetaryAccount | undefined
}


export type ExportStatementPayment = {

}


export type ExportStatementPaymentContentListing = {

}


export type ExportStatementPaymentCreate = {
  "Id": BunqId | undefined
}


export type ExportStatementPaymentRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "status": string | undefined
}


export type ExportStatementRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "date_start": string | undefined,
  "date_end": string | undefined,
  "status": string | undefined,
  "statement_number": number | undefined,
  "statement_format": string | undefined,
  "regional_format": string | undefined,
  "alias_monetary_account": LabelMonetaryAccount | undefined
}


export type FeatureAnnouncement = {
  "avatar": Avatar | undefined,
  "title": string | undefined,
  "sub_title": string | undefined,
  "type": string | undefined
}


export type FeatureAnnouncementRead = {
  "avatar": Avatar | undefined,
  "title": string | undefined,
  "sub_title": string | undefined,
  "type": string | undefined
}


export type Fulfillment = {
  "type": string | undefined,
  "reason": string | undefined,
  "reason_translated": string | undefined,
  "status": string | undefined,
  "time_mandatory": string | undefined,
  "user_id": number | undefined,
  "all_status_allowed": string[] | undefined
}


export type Geolocation = {
  "latitude": number | undefined,
  "longitude": number | undefined,
  "altitude": number | undefined,
  "radius": number | undefined
}


export type GinmonTransaction = {
  "status": string | undefined,
  "status_description": string | undefined,
  "status_description_translated": string | undefined,
  "amount_billing": Amount | undefined,
  "amount_billing_original": Amount | undefined,
  "isin": string | undefined,
  "external_identifier": string | undefined,
  "label_user": LabelUser | undefined,
  "label_monetary_account": LabelMonetaryAccount | undefined,
  "counter_label_monetary_account": LabelMonetaryAccount | undefined,
  "event_id": number | undefined
}


export type IdealMerchantTransaction = {
  "amount_requested": Amount | undefined,
  "issuer": string | undefined,
  "monetary_account_id": number | undefined,
  "alias": LabelMonetaryAccount | undefined,
  "counterparty_alias": LabelMonetaryAccount | undefined,
  "amount_guaranteed": Amount | undefined,
  "expiration": string | undefined,
  "issuer_name": string | undefined,
  "issuer_authentication_url": string | undefined,
  "purchase_identifier": string | undefined,
  "status": string | undefined,
  "status_timestamp": string | undefined,
  "transaction_identifier": string | undefined
}


export type IdealMerchantTransactionCreate = {
  "Id": BunqId | undefined
}


export type IdealMerchantTransactionListing = {
  "monetary_account_id": number | undefined,
  "alias": LabelMonetaryAccount | undefined,
  "counterparty_alias": LabelMonetaryAccount | undefined,
  "amount_guaranteed": Amount | undefined,
  "amount_requested": Amount | undefined,
  "expiration": string | undefined,
  "issuer": string | undefined,
  "issuer_name": string | undefined,
  "issuer_authentication_url": string | undefined,
  "purchase_identifier": string | undefined,
  "status": string | undefined,
  "status_timestamp": string | undefined,
  "transaction_identifier": string | undefined
}


export type IdealMerchantTransactionRead = {
  "monetary_account_id": number | undefined,
  "alias": LabelMonetaryAccount | undefined,
  "counterparty_alias": LabelMonetaryAccount | undefined,
  "amount_guaranteed": Amount | undefined,
  "amount_requested": Amount | undefined,
  "expiration": string | undefined,
  "issuer": string | undefined,
  "issuer_name": string | undefined,
  "issuer_authentication_url": string | undefined,
  "purchase_identifier": string | undefined,
  "status": string | undefined,
  "status_timestamp": string | undefined,
  "transaction_identifier": string | undefined
}


export type Image = {
  "attachment_public_uuid": string | undefined,
  "content_type": string | undefined,
  "height": number | undefined,
  "width": number | undefined
}


export type InsightEventListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "action": string | undefined,
  "user_id": string | undefined,
  "monetary_account_id": string | undefined,
  "object": EventObject | undefined,
  "status": string | undefined
}


export type InsightListing = {
  "category": string | undefined,
  "category_translated": string | undefined,
  "category_color": string | undefined,
  "category_icon": string | undefined,
  "amount_total": Amount | undefined,
  "number_of_transactions": number | undefined
}


export type InsightPreferenceDateListing = {
  "day_of_month": number | undefined
}


export type Installation = {
  "client_public_key": string
}


export type InstallationCreate = {
  "Id": BunqId | undefined,
  "Token": InstallationToken | undefined,
  "ServerPublicKey": InstallationServerPublicKey | undefined
}


export type InstallationListing = {
  "id": number | undefined
}


export type InstallationRead = {
  "id": number | undefined
}


export type InstallationServerPublicKey = {
  "server_public_key": string | undefined
}


export type InstallationServerPublicKeyListing = {
  "server_public_key": string | undefined
}


export type InstallationToken = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "token": string | undefined
}


export type Invoice = {
  "status": string | undefined,
  "description": string,
  "external_url": string,
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "invoice_date": string | undefined,
  "invoice_number": string | undefined,
  "category": string | undefined,
  "group": InvoiceItemGroup[] | undefined,
  "total_vat_inclusive": Amount | undefined,
  "total_vat_exclusive": Amount | undefined,
  "total_vat": Amount | undefined,
  "alias": LabelMonetaryAccount | undefined,
  "address": Address | undefined,
  "counterparty_alias": LabelMonetaryAccount | undefined,
  "counterparty_address": Address | undefined,
  "chamber_of_commerce_number": string | undefined,
  "vat_number": string | undefined,
  "request_reference_split_the_bill": RequestInquiryReference[] | undefined
}


export type InvoiceByUserListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "invoice_date": string | undefined,
  "invoice_number": string | undefined,
  "status": string | undefined,
  "group": InvoiceItemGroup[] | undefined,
  "total_vat_inclusive": Amount | undefined,
  "total_vat_exclusive": Amount | undefined,
  "total_vat": Amount | undefined,
  "alias": LabelMonetaryAccount | undefined,
  "address": Address | undefined,
  "counterparty_alias": LabelMonetaryAccount | undefined,
  "counterparty_address": Address | undefined,
  "chamber_of_commerce_number": string | undefined,
  "vat_number": string | undefined
}


export type InvoiceByUserRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "invoice_date": string | undefined,
  "invoice_number": string | undefined,
  "status": string | undefined,
  "group": InvoiceItemGroup[] | undefined,
  "total_vat_inclusive": Amount | undefined,
  "total_vat_exclusive": Amount | undefined,
  "total_vat": Amount | undefined,
  "alias": LabelMonetaryAccount | undefined,
  "address": Address | undefined,
  "counterparty_alias": LabelMonetaryAccount | undefined,
  "counterparty_address": Address | undefined,
  "chamber_of_commerce_number": string | undefined,
  "vat_number": string | undefined
}


export type InvoiceExportPdf = {

}


export type InvoiceExportPdfContentListing = {

}


export type InvoiceExportPdfCreate = {
  "Id": BunqId | undefined
}


export type InvoiceExportPdfDelete = {

}


export type InvoiceExportPdfRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "status": string | undefined
}


export type InvoiceExportPdfUpdate = {
  "Id": BunqId | undefined
}


export type InvoiceItem = {
  "id": number | undefined,
  "billing_date": string | undefined,
  "type_description": string | undefined,
  "type_description_translated": string | undefined,
  "unit_vat_exclusive": Amount | undefined,
  "unit_vat_inclusive": Amount | undefined,
  "vat": number | undefined,
  "quantity": number | undefined,
  "total_vat_exclusive": Amount | undefined,
  "total_vat_inclusive": Amount | undefined
}


export type InvoiceItemGroup = {
  "type": string | undefined,
  "type_description": string | undefined,
  "type_description_translated": string | undefined,
  "instance_description": string | undefined,
  "product_vat_exclusive": Amount | undefined,
  "product_vat_inclusive": Amount | undefined,
  "item": InvoiceItem[] | undefined
}


export type InvoiceListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "invoice_date": string | undefined,
  "invoice_number": string | undefined,
  "status": string | undefined,
  "category": string | undefined,
  "group": InvoiceItemGroup[] | undefined,
  "total_vat_inclusive": Amount | undefined,
  "total_vat_exclusive": Amount | undefined,
  "total_vat": Amount | undefined,
  "alias": LabelMonetaryAccount | undefined,
  "address": Address | undefined,
  "counterparty_alias": LabelMonetaryAccount | undefined,
  "counterparty_address": Address | undefined,
  "chamber_of_commerce_number": string | undefined,
  "vat_number": string | undefined,
  "request_reference_split_the_bill": RequestInquiryReference[] | undefined
}


export type InvoiceRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "invoice_date": string | undefined,
  "invoice_number": string | undefined,
  "status": string | undefined,
  "category": string | undefined,
  "group": InvoiceItemGroup[] | undefined,
  "total_vat_inclusive": Amount | undefined,
  "total_vat_exclusive": Amount | undefined,
  "total_vat": Amount | undefined,
  "alias": LabelMonetaryAccount | undefined,
  "address": Address | undefined,
  "counterparty_alias": LabelMonetaryAccount | undefined,
  "counterparty_address": Address | undefined,
  "chamber_of_commerce_number": string | undefined,
  "vat_number": string | undefined,
  "request_reference_split_the_bill": RequestInquiryReference[] | undefined
}


export type Issuer = {
  "bic": string | undefined,
  "name": string | undefined
}


export type LabelCard = {
  "uuid": string | undefined,
  "type": string | undefined,
  "second_line": string | undefined,
  "expiry_date": string | undefined,
  "status": string | undefined,
  "label_user": LabelUser | undefined
}


export type LabelMonetaryAccount = {
  "iban": string | undefined,
  "display_name": string | undefined,
  "avatar": Avatar | undefined,
  "label_user": LabelUser | undefined,
  "country": string | undefined,
  "bunq_me": Pointer | undefined,
  "is_light": boolean | undefined,
  "swift_bic": string | undefined,
  "swift_account_number": string | undefined,
  "transferwise_account_number": string | undefined,
  "transferwise_bank_code": string | undefined,
  "merchant_category_code": string | undefined
}


export type LabelUser = {
  "uuid": string | undefined,
  "display_name": string | undefined,
  "country": string | undefined,
  "avatar": Avatar | undefined,
  "public_nick_name": string | undefined
}


export type MasterCardAction = {
  "id": number | undefined,
  "monetary_account_id": number | undefined,
  "card_id": number | undefined,
  "amount_local": Amount | undefined,
  "amount_converted": Amount | undefined,
  "amount_billing": Amount | undefined,
  "amount_original_local": Amount | undefined,
  "amount_original_billing": Amount | undefined,
  "amount_fee": Amount | undefined,
  "card_authorisation_id_response": string | undefined,
  "decision": string | undefined,
  "payment_status": string | undefined,
  "decision_description": string | undefined,
  "decision_description_translated": string | undefined,
  "decision_together_url": string | undefined,
  "description": string | undefined,
  "authorisation_status": string | undefined,
  "authorisation_type": string | undefined,
  "pan_entry_mode_user": string | undefined,
  "settlement_status": string | undefined,
  "clearing_status": string | undefined,
  "maturity_date": string | undefined,
  "city": string | undefined,
  "alias": LabelMonetaryAccount | undefined,
  "counterparty_alias": LabelMonetaryAccount | undefined,
  "label_card": LabelCard | undefined,
  "merchant_id": string | undefined,
  "token_status": string | undefined,
  "reservation_expiry_time": string | undefined,
  "clearing_expiry_time": string | undefined,
  "applied_limit": string | undefined,
  "secure_code_id": number | undefined,
  "wallet_provider_id": string | undefined,
  "request_reference_split_the_bill": RequestInquiryReference[] | undefined,
  "card_tokenization_event": Event | undefined,
  "all_mastercard_action_refund": MasterCardActionRefund[] | undefined,
  "pos_card_presence": string | undefined,
  "pos_card_holder_presence": string | undefined,
  "eligible_whitelist_id": number | undefined,
  "cashback_payout_item": CashbackPayoutItem | undefined,
  "point_mutation": PointMutation | undefined,
  "blacklist": UserBlocklistMasterCardMerchant | undefined,
  "blocklist": UserBlocklistMasterCardMerchant | undefined,
  "additional_authentication_status": string | undefined,
  "pin_status": string | undefined,
  "mastercard_action_report": MasterCardActionReport | undefined,
  "merchant_category_code": string | undefined,
  "company_employee_card_receipt": CompanyEmployeeCardReceipt | undefined
}


export type MasterCardActionListing = {
  "id": number | undefined,
  "monetary_account_id": number | undefined,
  "card_id": number | undefined,
  "amount_local": Amount | undefined,
  "amount_converted": Amount | undefined,
  "amount_billing": Amount | undefined,
  "amount_original_local": Amount | undefined,
  "amount_original_billing": Amount | undefined,
  "amount_fee": Amount | undefined,
  "card_authorisation_id_response": string | undefined,
  "decision": string | undefined,
  "payment_status": string | undefined,
  "decision_description": string | undefined,
  "decision_description_translated": string | undefined,
  "decision_together_url": string | undefined,
  "description": string | undefined,
  "authorisation_status": string | undefined,
  "authorisation_type": string | undefined,
  "pan_entry_mode_user": string | undefined,
  "settlement_status": string | undefined,
  "clearing_status": string | undefined,
  "maturity_date": string | undefined,
  "city": string | undefined,
  "alias": LabelMonetaryAccount | undefined,
  "counterparty_alias": LabelMonetaryAccount | undefined,
  "label_card": LabelCard | undefined,
  "merchant_id": string | undefined,
  "token_status": string | undefined,
  "reservation_expiry_time": string | undefined,
  "clearing_expiry_time": string | undefined,
  "applied_limit": string | undefined,
  "secure_code_id": number | undefined,
  "wallet_provider_id": string | undefined,
  "request_reference_split_the_bill": RequestInquiryReference[] | undefined,
  "card_tokenization_event": Event | undefined,
  "all_mastercard_action_refund": MasterCardActionRefund[] | undefined,
  "pos_card_presence": string | undefined,
  "pos_card_holder_presence": string | undefined,
  "eligible_whitelist_id": number | undefined,
  "cashback_payout_item": CashbackPayoutItem | undefined,
  "point_mutation": PointMutation | undefined,
  "blacklist": UserBlocklistMasterCardMerchant | undefined,
  "blocklist": UserBlocklistMasterCardMerchant | undefined,
  "additional_authentication_status": string | undefined,
  "pin_status": string | undefined,
  "mastercard_action_report": MasterCardActionReport | undefined,
  "merchant_category_code": string | undefined,
  "company_employee_card_receipt": CompanyEmployeeCardReceipt | undefined
}


export type MasterCardActionRead = {
  "id": number | undefined,
  "monetary_account_id": number | undefined,
  "card_id": number | undefined,
  "amount_local": Amount | undefined,
  "amount_converted": Amount | undefined,
  "amount_billing": Amount | undefined,
  "amount_original_local": Amount | undefined,
  "amount_original_billing": Amount | undefined,
  "amount_fee": Amount | undefined,
  "card_authorisation_id_response": string | undefined,
  "decision": string | undefined,
  "payment_status": string | undefined,
  "decision_description": string | undefined,
  "decision_description_translated": string | undefined,
  "decision_together_url": string | undefined,
  "description": string | undefined,
  "authorisation_status": string | undefined,
  "authorisation_type": string | undefined,
  "pan_entry_mode_user": string | undefined,
  "settlement_status": string | undefined,
  "clearing_status": string | undefined,
  "maturity_date": string | undefined,
  "city": string | undefined,
  "alias": LabelMonetaryAccount | undefined,
  "counterparty_alias": LabelMonetaryAccount | undefined,
  "label_card": LabelCard | undefined,
  "merchant_id": string | undefined,
  "token_status": string | undefined,
  "reservation_expiry_time": string | undefined,
  "clearing_expiry_time": string | undefined,
  "applied_limit": string | undefined,
  "secure_code_id": number | undefined,
  "wallet_provider_id": string | undefined,
  "request_reference_split_the_bill": RequestInquiryReference[] | undefined,
  "card_tokenization_event": Event | undefined,
  "all_mastercard_action_refund": MasterCardActionRefund[] | undefined,
  "pos_card_presence": string | undefined,
  "pos_card_holder_presence": string | undefined,
  "eligible_whitelist_id": number | undefined,
  "cashback_payout_item": CashbackPayoutItem | undefined,
  "point_mutation": PointMutation | undefined,
  "blacklist": UserBlocklistMasterCardMerchant | undefined,
  "blocklist": UserBlocklistMasterCardMerchant | undefined,
  "additional_authentication_status": string | undefined,
  "pin_status": string | undefined,
  "mastercard_action_report": MasterCardActionReport | undefined,
  "merchant_category_code": string | undefined,
  "company_employee_card_receipt": CompanyEmployeeCardReceipt | undefined
}


export type MasterCardActionReference = {
  "event_id": number | undefined
}


export type MasterCardActionRefund = {
  "type": string | undefined,
  "sub_type": string | undefined,
  "amount": Amount | undefined,
  "category": string | undefined,
  "reason": string | undefined,
  "comment": string | undefined,
  "attachment": AttachmentMasterCardActionRefund[] | undefined,
  "terms_and_conditions": string | undefined,
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "status": string | undefined,
  "reference_mastercard_action_event": MasterCardActionReference[] | undefined,
  "mastercard_action_id": number | undefined,
  "alias": LabelMonetaryAccount | undefined,
  "counterparty_alias": LabelMonetaryAccount | undefined,
  "description": string | undefined,
  "label_card": LabelCard | undefined,
  "time_refund": string | undefined,
  "additional_information": AdditionalInformation | undefined,
  "status_description": string | undefined,
  "status_description_translated": string | undefined,
  "status_together_url": string | undefined
}


export type MasterCardActionReport = {
  "mastercard_action_id": number | undefined,
  "type": string | undefined,
  "status": string | undefined,
  "merchant_id": string | undefined,
  "merchant_name": string | undefined,
  "counterparty_alias": LabelMonetaryAccount | undefined
}


export type MasterCardIdentityCheckChallengeRequestUser = {
  "status": string
}


export type MasterCardIdentityCheckChallengeRequestUserRead = {
  "amount": string | undefined,
  "expiry_time": string | undefined,
  "description": string | undefined,
  "status": string | undefined,
  "decision_description": string | undefined,
  "decision_description_translated": string | undefined,
  "url_merchant_app": string | undefined,
  "counterparty_alias": LabelMonetaryAccount | undefined,
  "event_id": number | undefined,
  "card_id": number | undefined
}


export type MasterCardIdentityCheckChallengeRequestUserUpdate = {
  "Id": BunqId | undefined
}


export type MasterCardPaymentListing = {

}


export type MonetaryAccount = {
  "alias": Pointer[] | undefined,
  "balance": Amount | undefined,
  "monetary_account_profile": MonetaryAccountProfile[] | undefined,
  "setting": MonetaryAccountSetting | undefined,
  "budget": MonetaryAccountBudget[] | undefined,
  "reason": string | undefined,
  "reason_description": string | undefined,
  "share": ShareInviteMonetaryAccountResponse | undefined,
  "all_auto_save_id": BunqId[] | undefined,
  "fulfillments": Fulfillment[] | undefined,
  "relation_user": RelationUser | undefined,
  "all_co_owner": CoOwner[] | undefined,
  "co_owner_invite": CoOwnerInviteResponse | undefined,
  "open_banking_account": OpenBankingAccount | undefined,
  "birdee_investment_portfolio": BirdeeInvestmentPortfolio | undefined,
  "MonetaryAccountLight": MonetaryAccountLight | undefined,
  "MonetaryAccountBank": MonetaryAccountBank | undefined,
  "MonetaryAccountExternal": MonetaryAccountExternal | undefined,
  "MonetaryAccountInvestment": MonetaryAccountInvestment | undefined,
  "MonetaryAccountJoint": MonetaryAccountJoint | undefined,
  "MonetaryAccountSavings": MonetaryAccountSavings | undefined,
  "MonetaryAccountSwitchService": MonetaryAccountSwitchService | undefined,
  "MonetaryAccountExternalSavings": MonetaryAccountExternalSavings | undefined,
  "MonetaryAccountCard": MonetaryAccountCard | undefined
}


export type MonetaryAccountBank = {
  "currency": string | undefined,
  "description": string | undefined,
  "daily_limit": Amount | undefined,
  "avatar_uuid": string | undefined,
  "status": string | undefined,
  "sub_status": string | undefined,
  "reason": string | undefined,
  "reason_description": string | undefined,
  "display_name": string | undefined,
  "setting": MonetaryAccountSetting | undefined,
  "country_iban": string | undefined,
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "avatar": Avatar | undefined,
  "overdraft_limit": Amount | undefined,
  "balance": Amount | undefined,
  "alias": Pointer[] | undefined,
  "public_uuid": string | undefined,
  "user_id": number | undefined,
  "monetary_account_profile": MonetaryAccountProfile | undefined,
  "all_auto_save_id": BunqId[] | undefined
}


export type MonetaryAccountBankCreate = {
  "Id": BunqId | undefined
}


export type MonetaryAccountBankListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "avatar": Avatar | undefined,
  "currency": string | undefined,
  "description": string | undefined,
  "daily_limit": Amount | undefined,
  "overdraft_limit": Amount | undefined,
  "balance": Amount | undefined,
  "alias": Pointer[] | undefined,
  "public_uuid": string | undefined,
  "status": string | undefined,
  "sub_status": string | undefined,
  "reason": string | undefined,
  "reason_description": string | undefined,
  "user_id": number | undefined,
  "monetary_account_profile": MonetaryAccountProfile | undefined,
  "display_name": string | undefined,
  "setting": MonetaryAccountSetting | undefined,
  "all_auto_save_id": BunqId[] | undefined
}


export type MonetaryAccountBankRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "avatar": Avatar | undefined,
  "currency": string | undefined,
  "description": string | undefined,
  "daily_limit": Amount | undefined,
  "overdraft_limit": Amount | undefined,
  "balance": Amount | undefined,
  "alias": Pointer[] | undefined,
  "public_uuid": string | undefined,
  "status": string | undefined,
  "sub_status": string | undefined,
  "reason": string | undefined,
  "reason_description": string | undefined,
  "user_id": number | undefined,
  "monetary_account_profile": MonetaryAccountProfile | undefined,
  "display_name": string | undefined,
  "setting": MonetaryAccountSetting | undefined,
  "all_auto_save_id": BunqId[] | undefined
}


export type MonetaryAccountBankUpdate = {
  "Id": BunqId | undefined
}


export type MonetaryAccountBudget = {
  "all_category": string[],
  "amount": Amount,
  "recurrence_type": string,
  "monetary_account_source_funding_id": number,
  "payment_day_of_month": number | undefined
}


export type MonetaryAccountCard = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "currency": string | undefined,
  "description": string | undefined,
  "daily_limit": Amount | undefined,
  "overdraft_limit": Amount | undefined,
  "balance": Amount | undefined,
  "balance_real": Amount | undefined,
  "alias": Pointer[] | undefined,
  "public_uuid": string | undefined,
  "status": string | undefined,
  "sub_status": string | undefined,
  "user_id": number | undefined
}


export type MonetaryAccountCardListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "currency": string | undefined,
  "description": string | undefined,
  "daily_limit": Amount | undefined,
  "overdraft_limit": Amount | undefined,
  "balance": Amount | undefined,
  "balance_real": Amount | undefined,
  "alias": Pointer[] | undefined,
  "public_uuid": string | undefined,
  "status": string | undefined,
  "sub_status": string | undefined,
  "user_id": number | undefined
}


export type MonetaryAccountCardRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "currency": string | undefined,
  "description": string | undefined,
  "daily_limit": Amount | undefined,
  "overdraft_limit": Amount | undefined,
  "balance": Amount | undefined,
  "balance_real": Amount | undefined,
  "alias": Pointer[] | undefined,
  "public_uuid": string | undefined,
  "status": string | undefined,
  "sub_status": string | undefined,
  "user_id": number | undefined
}


export type MonetaryAccountCardUpdate = {
  "Id": BunqId | undefined
}


export type MonetaryAccountExternal = {
  "currency": string | undefined,
  "service": string | undefined,
  "description": string | undefined,
  "daily_limit": Amount | undefined,
  "avatar_uuid": string | undefined,
  "status": string | undefined,
  "sub_status": string | undefined,
  "reason": string | undefined,
  "reason_description": string | undefined,
  "display_name": string | undefined,
  "setting": MonetaryAccountSetting | undefined,
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "avatar": Avatar | undefined,
  "overdraft_limit": Amount | undefined,
  "balance": Amount | undefined,
  "alias": Pointer[] | undefined,
  "public_uuid": string | undefined,
  "user_id": number | undefined,
  "monetary_account_profile": MonetaryAccountProfile | undefined,
  "all_auto_save_id": BunqId[] | undefined,
  "open_banking_account": OpenBankingAccount | undefined
}


export type MonetaryAccountExternalCreate = {
  "Id": BunqId | undefined
}


export type MonetaryAccountExternalListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "avatar": Avatar | undefined,
  "currency": string | undefined,
  "description": string | undefined,
  "daily_limit": Amount | undefined,
  "overdraft_limit": Amount | undefined,
  "balance": Amount | undefined,
  "alias": Pointer[] | undefined,
  "public_uuid": string | undefined,
  "status": string | undefined,
  "sub_status": string | undefined,
  "reason": string | undefined,
  "reason_description": string | undefined,
  "user_id": number | undefined,
  "monetary_account_profile": MonetaryAccountProfile | undefined,
  "display_name": string | undefined,
  "setting": MonetaryAccountSetting | undefined,
  "all_auto_save_id": BunqId[] | undefined,
  "service": string | undefined,
  "open_banking_account": OpenBankingAccount | undefined
}


export type MonetaryAccountExternalRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "avatar": Avatar | undefined,
  "currency": string | undefined,
  "description": string | undefined,
  "daily_limit": Amount | undefined,
  "overdraft_limit": Amount | undefined,
  "balance": Amount | undefined,
  "alias": Pointer[] | undefined,
  "public_uuid": string | undefined,
  "status": string | undefined,
  "sub_status": string | undefined,
  "reason": string | undefined,
  "reason_description": string | undefined,
  "user_id": number | undefined,
  "monetary_account_profile": MonetaryAccountProfile | undefined,
  "display_name": string | undefined,
  "setting": MonetaryAccountSetting | undefined,
  "all_auto_save_id": BunqId[] | undefined,
  "service": string | undefined,
  "open_banking_account": OpenBankingAccount | undefined
}


export type MonetaryAccountExternalSavings = {
  "currency": string | undefined,
  "service": string,
  "description": string | undefined,
  "daily_limit": Amount | undefined,
  "avatar_uuid": string | undefined,
  "status": string | undefined,
  "sub_status": string | undefined,
  "reason": string | undefined,
  "reason_description": string | undefined,
  "display_name": string | undefined,
  "setting": MonetaryAccountSetting | undefined,
  "savings_goal": Amount | undefined,
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "avatar": Avatar | undefined,
  "balance": Amount | undefined,
  "alias": Pointer[] | undefined,
  "public_uuid": string | undefined,
  "user_id": number | undefined,
  "monetary_account_profile": MonetaryAccountProfile | undefined,
  "all_auto_save_id": BunqId[] | undefined,
  "savings_goal_progress": number | undefined,
  "number_of_payment_remaining": string | undefined
}


export type MonetaryAccountExternalSavingsCreate = {
  "Id": BunqId | undefined
}


export type MonetaryAccountExternalSavingsListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "avatar": Avatar | undefined,
  "currency": string | undefined,
  "description": string | undefined,
  "daily_limit": Amount | undefined,
  "balance": Amount | undefined,
  "alias": Pointer[] | undefined,
  "public_uuid": string | undefined,
  "status": string | undefined,
  "sub_status": string | undefined,
  "reason": string | undefined,
  "reason_description": string | undefined,
  "user_id": number | undefined,
  "monetary_account_profile": MonetaryAccountProfile | undefined,
  "display_name": string | undefined,
  "setting": MonetaryAccountSetting | undefined,
  "all_auto_save_id": BunqId[] | undefined,
  "savings_goal": Amount | undefined,
  "savings_goal_progress": number | undefined,
  "number_of_payment_remaining": string | undefined
}


export type MonetaryAccountExternalSavingsRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "avatar": Avatar | undefined,
  "currency": string | undefined,
  "description": string | undefined,
  "daily_limit": Amount | undefined,
  "balance": Amount | undefined,
  "alias": Pointer[] | undefined,
  "public_uuid": string | undefined,
  "status": string | undefined,
  "sub_status": string | undefined,
  "reason": string | undefined,
  "reason_description": string | undefined,
  "user_id": number | undefined,
  "monetary_account_profile": MonetaryAccountProfile | undefined,
  "display_name": string | undefined,
  "setting": MonetaryAccountSetting | undefined,
  "all_auto_save_id": BunqId[] | undefined,
  "savings_goal": Amount | undefined,
  "savings_goal_progress": number | undefined,
  "number_of_payment_remaining": string | undefined
}


export type MonetaryAccountExternalSavingsUpdate = {
  "Id": BunqId | undefined
}


export type MonetaryAccountExternalUpdate = {
  "Id": BunqId | undefined
}


export type MonetaryAccountInvestment = {
  "currency": string | undefined,
  "provider": string,
  "description": string | undefined,
  "daily_limit": Amount | undefined,
  "avatar_uuid": string | undefined,
  "status": string | undefined,
  "sub_status": string | undefined,
  "reason": string | undefined,
  "reason_description": string | undefined,
  "display_name": string | undefined,
  "setting": MonetaryAccountSetting | undefined,
  "birdee_investment_portfolio": BirdeeInvestmentPortfolio | undefined,
  "monetary_account_deposit_initial_id": number | undefined,
  "amount_deposit_initial": Amount | undefined,
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "avatar": Avatar | undefined,
  "balance": Amount | undefined,
  "alias": Pointer[] | undefined,
  "public_uuid": string | undefined,
  "user_id": number | undefined,
  "monetary_account_profile": MonetaryAccountProfile | undefined,
  "all_auto_save_id": BunqId[] | undefined
}


export type MonetaryAccountJoint = {
  "currency": string | undefined,
  "description": string | undefined,
  "daily_limit": Amount | undefined,
  "overdraft_limit": Amount | undefined,
  "alias": Pointer[] | undefined,
  "avatar_uuid": string | undefined,
  "status": string | undefined,
  "sub_status": string | undefined,
  "reason": string | undefined,
  "reason_description": string | undefined,
  "all_co_owner": CoOwner[] | undefined,
  "setting": MonetaryAccountSetting | undefined,
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "avatar": Avatar | undefined,
  "balance": Amount | undefined,
  "public_uuid": string | undefined,
  "user_id": number | undefined,
  "monetary_account_profile": MonetaryAccountProfile | undefined,
  "all_auto_save_id": BunqId[] | undefined
}


export type MonetaryAccountJointCreate = {
  "Id": BunqId | undefined
}


export type MonetaryAccountJointListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "avatar": Avatar | undefined,
  "currency": string | undefined,
  "description": string | undefined,
  "daily_limit": Amount | undefined,
  "overdraft_limit": Amount | undefined,
  "balance": Amount | undefined,
  "alias": Pointer[] | undefined,
  "public_uuid": string | undefined,
  "status": string | undefined,
  "sub_status": string | undefined,
  "reason": string | undefined,
  "reason_description": string | undefined,
  "all_co_owner": CoOwner[] | undefined,
  "user_id": number | undefined,
  "monetary_account_profile": MonetaryAccountProfile | undefined,
  "setting": MonetaryAccountSetting | undefined,
  "all_auto_save_id": BunqId[] | undefined
}


export type MonetaryAccountJointRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "avatar": Avatar | undefined,
  "currency": string | undefined,
  "description": string | undefined,
  "daily_limit": Amount | undefined,
  "overdraft_limit": Amount | undefined,
  "balance": Amount | undefined,
  "alias": Pointer[] | undefined,
  "public_uuid": string | undefined,
  "status": string | undefined,
  "sub_status": string | undefined,
  "reason": string | undefined,
  "reason_description": string | undefined,
  "all_co_owner": CoOwner[] | undefined,
  "user_id": number | undefined,
  "monetary_account_profile": MonetaryAccountProfile | undefined,
  "setting": MonetaryAccountSetting | undefined,
  "all_auto_save_id": BunqId[] | undefined
}


export type MonetaryAccountJointUpdate = {
  "Id": BunqId | undefined
}


export type MonetaryAccountLight = {
  "currency": string | undefined,
  "description": string | undefined,
  "daily_limit": Amount | undefined,
  "avatar_uuid": string | undefined,
  "status": string | undefined,
  "sub_status": string | undefined,
  "reason": string | undefined,
  "reason_description": string | undefined,
  "setting": MonetaryAccountSetting | undefined,
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "avatar": Avatar | undefined,
  "balance": Amount | undefined,
  "alias": Pointer[] | undefined,
  "public_uuid": string | undefined,
  "user_id": number | undefined,
  "balance_maximum": Amount | undefined,
  "budget_month_used": Amount | undefined,
  "budget_month_maximum": Amount | undefined,
  "budget_year_used": Amount | undefined,
  "budget_year_maximum": Amount | undefined,
  "budget_withdrawal_year_used": Amount | undefined,
  "budget_withdrawal_year_maximum": Amount | undefined
}


export type MonetaryAccountListing = {
  "MonetaryAccountLight": MonetaryAccountLight | undefined,
  "MonetaryAccountBank": MonetaryAccountBank | undefined,
  "MonetaryAccountExternal": MonetaryAccountExternal | undefined,
  "MonetaryAccountInvestment": MonetaryAccountInvestment | undefined,
  "MonetaryAccountJoint": MonetaryAccountJoint | undefined,
  "MonetaryAccountSavings": MonetaryAccountSavings | undefined,
  "MonetaryAccountSwitchService": MonetaryAccountSwitchService | undefined,
  "MonetaryAccountExternalSavings": MonetaryAccountExternalSavings | undefined,
  "MonetaryAccountCard": MonetaryAccountCard | undefined
}


export type MonetaryAccountProfile = {
  "profile_fill": MonetaryAccountProfileFill | undefined,
  "profile_drain": MonetaryAccountProfileDrain | undefined
}


export type MonetaryAccountProfileDrain = {
  "status": string | undefined,
  "balance_preferred": Amount | undefined,
  "balance_threshold_high": Amount | undefined,
  "savings_account_alias": LabelMonetaryAccount | undefined
}


export type MonetaryAccountProfileFill = {
  "status": string | undefined,
  "balance_preferred": Amount | undefined,
  "balance_threshold_low": Amount | undefined,
  "issuer": Issuer | undefined
}


export type MonetaryAccountRead = {
  "MonetaryAccountLight": MonetaryAccountLight | undefined,
  "MonetaryAccountBank": MonetaryAccountBank | undefined,
  "MonetaryAccountExternal": MonetaryAccountExternal | undefined,
  "MonetaryAccountInvestment": MonetaryAccountInvestment | undefined,
  "MonetaryAccountJoint": MonetaryAccountJoint | undefined,
  "MonetaryAccountSavings": MonetaryAccountSavings | undefined,
  "MonetaryAccountSwitchService": MonetaryAccountSwitchService | undefined,
  "MonetaryAccountExternalSavings": MonetaryAccountExternalSavings | undefined,
  "MonetaryAccountCard": MonetaryAccountCard | undefined
}


export type MonetaryAccountSavings = {
  "currency": string | undefined,
  "description": string | undefined,
  "daily_limit": Amount | undefined,
  "avatar_uuid": string | undefined,
  "status": string | undefined,
  "sub_status": string | undefined,
  "reason": string | undefined,
  "reason_description": string | undefined,
  "all_co_owner": CoOwner[] | undefined,
  "setting": MonetaryAccountSetting | undefined,
  "savings_goal": Amount | undefined,
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "avatar": Avatar | undefined,
  "balance": Amount | undefined,
  "alias": Pointer[] | undefined,
  "public_uuid": string | undefined,
  "user_id": number | undefined,
  "monetary_account_profile": MonetaryAccountProfile | undefined,
  "savings_goal_progress": number | undefined,
  "number_of_payment_remaining": string | undefined,
  "all_auto_save_id": BunqId[] | undefined
}


export type MonetaryAccountSavingsCreate = {
  "Id": BunqId | undefined
}


export type MonetaryAccountSavingsListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "avatar": Avatar | undefined,
  "currency": string | undefined,
  "description": string | undefined,
  "daily_limit": Amount | undefined,
  "balance": Amount | undefined,
  "alias": Pointer[] | undefined,
  "public_uuid": string | undefined,
  "status": string | undefined,
  "sub_status": string | undefined,
  "reason": string | undefined,
  "reason_description": string | undefined,
  "all_co_owner": CoOwner[] | undefined,
  "user_id": number | undefined,
  "monetary_account_profile": MonetaryAccountProfile | undefined,
  "setting": MonetaryAccountSetting | undefined,
  "savings_goal": Amount | undefined,
  "savings_goal_progress": number | undefined,
  "number_of_payment_remaining": string | undefined,
  "all_auto_save_id": BunqId[] | undefined
}


export type MonetaryAccountSavingsRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "avatar": Avatar | undefined,
  "currency": string | undefined,
  "description": string | undefined,
  "daily_limit": Amount | undefined,
  "balance": Amount | undefined,
  "alias": Pointer[] | undefined,
  "public_uuid": string | undefined,
  "status": string | undefined,
  "sub_status": string | undefined,
  "reason": string | undefined,
  "reason_description": string | undefined,
  "all_co_owner": CoOwner[] | undefined,
  "user_id": number | undefined,
  "monetary_account_profile": MonetaryAccountProfile | undefined,
  "setting": MonetaryAccountSetting | undefined,
  "savings_goal": Amount | undefined,
  "savings_goal_progress": number | undefined,
  "number_of_payment_remaining": string | undefined,
  "all_auto_save_id": BunqId[] | undefined
}


export type MonetaryAccountSavingsUpdate = {
  "Id": BunqId | undefined
}


export type MonetaryAccountSetting = {
  "color": string | undefined,
  "icon": string | undefined,
  "default_avatar_status": string | undefined,
  "restriction_chat": string | undefined,
  "sdd_expiration_action": string | undefined
}


export type MonetaryAccountSwitchService = {
  "id": number | undefined,
  "created": string | undefined,
  "description": string | undefined,
  "status": string | undefined,
  "sub_status": string | undefined
}


export type NoteAttachmentAdyenCardTransaction = {
  "description": string | undefined,
  "attachment_id": number
}


export type NoteAttachmentAdyenCardTransactionCreate = {
  "Id": BunqId | undefined
}


export type NoteAttachmentAdyenCardTransactionDelete = {

}


export type NoteAttachmentAdyenCardTransactionListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "description": string | undefined,
  "attachment": AttachmentMonetaryAccountPayment[] | undefined
}


export type NoteAttachmentAdyenCardTransactionRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "description": string | undefined,
  "attachment": AttachmentMonetaryAccountPayment[] | undefined
}


export type NoteAttachmentAdyenCardTransactionUpdate = {
  "Id": BunqId | undefined
}


export type NoteAttachmentBankSwitchServiceNetherlandsIncomingPayment = {
  "description": string | undefined,
  "attachment_id": number
}


export type NoteAttachmentBankSwitchServiceNetherlandsIncomingPaymentCreate = {
  "Id": BunqId | undefined
}


export type NoteAttachmentBankSwitchServiceNetherlandsIncomingPaymentDelete = {

}


export type NoteAttachmentBankSwitchServiceNetherlandsIncomingPaymentListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "description": string | undefined,
  "attachment": AttachmentMonetaryAccountPayment[] | undefined
}


export type NoteAttachmentBankSwitchServiceNetherlandsIncomingPaymentRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "description": string | undefined,
  "attachment": AttachmentMonetaryAccountPayment[] | undefined
}


export type NoteAttachmentBankSwitchServiceNetherlandsIncomingPaymentUpdate = {
  "Id": BunqId | undefined
}


export type NoteAttachmentBunqMeFundraiserResult = {
  "description": string | undefined,
  "attachment_id": number
}


export type NoteAttachmentBunqMeFundraiserResultCreate = {
  "Id": BunqId | undefined
}


export type NoteAttachmentBunqMeFundraiserResultDelete = {

}


export type NoteAttachmentBunqMeFundraiserResultListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "description": string | undefined,
  "attachment": AttachmentMonetaryAccountPayment[] | undefined
}


export type NoteAttachmentBunqMeFundraiserResultRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "description": string | undefined,
  "attachment": AttachmentMonetaryAccountPayment[] | undefined
}


export type NoteAttachmentBunqMeFundraiserResultUpdate = {
  "Id": BunqId | undefined
}


export type NoteAttachmentDraftPayment = {
  "description": string | undefined,
  "attachment_id": number
}


export type NoteAttachmentDraftPaymentCreate = {
  "Id": BunqId | undefined
}


export type NoteAttachmentDraftPaymentDelete = {

}


export type NoteAttachmentDraftPaymentListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "description": string | undefined,
  "attachment": AttachmentMonetaryAccountPayment[] | undefined
}


export type NoteAttachmentDraftPaymentRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "description": string | undefined,
  "attachment": AttachmentMonetaryAccountPayment[] | undefined
}


export type NoteAttachmentDraftPaymentUpdate = {
  "Id": BunqId | undefined
}


export type NoteAttachmentIdealMerchantTransaction = {
  "description": string | undefined,
  "attachment_id": number
}


export type NoteAttachmentIdealMerchantTransactionCreate = {
  "Id": BunqId | undefined
}


export type NoteAttachmentIdealMerchantTransactionDelete = {

}


export type NoteAttachmentIdealMerchantTransactionListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "description": string | undefined,
  "attachment": AttachmentMonetaryAccountPayment[] | undefined
}


export type NoteAttachmentIdealMerchantTransactionRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "description": string | undefined,
  "attachment": AttachmentMonetaryAccountPayment[] | undefined
}


export type NoteAttachmentIdealMerchantTransactionUpdate = {
  "Id": BunqId | undefined
}


export type NoteAttachmentMasterCardAction = {
  "description": string,
  "attachment_id": number
}


export type NoteAttachmentMasterCardActionCreate = {
  "Id": BunqId | undefined
}


export type NoteAttachmentMasterCardActionDelete = {

}


export type NoteAttachmentMasterCardActionListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "description": string | undefined,
  "attachment": AttachmentMonetaryAccountPayment[] | undefined
}


export type NoteAttachmentMasterCardActionRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "description": string | undefined,
  "attachment": AttachmentMonetaryAccountPayment[] | undefined
}


export type NoteAttachmentMasterCardActionUpdate = {
  "Id": BunqId | undefined
}


export type NoteAttachmentOpenBankingMerchantTransaction = {
  "description": string | undefined,
  "attachment_id": number
}


export type NoteAttachmentOpenBankingMerchantTransactionCreate = {
  "Id": BunqId | undefined
}


export type NoteAttachmentOpenBankingMerchantTransactionDelete = {

}


export type NoteAttachmentOpenBankingMerchantTransactionListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "description": string | undefined,
  "attachment": AttachmentMonetaryAccountPayment[] | undefined
}


export type NoteAttachmentOpenBankingMerchantTransactionRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "description": string | undefined,
  "attachment": AttachmentMonetaryAccountPayment[] | undefined
}


export type NoteAttachmentOpenBankingMerchantTransactionUpdate = {
  "Id": BunqId | undefined
}


export type NoteAttachmentPayment = {
  "description": string | undefined,
  "attachment_id": number
}


export type NoteAttachmentPaymentBatch = {
  "description": string | undefined,
  "attachment_id": number
}


export type NoteAttachmentPaymentBatchCreate = {
  "Id": BunqId | undefined
}


export type NoteAttachmentPaymentBatchDelete = {

}


export type NoteAttachmentPaymentBatchListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "description": string | undefined,
  "attachment": AttachmentMonetaryAccountPayment[] | undefined
}


export type NoteAttachmentPaymentBatchRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "description": string | undefined,
  "attachment": AttachmentMonetaryAccountPayment[] | undefined
}


export type NoteAttachmentPaymentBatchUpdate = {
  "Id": BunqId | undefined
}


export type NoteAttachmentPaymentCreate = {
  "Id": BunqId | undefined
}


export type NoteAttachmentPaymentDelayed = {
  "description": string | undefined,
  "attachment_id": number
}


export type NoteAttachmentPaymentDelayedCreate = {
  "Id": BunqId | undefined
}


export type NoteAttachmentPaymentDelayedDelete = {

}


export type NoteAttachmentPaymentDelayedListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "description": string | undefined,
  "attachment": AttachmentMonetaryAccountPayment[] | undefined
}


export type NoteAttachmentPaymentDelayedRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "description": string | undefined,
  "attachment": AttachmentMonetaryAccountPayment[] | undefined
}


export type NoteAttachmentPaymentDelayedUpdate = {
  "Id": BunqId | undefined
}


export type NoteAttachmentPaymentDelete = {

}


export type NoteAttachmentPaymentListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "description": string | undefined,
  "attachment": AttachmentMonetaryAccountPayment[] | undefined
}


export type NoteAttachmentPaymentRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "description": string | undefined,
  "attachment": AttachmentMonetaryAccountPayment[] | undefined
}


export type NoteAttachmentPaymentUpdate = {
  "Id": BunqId | undefined
}


export type NoteAttachmentRequestInquiry = {
  "description": string | undefined,
  "attachment_id": number
}


export type NoteAttachmentRequestInquiryBatch = {
  "description": string | undefined,
  "attachment_id": number
}


export type NoteAttachmentRequestInquiryBatchCreate = {
  "Id": BunqId | undefined
}


export type NoteAttachmentRequestInquiryBatchDelete = {

}


export type NoteAttachmentRequestInquiryBatchListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "description": string | undefined,
  "attachment": AttachmentMonetaryAccountPayment[] | undefined
}


export type NoteAttachmentRequestInquiryBatchRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "description": string | undefined,
  "attachment": AttachmentMonetaryAccountPayment[] | undefined
}


export type NoteAttachmentRequestInquiryBatchUpdate = {
  "Id": BunqId | undefined
}


export type NoteAttachmentRequestInquiryCreate = {
  "Id": BunqId | undefined
}


export type NoteAttachmentRequestInquiryDelete = {

}


export type NoteAttachmentRequestInquiryListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "description": string | undefined,
  "attachment": AttachmentMonetaryAccountPayment[] | undefined
}


export type NoteAttachmentRequestInquiryRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "description": string | undefined,
  "attachment": AttachmentMonetaryAccountPayment[] | undefined
}


export type NoteAttachmentRequestInquiryUpdate = {
  "Id": BunqId | undefined
}


export type NoteAttachmentRequestResponse = {
  "description": string | undefined,
  "attachment_id": number
}


export type NoteAttachmentRequestResponseCreate = {
  "Id": BunqId | undefined
}


export type NoteAttachmentRequestResponseDelete = {

}


export type NoteAttachmentRequestResponseListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "description": string | undefined,
  "attachment": AttachmentMonetaryAccountPayment[] | undefined
}


export type NoteAttachmentRequestResponseRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "description": string | undefined,
  "attachment": AttachmentMonetaryAccountPayment[] | undefined
}


export type NoteAttachmentRequestResponseUpdate = {
  "Id": BunqId | undefined
}


export type NoteAttachmentScheduleInstance = {
  "description": string | undefined,
  "attachment_id": number
}


export type NoteAttachmentScheduleInstanceCreate = {
  "Id": BunqId | undefined
}


export type NoteAttachmentScheduleInstanceDelete = {

}


export type NoteAttachmentScheduleInstanceListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "description": string | undefined,
  "attachment": AttachmentMonetaryAccountPayment[] | undefined
}


export type NoteAttachmentScheduleInstanceRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "description": string | undefined,
  "attachment": AttachmentMonetaryAccountPayment[] | undefined
}


export type NoteAttachmentScheduleInstanceUpdate = {
  "Id": BunqId | undefined
}


export type NoteAttachmentSchedulePayment = {
  "description": string | undefined,
  "attachment_id": number
}


export type NoteAttachmentSchedulePaymentBatch = {
  "description": string | undefined,
  "attachment_id": number
}


export type NoteAttachmentSchedulePaymentBatchCreate = {
  "Id": BunqId | undefined
}


export type NoteAttachmentSchedulePaymentBatchDelete = {

}


export type NoteAttachmentSchedulePaymentBatchListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "description": string | undefined,
  "attachment": AttachmentMonetaryAccountPayment[] | undefined
}


export type NoteAttachmentSchedulePaymentBatchRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "description": string | undefined,
  "attachment": AttachmentMonetaryAccountPayment[] | undefined
}


export type NoteAttachmentSchedulePaymentBatchUpdate = {
  "Id": BunqId | undefined
}


export type NoteAttachmentSchedulePaymentCreate = {
  "Id": BunqId | undefined
}


export type NoteAttachmentSchedulePaymentDelete = {

}


export type NoteAttachmentSchedulePaymentListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "description": string | undefined,
  "attachment": AttachmentMonetaryAccountPayment[] | undefined
}


export type NoteAttachmentSchedulePaymentRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "description": string | undefined,
  "attachment": AttachmentMonetaryAccountPayment[] | undefined
}


export type NoteAttachmentSchedulePaymentUpdate = {
  "Id": BunqId | undefined
}


export type NoteAttachmentScheduleRequest = {
  "description": string | undefined,
  "attachment_id": number
}


export type NoteAttachmentScheduleRequestBatch = {
  "description": string | undefined,
  "attachment_id": number
}


export type NoteAttachmentScheduleRequestBatchCreate = {
  "Id": BunqId | undefined
}


export type NoteAttachmentScheduleRequestBatchDelete = {

}


export type NoteAttachmentScheduleRequestBatchListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "description": string | undefined,
  "attachment": AttachmentMonetaryAccountPayment[] | undefined
}


export type NoteAttachmentScheduleRequestBatchRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "description": string | undefined,
  "attachment": AttachmentMonetaryAccountPayment[] | undefined
}


export type NoteAttachmentScheduleRequestBatchUpdate = {
  "Id": BunqId | undefined
}


export type NoteAttachmentScheduleRequestCreate = {
  "Id": BunqId | undefined
}


export type NoteAttachmentScheduleRequestDelete = {

}


export type NoteAttachmentScheduleRequestListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "description": string | undefined,
  "attachment": AttachmentMonetaryAccountPayment[] | undefined
}


export type NoteAttachmentScheduleRequestRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "description": string | undefined,
  "attachment": AttachmentMonetaryAccountPayment[] | undefined
}


export type NoteAttachmentScheduleRequestUpdate = {
  "Id": BunqId | undefined
}


export type NoteAttachmentSofortMerchantTransaction = {
  "description": string | undefined,
  "attachment_id": number
}


export type NoteAttachmentSofortMerchantTransactionCreate = {
  "Id": BunqId | undefined
}


export type NoteAttachmentSofortMerchantTransactionDelete = {

}


export type NoteAttachmentSofortMerchantTransactionListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "description": string | undefined,
  "attachment": AttachmentMonetaryAccountPayment[] | undefined
}


export type NoteAttachmentSofortMerchantTransactionRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "description": string | undefined,
  "attachment": AttachmentMonetaryAccountPayment[] | undefined
}


export type NoteAttachmentSofortMerchantTransactionUpdate = {
  "Id": BunqId | undefined
}


export type NoteAttachmentWhitelistResult = {
  "description": string | undefined,
  "attachment_id": number
}


export type NoteAttachmentWhitelistResultCreate = {
  "Id": BunqId | undefined
}


export type NoteAttachmentWhitelistResultDelete = {

}


export type NoteAttachmentWhitelistResultListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "description": string | undefined,
  "attachment": AttachmentMonetaryAccountPayment[] | undefined
}


export type NoteAttachmentWhitelistResultRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "description": string | undefined,
  "attachment": AttachmentMonetaryAccountPayment[] | undefined
}


export type NoteAttachmentWhitelistResultUpdate = {
  "Id": BunqId | undefined
}


export type NoteTextAdyenCardTransaction = {
  "content": string | undefined
}


export type NoteTextAdyenCardTransactionCreate = {
  "Id": BunqId | undefined
}


export type NoteTextAdyenCardTransactionDelete = {

}


export type NoteTextAdyenCardTransactionListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "content": string | undefined
}


export type NoteTextAdyenCardTransactionRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "content": string | undefined
}


export type NoteTextAdyenCardTransactionUpdate = {
  "Id": BunqId | undefined
}


export type NoteTextBankSwitchServiceNetherlandsIncomingPayment = {
  "content": string | undefined
}


export type NoteTextBankSwitchServiceNetherlandsIncomingPaymentCreate = {
  "Id": BunqId | undefined
}


export type NoteTextBankSwitchServiceNetherlandsIncomingPaymentDelete = {

}


export type NoteTextBankSwitchServiceNetherlandsIncomingPaymentListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "content": string | undefined
}


export type NoteTextBankSwitchServiceNetherlandsIncomingPaymentRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "content": string | undefined
}


export type NoteTextBankSwitchServiceNetherlandsIncomingPaymentUpdate = {
  "Id": BunqId | undefined
}


export type NoteTextBunqMeFundraiserResult = {
  "content": string | undefined
}


export type NoteTextBunqMeFundraiserResultCreate = {
  "Id": BunqId | undefined
}


export type NoteTextBunqMeFundraiserResultDelete = {

}


export type NoteTextBunqMeFundraiserResultListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "content": string | undefined
}


export type NoteTextBunqMeFundraiserResultRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "content": string | undefined
}


export type NoteTextBunqMeFundraiserResultUpdate = {
  "Id": BunqId | undefined
}


export type NoteTextDraftPayment = {
  "content": string | undefined
}


export type NoteTextDraftPaymentCreate = {
  "Id": BunqId | undefined
}


export type NoteTextDraftPaymentDelete = {

}


export type NoteTextDraftPaymentListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "content": string | undefined
}


export type NoteTextDraftPaymentRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "content": string | undefined
}


export type NoteTextDraftPaymentUpdate = {
  "Id": BunqId | undefined
}


export type NoteTextIdealMerchantTransaction = {
  "content": string | undefined
}


export type NoteTextIdealMerchantTransactionCreate = {
  "Id": BunqId | undefined
}


export type NoteTextIdealMerchantTransactionDelete = {

}


export type NoteTextIdealMerchantTransactionListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "content": string | undefined
}


export type NoteTextIdealMerchantTransactionRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "content": string | undefined
}


export type NoteTextIdealMerchantTransactionUpdate = {
  "Id": BunqId | undefined
}


export type NoteTextMasterCardAction = {
  "content": string | undefined
}


export type NoteTextMasterCardActionCreate = {
  "Id": BunqId | undefined
}


export type NoteTextMasterCardActionDelete = {

}


export type NoteTextMasterCardActionListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "content": string | undefined
}


export type NoteTextMasterCardActionRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "content": string | undefined
}


export type NoteTextMasterCardActionUpdate = {
  "Id": BunqId | undefined
}


export type NoteTextOpenBankingMerchantTransaction = {
  "content": string | undefined
}


export type NoteTextOpenBankingMerchantTransactionCreate = {
  "Id": BunqId | undefined
}


export type NoteTextOpenBankingMerchantTransactionDelete = {

}


export type NoteTextOpenBankingMerchantTransactionListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "content": string | undefined
}


export type NoteTextOpenBankingMerchantTransactionRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "content": string | undefined
}


export type NoteTextOpenBankingMerchantTransactionUpdate = {
  "Id": BunqId | undefined
}


export type NoteTextPayment = {
  "content": string | undefined
}


export type NoteTextPaymentBatch = {
  "content": string | undefined
}


export type NoteTextPaymentBatchCreate = {
  "Id": BunqId | undefined
}


export type NoteTextPaymentBatchDelete = {

}


export type NoteTextPaymentBatchListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "content": string | undefined
}


export type NoteTextPaymentBatchRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "content": string | undefined
}


export type NoteTextPaymentBatchUpdate = {
  "Id": BunqId | undefined
}


export type NoteTextPaymentCreate = {
  "Id": BunqId | undefined
}


export type NoteTextPaymentDelayed = {
  "content": string | undefined
}


export type NoteTextPaymentDelayedCreate = {
  "Id": BunqId | undefined
}


export type NoteTextPaymentDelayedDelete = {

}


export type NoteTextPaymentDelayedListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "content": string | undefined
}


export type NoteTextPaymentDelayedRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "content": string | undefined
}


export type NoteTextPaymentDelayedUpdate = {
  "Id": BunqId | undefined
}


export type NoteTextPaymentDelete = {

}


export type NoteTextPaymentListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "content": string | undefined
}


export type NoteTextPaymentRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "content": string | undefined
}


export type NoteTextPaymentUpdate = {
  "Id": BunqId | undefined
}


export type NoteTextRequestInquiry = {
  "content": string | undefined
}


export type NoteTextRequestInquiryBatch = {
  "content": string | undefined
}


export type NoteTextRequestInquiryBatchCreate = {
  "Id": BunqId | undefined
}


export type NoteTextRequestInquiryBatchDelete = {

}


export type NoteTextRequestInquiryBatchListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "content": string | undefined
}


export type NoteTextRequestInquiryBatchRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "content": string | undefined
}


export type NoteTextRequestInquiryBatchUpdate = {
  "Id": BunqId | undefined
}


export type NoteTextRequestInquiryCreate = {
  "Id": BunqId | undefined
}


export type NoteTextRequestInquiryDelete = {

}


export type NoteTextRequestInquiryListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "content": string | undefined
}


export type NoteTextRequestInquiryRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "content": string | undefined
}


export type NoteTextRequestInquiryUpdate = {
  "Id": BunqId | undefined
}


export type NoteTextRequestResponse = {
  "content": string | undefined
}


export type NoteTextRequestResponseCreate = {
  "Id": BunqId | undefined
}


export type NoteTextRequestResponseDelete = {

}


export type NoteTextRequestResponseListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "content": string | undefined
}


export type NoteTextRequestResponseRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "content": string | undefined
}


export type NoteTextRequestResponseUpdate = {
  "Id": BunqId | undefined
}


export type NoteTextScheduleInstance = {
  "content": string | undefined
}


export type NoteTextScheduleInstanceCreate = {
  "Id": BunqId | undefined
}


export type NoteTextScheduleInstanceDelete = {

}


export type NoteTextScheduleInstanceListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "content": string | undefined
}


export type NoteTextScheduleInstanceRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "content": string | undefined
}


export type NoteTextScheduleInstanceUpdate = {
  "Id": BunqId | undefined
}


export type NoteTextSchedulePayment = {
  "content": string | undefined
}


export type NoteTextSchedulePaymentBatch = {
  "content": string | undefined
}


export type NoteTextSchedulePaymentBatchCreate = {
  "Id": BunqId | undefined
}


export type NoteTextSchedulePaymentBatchDelete = {

}


export type NoteTextSchedulePaymentBatchListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "content": string | undefined
}


export type NoteTextSchedulePaymentBatchRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "content": string | undefined
}


export type NoteTextSchedulePaymentBatchUpdate = {
  "Id": BunqId | undefined
}


export type NoteTextSchedulePaymentCreate = {
  "Id": BunqId | undefined
}


export type NoteTextSchedulePaymentDelete = {

}


export type NoteTextSchedulePaymentListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "content": string | undefined
}


export type NoteTextSchedulePaymentRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "content": string | undefined
}


export type NoteTextSchedulePaymentUpdate = {
  "Id": BunqId | undefined
}


export type NoteTextScheduleRequest = {
  "content": string | undefined
}


export type NoteTextScheduleRequestBatch = {
  "content": string | undefined
}


export type NoteTextScheduleRequestBatchCreate = {
  "Id": BunqId | undefined
}


export type NoteTextScheduleRequestBatchDelete = {

}


export type NoteTextScheduleRequestBatchListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "content": string | undefined
}


export type NoteTextScheduleRequestBatchRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "content": string | undefined
}


export type NoteTextScheduleRequestBatchUpdate = {
  "Id": BunqId | undefined
}


export type NoteTextScheduleRequestCreate = {
  "Id": BunqId | undefined
}


export type NoteTextScheduleRequestDelete = {

}


export type NoteTextScheduleRequestListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "content": string | undefined
}


export type NoteTextScheduleRequestRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "content": string | undefined
}


export type NoteTextScheduleRequestUpdate = {
  "Id": BunqId | undefined
}


export type NoteTextSofortMerchantTransaction = {
  "content": string | undefined
}


export type NoteTextSofortMerchantTransactionCreate = {
  "Id": BunqId | undefined
}


export type NoteTextSofortMerchantTransactionDelete = {

}


export type NoteTextSofortMerchantTransactionListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "content": string | undefined
}


export type NoteTextSofortMerchantTransactionRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "content": string | undefined
}


export type NoteTextSofortMerchantTransactionUpdate = {
  "Id": BunqId | undefined
}


export type NoteTextWhitelistResult = {
  "content": string | undefined
}


export type NoteTextWhitelistResultCreate = {
  "Id": BunqId | undefined
}


export type NoteTextWhitelistResultDelete = {

}


export type NoteTextWhitelistResultListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "content": string | undefined
}


export type NoteTextWhitelistResultRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "label_user_creator": LabelUser | undefined,
  "content": string | undefined
}


export type NoteTextWhitelistResultUpdate = {
  "Id": BunqId | undefined
}


export type NotificationFilter = {
  "notification_delivery_method": string | undefined,
  "notification_target": string | undefined,
  "category": string | undefined
}


export type NotificationFilterEmail = {
  "notification_filters": NotificationFilterEmail[] | undefined
}


export type NotificationFilterEmailCreate = {
  "Id": BunqId | undefined
}


export type NotificationFilterEmailListing = {
  "notification_filters": NotificationFilterEmail[] | undefined
}


export type NotificationFilterFailure = {
  "notification_filter_failed_ids": string
}


export type NotificationFilterFailureCreate = {
  "Id": BunqId | undefined
}


export type NotificationFilterFailureListing = {
  "notification_filters": NotificationFilter[] | undefined,
  "category": string | undefined,
  "event_type": string | undefined,
  "object_id": number | undefined,
  "exception_message": string | undefined,
  "response_code": number | undefined
}


export type NotificationFilterPush = {
  "notification_filters": NotificationFilterPush[] | undefined
}


export type NotificationFilterPushCreate = {
  "Id": BunqId | undefined
}


export type NotificationFilterPushListing = {
  "notification_filters": NotificationFilterPush[] | undefined
}


export type NotificationFilterUrl = {
  "notification_filters": NotificationFilterUrl[] | undefined
}


export type NotificationFilterUrlCreate = {
  "Id": BunqId | undefined
}


export type NotificationFilterUrlListing = {
  "notification_filters": NotificationFilterUrl[] | undefined
}


export type NotificationFilterUrlMonetaryAccount = {
  "notification_filters": NotificationFilterUrl[] | undefined
}


export type NotificationFilterUrlMonetaryAccountCreate = {
  "Id": BunqId | undefined
}


export type NotificationFilterUrlMonetaryAccountListing = {
  "notification_filters": NotificationFilterUrl[] | undefined
}


export type OauthCallbackUrl = {
  "url": string
}


export type OauthCallbackUrlCreate = {
  "Id": BunqId | undefined
}


export type OauthCallbackUrlDelete = {

}


export type OauthCallbackUrlListing = {
  "url": string | undefined
}


export type OauthCallbackUrlRead = {
  "url": string | undefined
}


export type OauthCallbackUrlUpdate = {
  "Id": BunqId | undefined
}


export type OauthClient = {
  "status": string | undefined
}


export type OauthClientCreate = {
  "Id": BunqId | undefined
}


export type OauthClientListing = {
  "id": number | undefined,
  "status": string | undefined,
  "display_name": string | undefined,
  "client_id": string | undefined,
  "secret": string | undefined,
  "callback_url": OauthCallbackUrl[] | undefined
}


export type OauthClientRead = {
  "id": number | undefined,
  "status": string | undefined,
  "display_name": string | undefined,
  "client_id": string | undefined,
  "secret": string | undefined,
  "callback_url": OauthCallbackUrl[] | undefined
}


export type OauthClientUpdate = {
  "Id": BunqId | undefined
}


export type OpenBankingAccount = {
  "status": string | undefined,
  "iban": string | undefined,
  "time_synced_last": string | undefined,
  "provider_bank": OpenBankingProviderBank | undefined,
  "balance_booked": Amount | undefined,
  "balance_available": Amount | undefined
}


export type OpenBankingProviderBank = {
  "account_information_service_status": string | undefined,
  "payment_information_service_status": string | undefined,
  "name": string | undefined,
  "aiia_provider_id": string | undefined,
  "country": string | undefined,
  "all_payment_method_allowed_sepa": string[] | undefined,
  "all_payment_method_allowed_domestic": string[] | undefined,
  "audience_business_status": boolean | undefined,
  "audience_private_status": boolean | undefined,
  "avatar": Avatar | undefined
}


export type PartnerPromotionCashback = {
  "promotion_code": string | undefined,
  "status": string | undefined,
  "description": string,
  "date_start": string,
  "date_end": string,
  "currency": string,
  "amount_cashback_per_transaction_maximum": Amount | undefined,
  "number_of_transaction_maximum": number | undefined,
  "amount_transaction_minimum": Amount | undefined,
  "url_together": string | undefined,
  "deeplink": string | undefined,
  "partner_name": string | undefined,
  "partner_avatar_uuid": string,
  "promotion_title_short": StringTranslated | undefined,
  "promotion_title_long": StringTranslated | undefined,
  "promotion_description": StringTranslated | undefined,
  "all_partner_identifier": string[] | undefined,
  "public_uuid": string | undefined,
  "partner_avatar": Avatar | undefined
}


export type Payment = {
  "amount": Amount | undefined,
  "counterparty_alias": LabelMonetaryAccount | undefined,
  "description": string | undefined,
  "attachment": AttachmentMonetaryAccountPayment[] | undefined,
  "merchant_reference": string | undefined,
  "allow_bunqto": boolean | undefined,
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "monetary_account_id": number | undefined,
  "alias": LabelMonetaryAccount | undefined,
  "type": string | undefined,
  "sub_type": string | undefined,
  "payment_arrival_expected": PaymentArrivalExpected | undefined,
  "bunqto_status": string | undefined,
  "bunqto_sub_status": string | undefined,
  "bunqto_share_url": string | undefined,
  "bunqto_expiry": string | undefined,
  "bunqto_time_responded": string | undefined,
  "batch_id": number | undefined,
  "scheduled_id": number | undefined,
  "address_shipping": Address | undefined,
  "address_billing": Address | undefined,
  "geolocation": Geolocation | undefined,
  "request_reference_split_the_bill": RequestInquiryReference[] | undefined,
  "balance_after_mutation": Amount | undefined,
  "payment_auto_allocate_instance": PaymentAutoAllocateInstance | undefined,
  "payment_suspended_outgoing": PaymentSuspendedOutgoing | undefined
}


export type PaymentArrivalExpected = {
  "status": string | undefined,
  "time": string | undefined
}


export type PaymentAutoAllocate = {
  "payment_id": number,
  "type": string,
  "definition": PaymentAutoAllocateDefinition[]
}


export type PaymentAutoAllocateCreate = {
  "Id": BunqId | undefined
}


export type PaymentAutoAllocateDefinition = {
  "type": string,
  "counterparty_alias": Pointer | undefined,
  "description": string | undefined,
  "amount": Amount | undefined,
  "fraction": number | undefined,
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined
}


export type PaymentAutoAllocateDefinitionListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "counterparty_alias": Pointer | undefined,
  "description": string | undefined,
  "amount": Amount | undefined,
  "fraction": number | undefined
}


export type PaymentAutoAllocateDelete = {

}


export type PaymentAutoAllocateInstance = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "payment_auto_allocate_id": number | undefined,
  "status": string | undefined,
  "error_message": ErrorArray[][] | undefined,
  "payment_batch": PaymentBatch | undefined,
  "payment_id": number | undefined,
  "all_ginmon_transaction_order": GinmonTransaction[] | undefined
}


export type PaymentAutoAllocateInstanceListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "payment_auto_allocate_id": number | undefined,
  "status": string | undefined,
  "error_message": ErrorArray[][] | undefined,
  "payment_batch": PaymentBatch | undefined,
  "payment_id": number | undefined,
  "all_ginmon_transaction_order": GinmonTransaction[] | undefined
}


export type PaymentAutoAllocateInstanceRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "payment_auto_allocate_id": number | undefined,
  "status": string | undefined,
  "error_message": ErrorArray[][] | undefined,
  "payment_batch": PaymentBatch | undefined,
  "payment_id": number | undefined,
  "all_ginmon_transaction_order": GinmonTransaction[] | undefined
}


export type PaymentAutoAllocateListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "type": string | undefined,
  "status": string | undefined,
  "trigger_amount": Amount | undefined,
  "payment": Payment | undefined,
  "payment_original": Payment | undefined,
  "payment_latest": Payment | undefined
}


export type PaymentAutoAllocateRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "type": string | undefined,
  "status": string | undefined,
  "trigger_amount": Amount | undefined,
  "payment": Payment | undefined,
  "payment_original": Payment | undefined,
  "payment_latest": Payment | undefined
}


export type PaymentAutoAllocateUpdate = {
  "Id": BunqId | undefined
}


export type PaymentAutoAllocateUserListing = {
  "PaymentAutoAllocate": PaymentAutoAllocate | undefined
}


export type PaymentBatch = {
  "payments": PaymentBatchAnchoredPayment | undefined
}


export type PaymentBatchAnchoredPayment = {
  "Payment": Payment[] | undefined
}


export type PaymentBatchCreate = {
  "Id": BunqId | undefined
}


export type PaymentBatchListing = {
  "payments": PaymentBatchAnchoredPayment | undefined
}


export type PaymentBatchRead = {
  "payments": PaymentBatchAnchoredPayment | undefined
}


export type PaymentBatchUpdate = {
  "Id": BunqId | undefined
}


export type PaymentCreate = {
  "id": number | undefined
}


export type PaymentListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "monetary_account_id": number | undefined,
  "amount": Amount | undefined,
  "alias": LabelMonetaryAccount | undefined,
  "counterparty_alias": LabelMonetaryAccount | undefined,
  "description": string | undefined,
  "type": string | undefined,
  "sub_type": string | undefined,
  "payment_arrival_expected": PaymentArrivalExpected | undefined,
  "bunqto_status": string | undefined,
  "bunqto_sub_status": string | undefined,
  "bunqto_share_url": string | undefined,
  "bunqto_expiry": string | undefined,
  "bunqto_time_responded": string | undefined,
  "attachment": AttachmentMonetaryAccountPayment[] | undefined,
  "merchant_reference": string | undefined,
  "batch_id": number | undefined,
  "scheduled_id": number | undefined,
  "address_shipping": Address | undefined,
  "address_billing": Address | undefined,
  "geolocation": Geolocation | undefined,
  "request_reference_split_the_bill": RequestInquiryReference[] | undefined,
  "balance_after_mutation": Amount | undefined,
  "payment_auto_allocate_instance": PaymentAutoAllocateInstance | undefined,
  "payment_suspended_outgoing": PaymentSuspendedOutgoing | undefined
}


export type PaymentRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "monetary_account_id": number | undefined,
  "amount": Amount | undefined,
  "alias": LabelMonetaryAccount | undefined,
  "counterparty_alias": LabelMonetaryAccount | undefined,
  "description": string | undefined,
  "type": string | undefined,
  "sub_type": string | undefined,
  "payment_arrival_expected": PaymentArrivalExpected | undefined,
  "bunqto_status": string | undefined,
  "bunqto_sub_status": string | undefined,
  "bunqto_share_url": string | undefined,
  "bunqto_expiry": string | undefined,
  "bunqto_time_responded": string | undefined,
  "attachment": AttachmentMonetaryAccountPayment[] | undefined,
  "merchant_reference": string | undefined,
  "batch_id": number | undefined,
  "scheduled_id": number | undefined,
  "address_shipping": Address | undefined,
  "address_billing": Address | undefined,
  "geolocation": Geolocation | undefined,
  "request_reference_split_the_bill": RequestInquiryReference[] | undefined,
  "balance_after_mutation": Amount | undefined,
  "payment_auto_allocate_instance": PaymentAutoAllocateInstance | undefined,
  "payment_suspended_outgoing": PaymentSuspendedOutgoing | undefined
}


export type PaymentServiceProviderCredential = {
  "client_payment_service_provider_certificate": string,
  "client_payment_service_provider_certificate_chain": string,
  "client_public_key_signature": string
}


export type PaymentServiceProviderCredentialCreate = {
  "Id": BunqId | undefined
}


export type PaymentServiceProviderCredentialRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "status": string | undefined,
  "expiry_time": string | undefined,
  "token_value": string | undefined,
  "permitted_device": PermittedDevice | undefined
}


export type PaymentServiceProviderDraftPayment = {
  "sender_iban": string,
  "sender_name": string | undefined,
  "counterparty_iban": string,
  "counterparty_name": string,
  "description": string,
  "amount": Amount,
  "status": string | undefined
}


export type PaymentServiceProviderDraftPaymentCreate = {
  "Id": BunqId | undefined
}


export type PaymentServiceProviderDraftPaymentListing = {
  "sender_iban": string | undefined,
  "receiver_iban": string | undefined,
  "amount": Amount | undefined,
  "status": string | undefined
}


export type PaymentServiceProviderDraftPaymentRead = {
  "sender_iban": string | undefined,
  "receiver_iban": string | undefined,
  "amount": Amount | undefined,
  "status": string | undefined
}


export type PaymentServiceProviderDraftPaymentUpdate = {
  "Id": BunqId | undefined
}


export type PaymentServiceProviderIssuerTransaction = {
  "counterparty_alias": Pointer,
  "amount": Amount,
  "description": string,
  "url_redirect": string,
  "time_expiry": string | undefined,
  "status": string | undefined
}


export type PaymentServiceProviderIssuerTransactionCreate = {
  "Id": BunqId | undefined
}


export type PaymentServiceProviderIssuerTransactionListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "public_uuid": string | undefined,
  "counterparty_alias": LabelMonetaryAccount | undefined,
  "amount": Amount | undefined,
  "description": string | undefined,
  "url_redirect": string | undefined,
  "time_expiry": string | undefined,
  "status": string | undefined,
  "alias": LabelMonetaryAccount | undefined
}


export type PaymentServiceProviderIssuerTransactionRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "public_uuid": string | undefined,
  "counterparty_alias": LabelMonetaryAccount | undefined,
  "amount": Amount | undefined,
  "description": string | undefined,
  "url_redirect": string | undefined,
  "time_expiry": string | undefined,
  "status": string | undefined,
  "alias": LabelMonetaryAccount | undefined
}


export type PaymentServiceProviderIssuerTransactionUpdate = {
  "Id": BunqId | undefined
}


export type PaymentSuspendedOutgoing = {
  "status": string | undefined,
  "monetary_account_id": string | undefined,
  "time_execution": string | undefined
}


export type PermittedDevice = {
  "description": string | undefined,
  "ip": string | undefined
}


export type PermittedIp = {
  "ip": string,
  "status": string | undefined
}


export type PermittedIpCreate = {
  "Id": BunqId | undefined
}


export type PermittedIpListing = {
  "ip": string | undefined,
  "status": string | undefined
}


export type PermittedIpRead = {
  "ip": string | undefined,
  "status": string | undefined
}


export type PermittedIpUpdate = {
  "Id": BunqId | undefined
}


export type PointMutation = {
  "number_of_point": number | undefined
}


export type Pointer = {
  "type": string | undefined,
  "value": string | undefined,
  "name": string | undefined,
  "service": string | undefined
}


export type RelationUser = {
  "user_id": string | undefined,
  "counter_user_id": string | undefined,
  "label_user": LabelUser | undefined,
  "counter_label_user": LabelUser | undefined,
  "relationship": string | undefined,
  "status": string | undefined,
  "user_status": string | undefined,
  "counter_user_status": string | undefined,
  "company_employee_setting_adyen_card_transaction": CompanyEmployeeSettingAdyenCardTransaction | undefined,
  "all_company_employee_card": CompanyEmployeeCard[] | undefined
}


export type RequestInquiry = {
  "amount_inquired": Amount | undefined,
  "counterparty_alias": LabelMonetaryAccount | undefined,
  "description": string | undefined,
  "attachment": BunqId[] | undefined,
  "merchant_reference": string | undefined,
  "status": string | undefined,
  "minimum_age": number | undefined,
  "require_address": string | undefined,
  "want_tip": boolean | undefined,
  "allow_amount_lower": boolean | undefined,
  "allow_amount_higher": boolean | undefined,
  "allow_bunqme": boolean,
  "redirect_url": string | undefined,
  "event_id": number | undefined,
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "time_responded": string | undefined,
  "time_expiry": string | undefined,
  "monetary_account_id": number | undefined,
  "amount_responded": Amount | undefined,
  "user_alias_created": LabelUser | undefined,
  "user_alias_revoked": LabelUser | undefined,
  "batch_id": number | undefined,
  "scheduled_id": number | undefined,
  "bunqme_share_url": string | undefined,
  "address_shipping": Address | undefined,
  "address_billing": Address | undefined,
  "geolocation": Geolocation | undefined,
  "reference_split_the_bill": RequestReferenceSplitTheBillAnchorObject | undefined
}


export type RequestInquiryBatch = {
  "request_inquiries": RequestInquiry[] | undefined,
  "status": string | undefined,
  "total_amount_inquired": Amount | undefined,
  "event_id": number | undefined,
  "reference_split_the_bill": RequestReferenceSplitTheBillAnchorObject | undefined
}


export type RequestInquiryBatchCreate = {
  "Id": BunqId | undefined
}


export type RequestInquiryBatchListing = {
  "request_inquiries": RequestInquiry[] | undefined,
  "total_amount_inquired": Amount | undefined,
  "reference_split_the_bill": RequestReferenceSplitTheBillAnchorObject | undefined
}


export type RequestInquiryBatchRead = {
  "request_inquiries": RequestInquiry[] | undefined,
  "total_amount_inquired": Amount | undefined,
  "reference_split_the_bill": RequestReferenceSplitTheBillAnchorObject | undefined
}


export type RequestInquiryBatchUpdate = {
  "Id": BunqId | undefined
}


export type RequestInquiryCreate = {
  "id": number | undefined
}


export type RequestInquiryListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "time_responded": string | undefined,
  "time_expiry": string | undefined,
  "monetary_account_id": number | undefined,
  "amount_inquired": Amount | undefined,
  "amount_responded": Amount | undefined,
  "user_alias_created": LabelUser | undefined,
  "user_alias_revoked": LabelUser | undefined,
  "counterparty_alias": LabelMonetaryAccount | undefined,
  "description": string | undefined,
  "merchant_reference": string | undefined,
  "attachment": BunqId[] | undefined,
  "status": string | undefined,
  "batch_id": number | undefined,
  "scheduled_id": number | undefined,
  "minimum_age": number | undefined,
  "require_address": string | undefined,
  "bunqme_share_url": string | undefined,
  "redirect_url": string | undefined,
  "address_shipping": Address | undefined,
  "address_billing": Address | undefined,
  "geolocation": Geolocation | undefined,
  "reference_split_the_bill": RequestReferenceSplitTheBillAnchorObject | undefined
}


export type RequestInquiryRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "time_responded": string | undefined,
  "time_expiry": string | undefined,
  "monetary_account_id": number | undefined,
  "amount_inquired": Amount | undefined,
  "amount_responded": Amount | undefined,
  "user_alias_created": LabelUser | undefined,
  "user_alias_revoked": LabelUser | undefined,
  "counterparty_alias": LabelMonetaryAccount | undefined,
  "description": string | undefined,
  "merchant_reference": string | undefined,
  "attachment": BunqId[] | undefined,
  "status": string | undefined,
  "batch_id": number | undefined,
  "scheduled_id": number | undefined,
  "minimum_age": number | undefined,
  "require_address": string | undefined,
  "bunqme_share_url": string | undefined,
  "redirect_url": string | undefined,
  "address_shipping": Address | undefined,
  "address_billing": Address | undefined,
  "geolocation": Geolocation | undefined,
  "reference_split_the_bill": RequestReferenceSplitTheBillAnchorObject | undefined
}


export type RequestInquiryReference = {
  "type": string | undefined,
  "id": number | undefined
}


export type RequestInquiryUpdate = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "time_responded": string | undefined,
  "time_expiry": string | undefined,
  "monetary_account_id": number | undefined,
  "amount_inquired": Amount | undefined,
  "amount_responded": Amount | undefined,
  "user_alias_created": LabelUser | undefined,
  "user_alias_revoked": LabelUser | undefined,
  "counterparty_alias": LabelMonetaryAccount | undefined,
  "description": string | undefined,
  "merchant_reference": string | undefined,
  "attachment": BunqId[] | undefined,
  "status": string | undefined,
  "batch_id": number | undefined,
  "scheduled_id": number | undefined,
  "minimum_age": number | undefined,
  "require_address": string | undefined,
  "address_shipping": Address | undefined,
  "address_billing": Address | undefined,
  "geolocation": Geolocation | undefined,
  "reference_split_the_bill": RequestReferenceSplitTheBillAnchorObject | undefined
}


export type RequestReferenceSplitTheBillAnchorObject = {
  "BillingInvoice": Invoice | undefined,
  "DraftPayment": DraftPayment | undefined,
  "MasterCardAction": MasterCardAction | undefined,
  "Payment": Payment | undefined,
  "PaymentBatch": PaymentBatch | undefined,
  "RequestResponse": RequestResponse | undefined,
  "ScheduleInstance": ScheduleInstance | undefined,
  "WhitelistResult": WhitelistResult | undefined,
  "TransferwisePayment": TransferwiseTransfer | undefined,
  "CurrencyConversion": CurrencyConversion | undefined
}


export type RequestResponse = {
  "amount_responded": Amount | undefined,
  "status": string | undefined,
  "address_shipping": Address | undefined,
  "address_billing": Address | undefined,
  "currency_conversion_quote_id": number | undefined,
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "time_responded": string | undefined,
  "time_expiry": string | undefined,
  "time_refund_requested": string | undefined,
  "time_refunded": string | undefined,
  "user_refund_requested": LabelUser | undefined,
  "monetary_account_id": number | undefined,
  "amount_inquired": Amount | undefined,
  "description": string | undefined,
  "alias": LabelMonetaryAccount | undefined,
  "counterparty_alias": LabelMonetaryAccount | undefined,
  "attachment": Attachment[] | undefined,
  "minimum_age": number | undefined,
  "require_address": string | undefined,
  "geolocation": Geolocation | undefined,
  "type": string | undefined,
  "sub_type": string | undefined,
  "redirect_url": string | undefined,
  "credit_scheme_identifier": string | undefined,
  "mandate_identifier": string | undefined,
  "registration_action": string | undefined,
  "eligible_whitelist_id": number | undefined,
  "request_reference_split_the_bill": RequestInquiryReference[] | undefined,
  "event_id": number | undefined,
  "monetary_account_preferred_id": number | undefined
}


export type RequestResponseListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "time_responded": string | undefined,
  "time_expiry": string | undefined,
  "time_refund_requested": string | undefined,
  "time_refunded": string | undefined,
  "user_refund_requested": LabelUser | undefined,
  "monetary_account_id": number | undefined,
  "amount_inquired": Amount | undefined,
  "amount_responded": Amount | undefined,
  "status": string | undefined,
  "description": string | undefined,
  "alias": LabelMonetaryAccount | undefined,
  "counterparty_alias": LabelMonetaryAccount | undefined,
  "attachment": Attachment[] | undefined,
  "minimum_age": number | undefined,
  "require_address": string | undefined,
  "geolocation": Geolocation | undefined,
  "type": string | undefined,
  "sub_type": string | undefined,
  "redirect_url": string | undefined,
  "address_billing": Address | undefined,
  "address_shipping": Address | undefined,
  "credit_scheme_identifier": string | undefined,
  "mandate_identifier": string | undefined,
  "registration_action": string | undefined,
  "eligible_whitelist_id": number | undefined,
  "request_reference_split_the_bill": RequestInquiryReference[] | undefined,
  "event_id": number | undefined,
  "monetary_account_preferred_id": number | undefined
}


export type RequestResponseRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "time_responded": string | undefined,
  "time_expiry": string | undefined,
  "time_refund_requested": string | undefined,
  "time_refunded": string | undefined,
  "user_refund_requested": LabelUser | undefined,
  "monetary_account_id": number | undefined,
  "amount_inquired": Amount | undefined,
  "amount_responded": Amount | undefined,
  "status": string | undefined,
  "description": string | undefined,
  "alias": LabelMonetaryAccount | undefined,
  "counterparty_alias": LabelMonetaryAccount | undefined,
  "attachment": Attachment[] | undefined,
  "minimum_age": number | undefined,
  "require_address": string | undefined,
  "geolocation": Geolocation | undefined,
  "type": string | undefined,
  "sub_type": string | undefined,
  "redirect_url": string | undefined,
  "address_billing": Address | undefined,
  "address_shipping": Address | undefined,
  "credit_scheme_identifier": string | undefined,
  "mandate_identifier": string | undefined,
  "registration_action": string | undefined,
  "eligible_whitelist_id": number | undefined,
  "request_reference_split_the_bill": RequestInquiryReference[] | undefined,
  "event_id": number | undefined,
  "monetary_account_preferred_id": number | undefined
}


export type RequestResponseUpdate = {
  "Id": BunqId | undefined
}


export type SandboxUserCompany = {

}


export type SandboxUserCompanyCreate = {
  "Id": BunqId | undefined
}


export type SandboxUserPerson = {

}


export type SandboxUserPersonCreate = {
  "Id": BunqId | undefined
}


export type Schedule = {
  "time_start": string | undefined,
  "time_end": string | undefined,
  "recurrence_unit": string | undefined,
  "recurrence_size": number | undefined,
  "status": string | undefined,
  "object": ScheduleAnchorObject | undefined
}


export type ScheduleAnchorObject = {
  "Payment": Payment | undefined,
  "PaymentBatch": PaymentBatch | undefined
}


export type ScheduleInstance = {
  "state": string | undefined,
  "time_start": string | undefined,
  "time_end": string | undefined,
  "error_message": ErrorArray[][] | undefined,
  "scheduled_object": ScheduleAnchorObject | undefined,
  "result_object": ScheduleInstanceAnchorObject | undefined,
  "request_reference_split_the_bill": RequestInquiryReference[] | undefined
}


export type ScheduleInstanceAnchorObject = {
  "Payment": Payment | undefined,
  "PaymentBatch": PaymentBatch | undefined
}


export type ScheduleInstanceListing = {
  "state": string | undefined,
  "time_start": string | undefined,
  "time_end": string | undefined,
  "error_message": ErrorArray[][] | undefined,
  "scheduled_object": ScheduleAnchorObject | undefined,
  "result_object": ScheduleInstanceAnchorObject | undefined,
  "request_reference_split_the_bill": RequestInquiryReference[] | undefined
}


export type ScheduleInstanceRead = {
  "state": string | undefined,
  "time_start": string | undefined,
  "time_end": string | undefined,
  "error_message": ErrorArray[][] | undefined,
  "scheduled_object": ScheduleAnchorObject | undefined,
  "result_object": ScheduleInstanceAnchorObject | undefined,
  "request_reference_split_the_bill": RequestInquiryReference[] | undefined
}


export type ScheduleInstanceUpdate = {
  "Id": BunqId | undefined
}


export type ScheduleListing = {
  "time_start": string | undefined,
  "time_end": string | undefined,
  "recurrence_unit": string | undefined,
  "recurrence_size": number | undefined,
  "status": string | undefined,
  "object": ScheduleAnchorObject | undefined
}


export type SchedulePayment = {
  "payment": SchedulePaymentEntry | undefined,
  "schedule": Schedule | undefined,
  "status": string | undefined
}


export type SchedulePaymentBatch = {
  "payments": SchedulePaymentEntry[] | undefined,
  "schedule": Schedule | undefined
}


export type SchedulePaymentBatchCreate = {
  "Id": BunqId | undefined
}


export type SchedulePaymentBatchDelete = {

}


export type SchedulePaymentBatchRead = {
  "payments": SchedulePaymentEntry[] | undefined,
  "schedule": Schedule | undefined
}


export type SchedulePaymentBatchUpdate = {
  "Id": BunqId | undefined
}


export type SchedulePaymentCreate = {
  "Id": BunqId | undefined
}


export type SchedulePaymentDelete = {

}


export type SchedulePaymentEntry = {
  "amount": Amount | undefined,
  "counterparty_alias": LabelMonetaryAccount | undefined,
  "description": string | undefined,
  "attachment": AttachmentMonetaryAccountPayment[] | undefined,
  "merchant_reference": string | undefined,
  "allow_bunqto": boolean | undefined,
  "alias": LabelMonetaryAccount | undefined
}


export type SchedulePaymentListing = {
  "payment": SchedulePaymentEntry | undefined,
  "schedule": Schedule | undefined,
  "status": string | undefined
}


export type SchedulePaymentRead = {
  "payment": SchedulePaymentEntry | undefined,
  "schedule": Schedule | undefined,
  "status": string | undefined
}


export type SchedulePaymentUpdate = {
  "Id": BunqId | undefined
}


export type ScheduleRead = {
  "time_start": string | undefined,
  "time_end": string | undefined,
  "recurrence_unit": string | undefined,
  "recurrence_size": number | undefined,
  "status": string | undefined,
  "object": ScheduleAnchorObject | undefined
}


export type ScheduleUserListing = {

}


export type ServerError = {

}


export type ServerErrorCreate = {
  "Id": BunqId | undefined
}


export type SessionDelete = {

}


export type SessionServer = {
  "secret": string
}


export type SessionServerCreate = {
  "Id": BunqId | undefined,
  "Token": SessionServerToken | undefined,
  "UserCompany": UserCompany | undefined,
  "UserPerson": UserPerson | undefined,
  "UserApiKey": UserApiKey | undefined,
  "UserPaymentServiceProvider": UserPaymentServiceProvider | undefined
}


export type SessionServerToken = {
  "id": number | undefined,
  "token": string | undefined
}


export type ShareDetail = {
  "payment": ShareDetailPayment | undefined,
  "read_only": ShareDetailReadOnly | undefined,
  "draft_payment": ShareDetailDraftPayment | undefined
}


export type ShareDetailDraftPayment = {
  "make_draft_payments": boolean | undefined,
  "view_balance": boolean | undefined,
  "view_old_events": boolean | undefined,
  "view_new_events": boolean | undefined
}


export type ShareDetailPayment = {
  "make_payments": boolean | undefined,
  "make_draft_payments": boolean | undefined,
  "view_balance": boolean | undefined,
  "view_old_events": boolean | undefined,
  "view_new_events": boolean | undefined
}


export type ShareDetailReadOnly = {
  "view_balance": boolean | undefined,
  "view_old_events": boolean | undefined,
  "view_new_events": boolean | undefined
}


export type ShareInviteMonetaryAccountInquiry = {
  "counter_user_alias": LabelUser | undefined,
  "access_type": string | undefined,
  "draft_share_invite_bank_id": number | undefined,
  "share_detail": ShareDetail | undefined,
  "status": string | undefined,
  "relationship": string | undefined,
  "share_type": string | undefined,
  "start_date": string | undefined,
  "end_date": string | undefined,
  "alias": LabelMonetaryAccount | undefined,
  "user_alias_created": LabelUser | undefined,
  "user_alias_revoked": LabelUser | undefined,
  "monetary_account_id": number | undefined,
  "id": number | undefined
}


export type ShareInviteMonetaryAccountInquiryCreate = {
  "id": number | undefined
}


export type ShareInviteMonetaryAccountInquiryListing = {
  "alias": LabelMonetaryAccount | undefined,
  "user_alias_created": LabelUser | undefined,
  "user_alias_revoked": LabelUser | undefined,
  "counter_user_alias": LabelUser | undefined,
  "monetary_account_id": number | undefined,
  "status": string | undefined,
  "access_type": string | undefined,
  "relationship": string | undefined,
  "id": number | undefined
}


export type ShareInviteMonetaryAccountInquiryRead = {
  "alias": LabelMonetaryAccount | undefined,
  "user_alias_created": LabelUser | undefined,
  "user_alias_revoked": LabelUser | undefined,
  "counter_user_alias": LabelUser | undefined,
  "monetary_account_id": number | undefined,
  "status": string | undefined,
  "access_type": string | undefined,
  "relationship": string | undefined,
  "id": number | undefined
}


export type ShareInviteMonetaryAccountInquiryUpdate = {
  "Id": BunqId | undefined
}


export type ShareInviteMonetaryAccountResponse = {
  "status": string | undefined,
  "card_id": number | undefined,
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "counter_alias": LabelMonetaryAccount | undefined,
  "user_alias_cancelled": LabelUser | undefined,
  "monetary_account_id": number | undefined,
  "draft_share_invite_bank_id": number | undefined,
  "share_detail": ShareDetail | undefined,
  "access_type": string | undefined,
  "relation_user": RelationUser | undefined,
  "share_type": string | undefined,
  "start_date": string | undefined,
  "end_date": string | undefined,
  "description": string | undefined
}


export type ShareInviteMonetaryAccountResponseListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "counter_alias": LabelMonetaryAccount | undefined,
  "user_alias_cancelled": LabelUser | undefined,
  "monetary_account_id": number | undefined,
  "draft_share_invite_bank_id": number | undefined,
  "share_detail": ShareDetail | undefined,
  "access_type": string | undefined,
  "status": string | undefined,
  "relation_user": RelationUser | undefined,
  "share_type": string | undefined,
  "start_date": string | undefined,
  "end_date": string | undefined,
  "description": string | undefined
}


export type ShareInviteMonetaryAccountResponseRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "counter_alias": LabelMonetaryAccount | undefined,
  "user_alias_cancelled": LabelUser | undefined,
  "monetary_account_id": number | undefined,
  "draft_share_invite_bank_id": number | undefined,
  "share_detail": ShareDetail | undefined,
  "access_type": string | undefined,
  "status": string | undefined,
  "relation_user": RelationUser | undefined,
  "share_type": string | undefined,
  "start_date": string | undefined,
  "end_date": string | undefined,
  "description": string | undefined
}


export type ShareInviteMonetaryAccountResponseUpdate = {
  "Id": BunqId | undefined
}


export type SofortMerchantTransaction = {
  "amount_requested": Amount | undefined,
  "issuer": string | undefined,
  "monetary_account_id": number | undefined,
  "alias": LabelMonetaryAccount | undefined,
  "counterparty_alias": LabelMonetaryAccount | undefined,
  "amount_guaranteed": Amount | undefined,
  "issuer_authentication_url": string | undefined,
  "status": string | undefined,
  "error_message": ErrorArray[][] | undefined,
  "transaction_identifier": string | undefined
}


export type SofortMerchantTransactionListing = {
  "monetary_account_id": number | undefined,
  "alias": LabelMonetaryAccount | undefined,
  "counterparty_alias": LabelMonetaryAccount | undefined,
  "amount_guaranteed": Amount | undefined,
  "amount_requested": Amount | undefined,
  "issuer": string | undefined,
  "issuer_authentication_url": string | undefined,
  "status": string | undefined,
  "error_message": ErrorArray[][] | undefined,
  "transaction_identifier": string | undefined
}


export type SofortMerchantTransactionRead = {
  "monetary_account_id": number | undefined,
  "alias": LabelMonetaryAccount | undefined,
  "counterparty_alias": LabelMonetaryAccount | undefined,
  "amount_guaranteed": Amount | undefined,
  "amount_requested": Amount | undefined,
  "issuer": string | undefined,
  "issuer_authentication_url": string | undefined,
  "status": string | undefined,
  "error_message": ErrorArray[][] | undefined,
  "transaction_identifier": string | undefined
}


export type StringTranslated = {
  "de_DE": string | undefined,
  "en_US": string | undefined,
  "es_ES": string | undefined,
  "fr_FR": string | undefined,
  "hi_IN": string | undefined,
  "it_IT": string | undefined,
  "nl_NL": string | undefined,
  "pl_PL": string | undefined,
  "pt_PT": string | undefined,
  "ru_RU": string | undefined,
  "uk_UA": string | undefined
}


export type TaxResident = {
  "country": string | undefined,
  "tax_number": string | undefined,
  "status": string | undefined,
  "id": number | undefined
}


export type TokenQrRequestIdeal = {
  "token": string
}


export type TokenQrRequestIdealCreate = {
  "id": number | undefined,
  "time_responded": string | undefined,
  "time_expiry": string | undefined,
  "monetary_account_id": number | undefined,
  "amount_inquired": Amount | undefined,
  "amount_responded": Amount | undefined,
  "alias": LabelMonetaryAccount | undefined,
  "counterparty_alias": LabelMonetaryAccount | undefined,
  "description": string | undefined,
  "attachment": Attachment[] | undefined,
  "status": string | undefined,
  "minimum_age": number | undefined,
  "require_address": string | undefined,
  "address_shipping": Address | undefined,
  "address_billing": Address | undefined,
  "geolocation": Geolocation | undefined,
  "redirect_url": string | undefined,
  "type": string | undefined,
  "sub_type": string | undefined,
  "eligible_whitelist_id": number | undefined
}


export type TokenQrRequestSofort = {
  "token": string
}


export type TokenQrRequestSofortCreate = {
  "Id": BunqId | undefined
}


export type TransferwiseAccountQuote = {
  "country": string | undefined,
  "name_account_holder": string,
  "type": string,
  "detail": TransferwiseRequirementField[] | undefined
}


export type TransferwiseAccountQuoteCreate = {
  "Id": BunqId | undefined
}


export type TransferwiseAccountQuoteDelete = {

}


export type TransferwiseAccountQuoteListing = {
  "account_id": string | undefined,
  "currency": string | undefined,
  "country": string | undefined,
  "name_account_holder": string | undefined,
  "account_number": string | undefined,
  "bank_code": string | undefined
}


export type TransferwiseAccountQuoteRead = {
  "account_id": string | undefined,
  "currency": string | undefined,
  "country": string | undefined,
  "name_account_holder": string | undefined,
  "account_number": string | undefined,
  "bank_code": string | undefined
}


export type TransferwiseAccountRequirement = {
  "country": string | undefined,
  "name_account_holder": string,
  "type": string,
  "detail": TransferwiseRequirementField[] | undefined
}


export type TransferwiseAccountRequirementCreate = {
  "Id": BunqId | undefined
}


export type TransferwiseAccountRequirementListing = {
  "type": string | undefined,
  "label": string | undefined,
  "fields": TransferwiseRequirementField[] | undefined
}


export type TransferwiseCurrencyListing = {
  "currency": string | undefined,
  "name": string | undefined,
  "country": string | undefined
}


export type TransferwiseQuote = {
  "currency_source": string,
  "currency_target": string,
  "amount_source": Amount | undefined,
  "amount_target": Amount | undefined,
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "time_expiry": string | undefined,
  "quote_id": string | undefined,
  "amount_fee": Amount | undefined,
  "rate": string | undefined,
  "time_delivery_estimate": string | undefined
}


export type TransferwiseQuoteCreate = {
  "Id": BunqId | undefined
}


export type TransferwiseQuoteRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "time_expiry": string | undefined,
  "quote_id": string | undefined,
  "amount_source": Amount | undefined,
  "amount_target": Amount | undefined,
  "amount_fee": Amount | undefined,
  "rate": string | undefined,
  "time_delivery_estimate": string | undefined
}


export type TransferwiseQuoteTemporary = {
  "currency_source": string,
  "currency_target": string,
  "amount_source": Amount | undefined,
  "amount_target": Amount | undefined
}


export type TransferwiseQuoteTemporaryCreate = {
  "Id": BunqId | undefined
}


export type TransferwiseQuoteTemporaryRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "time_expiry": string | undefined,
  "quote_id": string | undefined,
  "amount_source": Amount | undefined,
  "amount_target": Amount | undefined,
  "rate": string | undefined
}


export type TransferwiseRequirementField = {
  "key": string,
  "value": string,
  "name": string | undefined,
  "group": TransferwiseRequirementFieldGroup | undefined
}


export type TransferwiseRequirementFieldGroup = {
  "key": string | undefined,
  "type": string | undefined,
  "name": string | undefined,
  "refresh_requirements_on_change": boolean | undefined,
  "required": boolean | undefined,
  "display_format": string | undefined,
  "example": string | undefined,
  "min_length": string | undefined,
  "max_length": string | undefined,
  "validation_regexp": string | undefined,
  "validation_async": TransferwiseRequirementFieldGroupValidationAsync | undefined,
  "values_allowed": TransferwiseRequirementFieldGroupValuesAllowed | undefined
}


export type TransferwiseRequirementFieldGroupValidationAsync = {
  "url": string | undefined,
  "params": TransferwiseRequirementFieldGroupValidationAsyncParams | undefined
}


export type TransferwiseRequirementFieldGroupValidationAsyncParams = {
  "key": string | undefined,
  "parameter_name": string | undefined,
  "required": boolean | undefined
}


export type TransferwiseRequirementFieldGroupValuesAllowed = {
  "key": string | undefined,
  "name": string | undefined
}


export type TransferwiseTransfer = {
  "monetary_account_id": string,
  "recipient_id": string,
  "alias": LabelMonetaryAccount | undefined,
  "counterparty_alias": LabelMonetaryAccount | undefined,
  "status": string | undefined,
  "sub_status": string | undefined,
  "status_transferwise": string | undefined,
  "status_transferwise_issue": string | undefined,
  "amount_source": Amount | undefined,
  "amount_target": Amount | undefined,
  "rate": string | undefined,
  "reference": string | undefined,
  "pay_in_reference": string | undefined,
  "time_delivery_estimate": string | undefined,
  "quote": TransferwiseQuote | undefined
}


export type TransferwiseTransferCreate = {
  "Id": BunqId | undefined
}


export type TransferwiseTransferListing = {
  "alias": LabelMonetaryAccount | undefined,
  "counterparty_alias": LabelMonetaryAccount | undefined,
  "status": string | undefined,
  "sub_status": string | undefined,
  "status_transferwise": string | undefined,
  "status_transferwise_issue": string | undefined,
  "amount_source": Amount | undefined,
  "amount_target": Amount | undefined,
  "rate": string | undefined,
  "reference": string | undefined,
  "pay_in_reference": string | undefined,
  "time_delivery_estimate": string | undefined,
  "quote": TransferwiseQuote | undefined
}


export type TransferwiseTransferRead = {
  "alias": LabelMonetaryAccount | undefined,
  "counterparty_alias": LabelMonetaryAccount | undefined,
  "status": string | undefined,
  "sub_status": string | undefined,
  "status_transferwise": string | undefined,
  "status_transferwise_issue": string | undefined,
  "amount_source": Amount | undefined,
  "amount_target": Amount | undefined,
  "rate": string | undefined,
  "reference": string | undefined,
  "pay_in_reference": string | undefined,
  "time_delivery_estimate": string | undefined,
  "quote": TransferwiseQuote | undefined
}


export type TransferwiseTransferRequirement = {
  "recipient_id": string,
  "detail": TransferwiseRequirementField[] | undefined
}


export type TransferwiseTransferRequirementCreate = {
  "Id": BunqId | undefined
}


export type TransferwiseUser = {
  "oauth_code": string | undefined
}


export type TransferwiseUserCreate = {
  "Id": BunqId | undefined
}


export type TransferwiseUserListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "name": string | undefined,
  "email": string | undefined,
  "source": string | undefined
}


export type TreeProgressListing = {
  "number_of_tree": number | undefined,
  "progress_tree_next": number | undefined,
  "url_invite_profile": string | undefined,
  "label_user": LabelUser | undefined
}


export type Ubo = {
  "name": string | undefined,
  "date_of_birth": string | undefined,
  "nationality": string | undefined
}


export type UserApiKey = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "requested_by_user": UserApiKeyAnchoredUser | undefined,
  "granted_by_user": UserApiKeyAnchoredUser | undefined
}


export type UserApiKeyAnchoredUser = {
  "UserPerson": UserPerson | undefined,
  "UserCompany": UserCompany | undefined,
  "UserPaymentServiceProvider": UserPaymentServiceProvider | undefined
}


export type UserBlocklistMasterCardMerchant = {
  "merchant_name": string | undefined,
  "merchant_id": string | undefined,
  "merchant_identifier": string | undefined,
  "mastercard_merchant_id": string | undefined,
  "external_merchant_id": string | undefined,
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "status": string | undefined,
  "merchant_hash": string | undefined,
  "merchant_avatar": Avatar | undefined
}


export type UserCompany = {
  "name": string | undefined,
  "public_nick_name": string | undefined,
  "avatar_uuid": string | undefined,
  "address_main": Address | undefined,
  "address_postal": Address | undefined,
  "language": string | undefined,
  "region": string | undefined,
  "country": string | undefined,
  "ubo": Ubo[] | undefined,
  "chamber_of_commerce_number": string | undefined,
  "legal_form": string | undefined,
  "status": string | undefined,
  "sub_status": string | undefined,
  "session_timeout": number | undefined,
  "daily_limit_without_confirmation_login": Amount | undefined,
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "public_uuid": string | undefined,
  "display_name": string | undefined,
  "alias": Pointer[] | undefined,
  "type_of_business_entity": string | undefined,
  "sector_of_industry": string | undefined,
  "counter_bank_iban": string | undefined,
  "avatar": Avatar | undefined,
  "version_terms_of_service": string | undefined,
  "directors": LabelUser[] | undefined,
  "notification_filters": NotificationFilter[] | undefined,
  "customer": Customer | undefined,
  "customer_limit": CustomerLimit | undefined,
  "billing_contract": BillingContractSubscription[] | undefined,
  "deny_reason": string | undefined,
  "relations": RelationUser[] | undefined,
  "tax_resident": TaxResident[] | undefined
}


export type UserCompanyNameListing = {
  "name_array": string[] | undefined
}


export type UserCompanyRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "public_uuid": string | undefined,
  "name": string | undefined,
  "display_name": string | undefined,
  "public_nick_name": string | undefined,
  "alias": Pointer[] | undefined,
  "chamber_of_commerce_number": string | undefined,
  "legal_form": string | undefined,
  "type_of_business_entity": string | undefined,
  "sector_of_industry": string | undefined,
  "counter_bank_iban": string | undefined,
  "avatar": Avatar | undefined,
  "address_main": Address | undefined,
  "address_postal": Address | undefined,
  "version_terms_of_service": string | undefined,
  "directors": LabelUser[] | undefined,
  "language": string | undefined,
  "country": string | undefined,
  "region": string | undefined,
  "ubo": Ubo[] | undefined,
  "status": string | undefined,
  "sub_status": string | undefined,
  "session_timeout": number | undefined,
  "daily_limit_without_confirmation_login": Amount | undefined,
  "notification_filters": NotificationFilter[] | undefined,
  "customer": Customer | undefined,
  "customer_limit": CustomerLimit | undefined,
  "billing_contract": BillingContractSubscription[] | undefined,
  "deny_reason": string | undefined,
  "relations": RelationUser[] | undefined,
  "tax_resident": TaxResident[] | undefined
}


export type UserCompanyUpdate = {
  "id": number | undefined
}


export type UserCredentialPasswordIpListing = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "status": string | undefined,
  "expiry_time": string | undefined,
  "token_value": string | undefined,
  "permitted_device": PermittedDevice | undefined
}


export type UserCredentialPasswordIpRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "status": string | undefined,
  "expiry_time": string | undefined,
  "token_value": string | undefined,
  "permitted_device": PermittedDevice | undefined
}


export type UserLegalNameListing = {
  "legal_names": string[] | undefined
}


export type UserListing = {
  "UserPerson": UserPerson | undefined,
  "UserCompany": UserCompany | undefined,
  "UserApiKey": UserApiKey | undefined,
  "UserPaymentServiceProvider": UserPaymentServiceProvider | undefined
}


export type UserPartnerPromotion = {
  "promotion_code": string,
  "status": string | undefined,
  "number_of_transaction_remaining": number | undefined,
  "partner_promotion": PartnerPromotionCashback | undefined
}


export type UserPaymentServiceProvider = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "certificate_distinguished_name": string | undefined,
  "alias": Pointer[] | undefined,
  "avatar": Avatar | undefined,
  "status": string | undefined,
  "sub_status": string | undefined,
  "public_uuid": string | undefined,
  "display_name": string | undefined,
  "public_nick_name": string | undefined,
  "language": string | undefined,
  "region": string | undefined,
  "session_timeout": number | undefined
}


export type UserPaymentServiceProviderRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "certificate_distinguished_name": string | undefined,
  "alias": Pointer[] | undefined,
  "avatar": Avatar | undefined,
  "status": string | undefined,
  "sub_status": string | undefined,
  "public_uuid": string | undefined,
  "display_name": string | undefined,
  "public_nick_name": string | undefined,
  "language": string | undefined,
  "region": string | undefined,
  "session_timeout": number | undefined
}


export type UserPerson = {
  "subscription_type": string | undefined,
  "first_name": string | undefined,
  "middle_name": string | undefined,
  "last_name": string | undefined,
  "public_nick_name": string | undefined,
  "address_main": Address | undefined,
  "address_postal": Address | undefined,
  "avatar_uuid": string | undefined,
  "tax_resident": TaxResident[] | undefined,
  "document_type": string | undefined,
  "document_number": string | undefined,
  "document_country_of_issuance": string | undefined,
  "document_front_attachment_id": number | undefined,
  "document_back_attachment_id": number | undefined,
  "date_of_birth": string | undefined,
  "nationality": string | undefined,
  "all_nationality": string[] | undefined,
  "language": string | undefined,
  "region": string | undefined,
  "gender": string | undefined,
  "status": string | undefined,
  "sub_status": string | undefined,
  "legal_guardian_alias": Pointer | undefined,
  "session_timeout": number | undefined,
  "daily_limit_without_confirmation_login": Amount | undefined,
  "display_name": string | undefined,
  "signup_track_type": string | undefined,
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "public_uuid": string | undefined,
  "legal_name": string | undefined,
  "alias": Pointer[] | undefined,
  "place_of_birth": string | undefined,
  "country_of_birth": string | undefined,
  "avatar": Avatar | undefined,
  "version_terms_of_service": string | undefined,
  "notification_filters": NotificationFilter[] | undefined,
  "relations": RelationUser[] | undefined
}


export type UserPersonRead = {
  "id": number | undefined,
  "created": string | undefined,
  "updated": string | undefined,
  "public_uuid": string | undefined,
  "first_name": string | undefined,
  "middle_name": string | undefined,
  "last_name": string | undefined,
  "legal_name": string | undefined,
  "display_name": string | undefined,
  "public_nick_name": string | undefined,
  "alias": Pointer[] | undefined,
  "tax_resident": TaxResident[] | undefined,
  "address_main": Address | undefined,
  "address_postal": Address | undefined,
  "date_of_birth": string | undefined,
  "place_of_birth": string | undefined,
  "country_of_birth": string | undefined,
  "nationality": string | undefined,
  "all_nationality": string[] | undefined,
  "language": string | undefined,
  "region": string | undefined,
  "gender": string | undefined,
  "avatar": Avatar | undefined,
  "version_terms_of_service": string | undefined,
  "status": string | undefined,
  "sub_status": string | undefined,
  "session_timeout": number | undefined,
  "daily_limit_without_confirmation_login": Amount | undefined,
  "notification_filters": NotificationFilter[] | undefined,
  "relations": RelationUser[] | undefined
}


export type UserPersonUpdate = {
  "id": number | undefined
}


export type UserRead = {
  "UserPerson": UserPerson | undefined,
  "UserCompany": UserCompany | undefined,
  "UserApiKey": UserApiKey | undefined,
  "UserPaymentServiceProvider": UserPaymentServiceProvider | undefined
}


export type Whitelist = {

}


export type WhitelistResult = {
  "id": number | undefined,
  "monetary_account_paying_id": number | undefined,
  "status": string | undefined,
  "sub_status": string | undefined,
  "error_message": ErrorArray[][] | undefined,
  "whitelist": Whitelist | undefined,
  "object": WhitelistResultViewAnchoredObject | undefined,
  "request_reference_split_the_bill": RequestInquiryReference[] | undefined
}


export type WhitelistResultViewAnchoredObject = {
  "id": number | undefined,
  "requestResponse": RequestResponse | undefined,
  "draftPayment": DraftPayment | undefined
}


export type WhitelistSddListing = {
  "id": number | undefined,
  "monetary_account_incoming_id": number | undefined,
  "monetary_account_paying_id": number | undefined,
  "type": string | undefined,
  "status": string | undefined,
  "credit_scheme_identifier": string | undefined,
  "mandate_identifier": string | undefined,
  "counterparty_alias": LabelMonetaryAccount | undefined,
  "maximum_amount_per_month": Amount | undefined,
  "user_alias_created": LabelUser | undefined
}


export type WhitelistSddMonetaryAccountPayingListing = {
  "id": number | undefined,
  "monetary_account_incoming_id": number | undefined,
  "monetary_account_paying_id": number | undefined,
  "type": string | undefined,
  "status": string | undefined,
  "credit_scheme_identifier": string | undefined,
  "mandate_identifier": string | undefined,
  "counterparty_alias": LabelMonetaryAccount | undefined,
  "maximum_amount_per_month": Amount | undefined,
  "user_alias_created": LabelUser | undefined
}


export type WhitelistSddMonetaryAccountPayingRead = {
  "id": number | undefined,
  "monetary_account_incoming_id": number | undefined,
  "monetary_account_paying_id": number | undefined,
  "type": string | undefined,
  "status": string | undefined,
  "credit_scheme_identifier": string | undefined,
  "mandate_identifier": string | undefined,
  "counterparty_alias": LabelMonetaryAccount | undefined,
  "maximum_amount_per_month": Amount | undefined,
  "user_alias_created": LabelUser | undefined
}


export type WhitelistSddOneOff = {
  "monetary_account_paying_id": number,
  "request_id": number,
  "maximum_amount_per_month": Amount | undefined,
  "maximum_amount_per_payment": Amount | undefined,
  "routing_type": string | undefined
}


export type WhitelistSddOneOffCreate = {
  "Id": BunqId | undefined
}


export type WhitelistSddOneOffDelete = {

}


export type WhitelistSddOneOffListing = {
  "id": number | undefined,
  "monetary_account_incoming_id": number | undefined,
  "monetary_account_paying_id": number | undefined,
  "type": string | undefined,
  "status": string | undefined,
  "credit_scheme_identifier": string | undefined,
  "counterparty_alias": LabelMonetaryAccount | undefined,
  "maximum_amount_per_month": Amount | undefined,
  "maximum_amount_per_payment": Amount | undefined,
  "user_alias_created": LabelUser | undefined,
  "routing_type": string | undefined
}


export type WhitelistSddOneOffRead = {
  "id": number | undefined,
  "monetary_account_incoming_id": number | undefined,
  "monetary_account_paying_id": number | undefined,
  "type": string | undefined,
  "status": string | undefined,
  "credit_scheme_identifier": string | undefined,
  "counterparty_alias": LabelMonetaryAccount | undefined,
  "maximum_amount_per_month": Amount | undefined,
  "maximum_amount_per_payment": Amount | undefined,
  "user_alias_created": LabelUser | undefined,
  "routing_type": string | undefined
}


export type WhitelistSddOneOffUpdate = {
  "Id": BunqId | undefined
}


export type WhitelistSddRead = {
  "id": number | undefined,
  "monetary_account_incoming_id": number | undefined,
  "monetary_account_paying_id": number | undefined,
  "type": string | undefined,
  "status": string | undefined,
  "credit_scheme_identifier": string | undefined,
  "mandate_identifier": string | undefined,
  "counterparty_alias": LabelMonetaryAccount | undefined,
  "maximum_amount_per_month": Amount | undefined,
  "user_alias_created": LabelUser | undefined
}


export type WhitelistSddRecurring = {
  "monetary_account_paying_id": number,
  "request_id": number,
  "maximum_amount_per_month": Amount | undefined,
  "maximum_amount_per_payment": Amount | undefined,
  "routing_type": string | undefined
}


export type WhitelistSddRecurringCreate = {
  "Id": BunqId | undefined
}


export type WhitelistSddRecurringDelete = {

}


export type WhitelistSddRecurringListing = {
  "id": number | undefined,
  "monetary_account_incoming_id": number | undefined,
  "monetary_account_paying_id": number | undefined,
  "type": string | undefined,
  "status": string | undefined,
  "credit_scheme_identifier": string | undefined,
  "mandate_identifier": string | undefined,
  "counterparty_alias": LabelMonetaryAccount | undefined,
  "maximum_amount_per_month": Amount | undefined,
  "maximum_amount_per_payment": Amount | undefined,
  "user_alias_created": LabelUser | undefined,
  "routing_type": string | undefined
}


export type WhitelistSddRecurringRead = {
  "id": number | undefined,
  "monetary_account_incoming_id": number | undefined,
  "monetary_account_paying_id": number | undefined,
  "type": string | undefined,
  "status": string | undefined,
  "credit_scheme_identifier": string | undefined,
  "mandate_identifier": string | undefined,
  "counterparty_alias": LabelMonetaryAccount | undefined,
  "maximum_amount_per_month": Amount | undefined,
  "maximum_amount_per_payment": Amount | undefined,
  "user_alias_created": LabelUser | undefined,
  "routing_type": string | undefined
}


export type WhitelistSddRecurringUpdate = {
  "Id": BunqId | undefined
}

