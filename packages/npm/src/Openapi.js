"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.List_all_Content_for_User_MonetaryAccount_Event_Statement = exports.List_all_Content_for_User_MonetaryAccount_CustomerStatement = exports.List_all_Content_for_User_Card_ExportStatementCard = exports.List_all_Content_for_User_MonetaryAccount_ExportRib = exports.List_all_Content_for_User_ExportAnnualOverview = exports.List_all_Content_for_User_Attachment = exports.List_all_Content_for_AttachmentPublic = exports.List_all_Content_for_User_MonetaryAccount_Attachment = exports.List_all_Content_for_User_ChatConversation_Attachment = exports.CREATE_ConfirmationOfFunds_for_User = exports.UPDATE_Company_for_User = exports.READ_Company_for_User = exports.CREATE_Company_for_User = exports.List_all_Company_for_User = exports.UPDATE_ChallengeRequest_for_User = exports.READ_ChallengeRequest_for_User = exports.DELETE_CertificatePinned_for_User = exports.READ_CertificatePinned_for_User = exports.CREATE_CertificatePinned_for_User = exports.List_all_CertificatePinned_for_User = exports.List_all_CardName_for_User = exports.CREATE_CardDebit_for_User = exports.CREATE_CardCredit_for_User = exports.CREATE_CardBatchReplace_for_User = exports.CREATE_CardBatch_for_User = exports.List_all_Card_for_User = exports.UPDATE_Card_for_User = exports.READ_Card_for_User = exports.CREATE_CallbackUrl_for_User_OauthClient = exports.List_all_CallbackUrl_for_User_OauthClient = exports.DELETE_CallbackUrl_for_User_OauthClient = exports.UPDATE_CallbackUrl_for_User_OauthClient = exports.READ_CallbackUrl_for_User_OauthClient = exports.READ_BunqmeTabResultResponse_for_User_MonetaryAccount = exports.UPDATE_BunqmeTab_for_User_MonetaryAccount = exports.READ_BunqmeTab_for_User_MonetaryAccount = exports.CREATE_BunqmeTab_for_User_MonetaryAccount = exports.List_all_BunqmeTab_for_User_MonetaryAccount = exports.READ_BunqmeFundraiserResult_for_User_MonetaryAccount = exports.List_all_BunqmeFundraiserProfile_for_User = exports.READ_BunqmeFundraiserProfile_for_User = exports.List_all_BillingContractSubscription_for_User = exports.READ_Avatar = exports.CREATE_Avatar = exports.READ_AttachmentPublic = exports.CREATE_AttachmentPublic = exports.READ_Attachment_for_User = exports.CREATE_Attachment_for_User_MonetaryAccount = exports.CREATE_AdditionalTransactionInformationCategoryUserDefined_for_User = exports.List_all_AdditionalTransactionInformationCategory_for_User = void 0;
exports.READ_GeneratedCvc2_for_User_Card = exports.CREATE_GeneratedCvc2_for_User_Card = exports.List_all_GeneratedCvc2_for_User_Card = exports.READ_FeatureAnnouncement_for_User = exports.DELETE_ExportStatementCardPdf_for_User_Card = exports.READ_ExportStatementCardPdf_for_User_Card = exports.CREATE_ExportStatementCardPdf_for_User_Card = exports.List_all_ExportStatementCardPdf_for_User_Card = exports.DELETE_ExportStatementCardCsv_for_User_Card = exports.READ_ExportStatementCardCsv_for_User_Card = exports.CREATE_ExportStatementCardCsv_for_User_Card = exports.List_all_ExportStatementCardCsv_for_User_Card = exports.List_all_ExportStatementCard_for_User_Card = exports.READ_ExportStatementCard_for_User_Card = exports.DELETE_ExportRib_for_User_MonetaryAccount = exports.READ_ExportRib_for_User_MonetaryAccount = exports.CREATE_ExportRib_for_User_MonetaryAccount = exports.List_all_ExportRib_for_User_MonetaryAccount = exports.DELETE_ExportAnnualOverview_for_User = exports.READ_ExportAnnualOverview_for_User = exports.CREATE_ExportAnnualOverview_for_User = exports.List_all_ExportAnnualOverview_for_User = exports.List_all_Event_for_User = exports.READ_Event_for_User = exports.UPDATE_DraftPayment_for_User_MonetaryAccount = exports.READ_DraftPayment_for_User_MonetaryAccount = exports.CREATE_DraftPayment_for_User_MonetaryAccount = exports.List_all_DraftPayment_for_User_MonetaryAccount = exports.READ_DeviceServer = exports.CREATE_DeviceServer = exports.List_all_DeviceServer = exports.List_all_Device = exports.READ_Device = exports.List_all_Definition_for_User_MonetaryAccount_PaymentAutoAllocate = exports.DELETE_CustomerStatement_for_User_MonetaryAccount = exports.READ_CustomerStatement_for_User_MonetaryAccount = exports.CREATE_CustomerStatement_for_User_MonetaryAccount = exports.List_all_CustomerStatement_for_User_MonetaryAccount = exports.UPDATE_CurrencyConversionQuote_for_User_MonetaryAccount = exports.READ_CurrencyConversionQuote_for_User_MonetaryAccount = exports.CREATE_CurrencyConversionQuote_for_User_MonetaryAccount = exports.READ_CurrencyConversion_for_User_MonetaryAccount = exports.List_all_CurrencyConversion_for_User_MonetaryAccount = exports.CREATE_CurrencyCloudPaymentQuote_for_User_MonetaryAccount = exports.List_all_CurrencyCloudBeneficiaryRequirement_for_User = exports.READ_CurrencyCloudBeneficiary_for_User = exports.CREATE_CurrencyCloudBeneficiary_for_User = exports.List_all_CurrencyCloudBeneficiary_for_User = exports.List_all_CredentialPasswordIp_for_User = exports.READ_CredentialPasswordIp_for_User = void 0;
exports.List_all_MonetaryAccountSavings_for_User = exports.UPDATE_MonetaryAccountJoint_for_User = exports.READ_MonetaryAccountJoint_for_User = exports.CREATE_MonetaryAccountJoint_for_User = exports.List_all_MonetaryAccountJoint_for_User = exports.UPDATE_MonetaryAccountExternalSavings_for_User = exports.READ_MonetaryAccountExternalSavings_for_User = exports.CREATE_MonetaryAccountExternalSavings_for_User = exports.List_all_MonetaryAccountExternalSavings_for_User = exports.UPDATE_MonetaryAccountExternal_for_User = exports.READ_MonetaryAccountExternal_for_User = exports.CREATE_MonetaryAccountExternal_for_User = exports.List_all_MonetaryAccountExternal_for_User = exports.List_all_MonetaryAccountCard_for_User = exports.UPDATE_MonetaryAccountCard_for_User = exports.READ_MonetaryAccountCard_for_User = exports.UPDATE_MonetaryAccountBank_for_User = exports.READ_MonetaryAccountBank_for_User = exports.CREATE_MonetaryAccountBank_for_User = exports.List_all_MonetaryAccountBank_for_User = exports.List_all_MonetaryAccount_for_User = exports.READ_MonetaryAccount_for_User = exports.List_all_MastercardAction_for_User_MonetaryAccount = exports.READ_MastercardAction_for_User_MonetaryAccount = exports.List_all_Limit_for_User = exports.List_all_LegalName_for_User = exports.CREATE_Ip_for_User_CredentialPasswordIp = exports.List_all_Ip_for_User_CredentialPasswordIp = exports.UPDATE_Ip_for_User_CredentialPasswordIp = exports.READ_Ip_for_User_CredentialPasswordIp = exports.CREATE_InvoiceExport_for_User_Invoice = exports.DELETE_InvoiceExport_for_User_Invoice = exports.UPDATE_InvoiceExport_for_User_Invoice = exports.READ_InvoiceExport_for_User_Invoice = exports.READ_Invoice_for_User = exports.List_all_Invoice_for_User = exports.READ_Invoice_for_User_MonetaryAccount = exports.List_all_Invoice_for_User_MonetaryAccount = exports.READ_Instance_for_User_MonetaryAccount_PaymentAutoAllocate = exports.List_all_Instance_for_User_MonetaryAccount_PaymentAutoAllocate = exports.READ_Installation = exports.CREATE_Installation = exports.List_all_Installation = exports.List_all_InsightsSearch_for_User = exports.List_all_Insights_for_User = exports.List_all_InsightPreferenceDate_for_User = exports.READ_IdealMerchantTransaction_for_User_MonetaryAccount = exports.CREATE_IdealMerchantTransaction_for_User_MonetaryAccount = exports.List_all_IdealMerchantTransaction_for_User_MonetaryAccount = exports.UPDATE_GeneratedCvc2_for_User_Card = void 0;
exports.List_all_NoteAttachment_for_User_MonetaryAccount_Payment = exports.DELETE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed = exports.UPDATE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed = exports.READ_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed = exports.CREATE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed = exports.List_all_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed = exports.DELETE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch = exports.UPDATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch = exports.READ_NoteAttachment_for_User_MonetaryAccount_PaymentBatch = exports.CREATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch = exports.List_all_NoteAttachment_for_User_MonetaryAccount_PaymentBatch = exports.DELETE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction = exports.UPDATE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction = exports.READ_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction = exports.CREATE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction = exports.List_all_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction = exports.DELETE_NoteAttachment_for_User_MonetaryAccount_MastercardAction = exports.UPDATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction = exports.READ_NoteAttachment_for_User_MonetaryAccount_MastercardAction = exports.CREATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction = exports.List_all_NoteAttachment_for_User_MonetaryAccount_MastercardAction = exports.DELETE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction = exports.UPDATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction = exports.READ_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction = exports.CREATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction = exports.List_all_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction = exports.DELETE_NoteAttachment_for_User_MonetaryAccount_DraftPayment = exports.UPDATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment = exports.READ_NoteAttachment_for_User_MonetaryAccount_DraftPayment = exports.CREATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment = exports.List_all_NoteAttachment_for_User_MonetaryAccount_DraftPayment = exports.DELETE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult = exports.UPDATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult = exports.READ_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult = exports.CREATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult = exports.List_all_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult = exports.DELETE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment = exports.UPDATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment = exports.READ_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment = exports.CREATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment = exports.List_all_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment = exports.DELETE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction = exports.UPDATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction = exports.READ_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction = exports.CREATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction = exports.List_all_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction = exports.List_all_Name_for_UserCompany = exports.UPDATE_MonetaryAccountSavings_for_User = exports.READ_MonetaryAccountSavings_for_User = exports.CREATE_MonetaryAccountSavings_for_User = void 0;
exports.List_all_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult = exports.DELETE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction = exports.UPDATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction = exports.READ_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction = exports.CREATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction = exports.List_all_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction = exports.DELETE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry = exports.UPDATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry = exports.READ_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry = exports.CREATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry = exports.List_all_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry = exports.DELETE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch = exports.UPDATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch = exports.READ_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch = exports.CREATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch = exports.List_all_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch = exports.DELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment = exports.UPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment = exports.READ_NoteAttachment_for_User_MonetaryAccount_SchedulePayment = exports.CREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment = exports.List_all_NoteAttachment_for_User_MonetaryAccount_SchedulePayment = exports.DELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch = exports.UPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch = exports.READ_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch = exports.CREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch = exports.List_all_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch = exports.DELETE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance = exports.UPDATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance = exports.READ_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance = exports.CREATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance = exports.List_all_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance = exports.DELETE_NoteAttachment_for_User_MonetaryAccount_RequestResponse = exports.UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse = exports.READ_NoteAttachment_for_User_MonetaryAccount_RequestResponse = exports.CREATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse = exports.List_all_NoteAttachment_for_User_MonetaryAccount_RequestResponse = exports.DELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry = exports.UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry = exports.READ_NoteAttachment_for_User_MonetaryAccount_RequestInquiry = exports.CREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry = exports.List_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiry = exports.DELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch = exports.UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch = exports.READ_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch = exports.CREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch = exports.List_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch = exports.DELETE_NoteAttachment_for_User_MonetaryAccount_Payment = exports.UPDATE_NoteAttachment_for_User_MonetaryAccount_Payment = exports.READ_NoteAttachment_for_User_MonetaryAccount_Payment = exports.CREATE_NoteAttachment_for_User_MonetaryAccount_Payment = void 0;
exports.List_all_NoteText_for_User_MonetaryAccount_Payment = exports.DELETE_NoteText_for_User_MonetaryAccount_PaymentDelayed = exports.UPDATE_NoteText_for_User_MonetaryAccount_PaymentDelayed = exports.READ_NoteText_for_User_MonetaryAccount_PaymentDelayed = exports.CREATE_NoteText_for_User_MonetaryAccount_PaymentDelayed = exports.List_all_NoteText_for_User_MonetaryAccount_PaymentDelayed = exports.DELETE_NoteText_for_User_MonetaryAccount_PaymentBatch = exports.UPDATE_NoteText_for_User_MonetaryAccount_PaymentBatch = exports.READ_NoteText_for_User_MonetaryAccount_PaymentBatch = exports.CREATE_NoteText_for_User_MonetaryAccount_PaymentBatch = exports.List_all_NoteText_for_User_MonetaryAccount_PaymentBatch = exports.DELETE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction = exports.UPDATE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction = exports.READ_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction = exports.CREATE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction = exports.List_all_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction = exports.DELETE_NoteText_for_User_MonetaryAccount_MastercardAction = exports.UPDATE_NoteText_for_User_MonetaryAccount_MastercardAction = exports.READ_NoteText_for_User_MonetaryAccount_MastercardAction = exports.CREATE_NoteText_for_User_MonetaryAccount_MastercardAction = exports.List_all_NoteText_for_User_MonetaryAccount_MastercardAction = exports.DELETE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction = exports.UPDATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction = exports.READ_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction = exports.CREATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction = exports.List_all_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction = exports.DELETE_NoteText_for_User_MonetaryAccount_DraftPayment = exports.UPDATE_NoteText_for_User_MonetaryAccount_DraftPayment = exports.READ_NoteText_for_User_MonetaryAccount_DraftPayment = exports.CREATE_NoteText_for_User_MonetaryAccount_DraftPayment = exports.List_all_NoteText_for_User_MonetaryAccount_DraftPayment = exports.DELETE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult = exports.UPDATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult = exports.READ_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult = exports.CREATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult = exports.List_all_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult = exports.DELETE_NoteText_for_User_MonetaryAccount_SwitchServicePayment = exports.UPDATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment = exports.READ_NoteText_for_User_MonetaryAccount_SwitchServicePayment = exports.CREATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment = exports.List_all_NoteText_for_User_MonetaryAccount_SwitchServicePayment = exports.DELETE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction = exports.UPDATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction = exports.READ_NoteText_for_User_MonetaryAccount_AdyenCardTransaction = exports.CREATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction = exports.List_all_NoteText_for_User_MonetaryAccount_AdyenCardTransaction = exports.DELETE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult = exports.UPDATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult = exports.READ_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult = exports.CREATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult = void 0;
exports.List_all_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult = exports.DELETE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction = exports.UPDATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction = exports.READ_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction = exports.CREATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction = exports.List_all_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction = exports.DELETE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry = exports.UPDATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry = exports.READ_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry = exports.CREATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry = exports.List_all_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry = exports.DELETE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch = exports.UPDATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch = exports.READ_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch = exports.CREATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch = exports.List_all_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch = exports.DELETE_NoteText_for_User_MonetaryAccount_SchedulePayment = exports.UPDATE_NoteText_for_User_MonetaryAccount_SchedulePayment = exports.READ_NoteText_for_User_MonetaryAccount_SchedulePayment = exports.CREATE_NoteText_for_User_MonetaryAccount_SchedulePayment = exports.List_all_NoteText_for_User_MonetaryAccount_SchedulePayment = exports.DELETE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch = exports.UPDATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch = exports.READ_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch = exports.CREATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch = exports.List_all_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch = exports.DELETE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance = exports.UPDATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance = exports.READ_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance = exports.CREATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance = exports.List_all_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance = exports.DELETE_NoteText_for_User_MonetaryAccount_RequestResponse = exports.UPDATE_NoteText_for_User_MonetaryAccount_RequestResponse = exports.READ_NoteText_for_User_MonetaryAccount_RequestResponse = exports.CREATE_NoteText_for_User_MonetaryAccount_RequestResponse = exports.List_all_NoteText_for_User_MonetaryAccount_RequestResponse = exports.DELETE_NoteText_for_User_MonetaryAccount_RequestInquiry = exports.UPDATE_NoteText_for_User_MonetaryAccount_RequestInquiry = exports.READ_NoteText_for_User_MonetaryAccount_RequestInquiry = exports.CREATE_NoteText_for_User_MonetaryAccount_RequestInquiry = exports.List_all_NoteText_for_User_MonetaryAccount_RequestInquiry = exports.DELETE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch = exports.UPDATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch = exports.READ_NoteText_for_User_MonetaryAccount_RequestInquiryBatch = exports.CREATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch = exports.List_all_NoteText_for_User_MonetaryAccount_RequestInquiryBatch = exports.DELETE_NoteText_for_User_MonetaryAccount_Payment = exports.UPDATE_NoteText_for_User_MonetaryAccount_Payment = exports.READ_NoteText_for_User_MonetaryAccount_Payment = exports.CREATE_NoteText_for_User_MonetaryAccount_Payment = void 0;
exports.CREATE_RequestInquiryBatch_for_User_MonetaryAccount = exports.List_all_RequestInquiryBatch_for_User_MonetaryAccount = exports.UPDATE_RequestInquiry_for_User_MonetaryAccount = exports.READ_RequestInquiry_for_User_MonetaryAccount = exports.CREATE_RequestInquiry_for_User_MonetaryAccount = exports.List_all_RequestInquiry_for_User_MonetaryAccount = exports.CREATE_Replace_for_User_Card = exports.List_all_PdfContent_for_User_Invoice = exports.UPDATE_PaymentServiceProviderIssuerTransaction_for_User = exports.READ_PaymentServiceProviderIssuerTransaction_for_User = exports.CREATE_PaymentServiceProviderIssuerTransaction_for_User = exports.List_all_PaymentServiceProviderIssuerTransaction_for_User = exports.UPDATE_PaymentServiceProviderDraftPayment_for_User = exports.READ_PaymentServiceProviderDraftPayment_for_User = exports.CREATE_PaymentServiceProviderDraftPayment_for_User = exports.List_all_PaymentServiceProviderDraftPayment_for_User = exports.CREATE_PaymentServiceProviderCredential = exports.READ_PaymentServiceProviderCredential = exports.UPDATE_PaymentBatch_for_User_MonetaryAccount = exports.READ_PaymentBatch_for_User_MonetaryAccount = exports.CREATE_PaymentBatch_for_User_MonetaryAccount = exports.List_all_PaymentBatch_for_User_MonetaryAccount = exports.List_all_PaymentAutoAllocate_for_User = exports.DELETE_PaymentAutoAllocate_for_User_MonetaryAccount = exports.UPDATE_PaymentAutoAllocate_for_User_MonetaryAccount = exports.READ_PaymentAutoAllocate_for_User_MonetaryAccount = exports.CREATE_PaymentAutoAllocate_for_User_MonetaryAccount = exports.List_all_PaymentAutoAllocate_for_User_MonetaryAccount = exports.List_all_Payment_for_User_MonetaryAccount_MastercardAction = exports.READ_Payment_for_User_MonetaryAccount = exports.CREATE_Payment_for_User_MonetaryAccount = exports.List_all_Payment_for_User_MonetaryAccount = exports.CREATE_OauthClient_for_User = exports.List_all_OauthClient_for_User = exports.UPDATE_OauthClient_for_User = exports.READ_OauthClient_for_User = exports.CREATE_NotificationFilterUrl_for_User_MonetaryAccount = exports.List_all_NotificationFilterUrl_for_User_MonetaryAccount = exports.CREATE_NotificationFilterUrl_for_User = exports.List_all_NotificationFilterUrl_for_User = exports.CREATE_NotificationFilterPush_for_User = exports.List_all_NotificationFilterPush_for_User = exports.CREATE_NotificationFilterFailure_for_User = exports.List_all_NotificationFilterFailure_for_User = exports.CREATE_NotificationFilterEmail_for_User = exports.List_all_NotificationFilterEmail_for_User = exports.DELETE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult = exports.UPDATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult = exports.READ_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult = exports.CREATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult = void 0;
exports.List_all_TransferwiseRecipientRequirement_for_User_TransferwiseQuote = exports.DELETE_TransferwiseRecipient_for_User_TransferwiseQuote = exports.READ_TransferwiseRecipient_for_User_TransferwiseQuote = exports.CREATE_TransferwiseRecipient_for_User_TransferwiseQuote = exports.List_all_TransferwiseRecipient_for_User_TransferwiseQuote = exports.READ_TransferwiseQuoteTemporary_for_User = exports.CREATE_TransferwiseQuoteTemporary_for_User = exports.READ_TransferwiseQuote_for_User = exports.CREATE_TransferwiseQuote_for_User = exports.List_all_TransferwiseCurrency_for_User = exports.CREATE_TokenQrRequestSofort_for_User = exports.CREATE_TokenQrRequestIdeal_for_User = exports.READ_SwitchServicePayment_for_User_MonetaryAccount = exports.READ_Statement_for_User_MonetaryAccount_Event = exports.CREATE_Statement_for_User_MonetaryAccount_Event = exports.List_all_SofortMerchantTransaction_for_User_MonetaryAccount = exports.READ_SofortMerchantTransaction_for_User_MonetaryAccount = exports.List_all_ShareInviteMonetaryAccountResponse_for_User = exports.UPDATE_ShareInviteMonetaryAccountResponse_for_User = exports.READ_ShareInviteMonetaryAccountResponse_for_User = exports.UPDATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount = exports.READ_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount = exports.CREATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount = exports.List_all_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount = exports.CREATE_SessionServer = exports.DELETE_Session = exports.List_all_ServerPublicKey_for_Installation = exports.CREATE_ServerError = exports.CREATE_SchedulePaymentBatch_for_User_MonetaryAccount = exports.DELETE_SchedulePaymentBatch_for_User_MonetaryAccount = exports.UPDATE_SchedulePaymentBatch_for_User_MonetaryAccount = exports.READ_SchedulePaymentBatch_for_User_MonetaryAccount = exports.DELETE_SchedulePayment_for_User_MonetaryAccount = exports.UPDATE_SchedulePayment_for_User_MonetaryAccount = exports.READ_SchedulePayment_for_User_MonetaryAccount = exports.CREATE_SchedulePayment_for_User_MonetaryAccount = exports.List_all_SchedulePayment_for_User_MonetaryAccount = exports.List_all_ScheduleInstance_for_User_MonetaryAccount_Schedule = exports.UPDATE_ScheduleInstance_for_User_MonetaryAccount_Schedule = exports.READ_ScheduleInstance_for_User_MonetaryAccount_Schedule = exports.List_all_Schedule_for_User = exports.List_all_Schedule_for_User_MonetaryAccount = exports.READ_Schedule_for_User_MonetaryAccount = exports.CREATE_SandboxUserPerson = exports.CREATE_SandboxUserCompany = exports.List_all_RequestResponse_for_User_MonetaryAccount = exports.UPDATE_RequestResponse_for_User_MonetaryAccount = exports.READ_RequestResponse_for_User_MonetaryAccount = exports.UPDATE_RequestInquiryBatch_for_User_MonetaryAccount = exports.READ_RequestInquiryBatch_for_User_MonetaryAccount = void 0;
exports.CREATE_WhitelistSddRecurring_for_User = exports.List_all_WhitelistSddRecurring_for_User = exports.DELETE_WhitelistSddRecurring_for_User = exports.UPDATE_WhitelistSddRecurring_for_User = exports.READ_WhitelistSddRecurring_for_User = exports.CREATE_WhitelistSddOneOff_for_User = exports.List_all_WhitelistSddOneOff_for_User = exports.DELETE_WhitelistSddOneOff_for_User = exports.UPDATE_WhitelistSddOneOff_for_User = exports.READ_WhitelistSddOneOff_for_User = exports.List_all_WhitelistSdd_for_User_MonetaryAccount = exports.READ_WhitelistSdd_for_User_MonetaryAccount = exports.List_all_WhitelistSdd_for_User = exports.READ_WhitelistSdd_for_User = exports.UPDATE_UserPerson = exports.READ_UserPerson = exports.READ_UserPaymentServiceProvider = exports.UPDATE_UserCompany = exports.READ_UserCompany = exports.List_all_User = exports.READ_User = exports.List_all_TreeProgress_for_User = exports.CREATE_TransferwiseUser_for_User = exports.List_all_TransferwiseUser_for_User = exports.CREATE_TransferwiseTransferRequirement_for_User_TransferwiseQuote = exports.READ_TransferwiseTransfer_for_User_TransferwiseQuote = exports.CREATE_TransferwiseTransfer_for_User_TransferwiseQuote = exports.List_all_TransferwiseTransfer_for_User_TransferwiseQuote = exports.CREATE_TransferwiseRecipientRequirement_for_User_TransferwiseQuote = void 0;
var List_all_AdditionalTransactionInformationCategory_for_User;
(function (List_all_AdditionalTransactionInformationCategory_for_User) {
    List_all_AdditionalTransactionInformationCategory_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_AdditionalTransactionInformationCategory_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_AdditionalTransactionInformationCategory_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_AdditionalTransactionInformationCategory_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "additional-transaction-information-category"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_AdditionalTransactionInformationCategory_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_AdditionalTransactionInformationCategory_for_User.api = {
        name: "list_all_AdditionalTransactionInformationCategory_for_User",
        method: "GET",
        path: "user/:userID/additional-transaction-information-category",
        server: List_all_AdditionalTransactionInformationCategory_for_User.server,
        client: List_all_AdditionalTransactionInformationCategory_for_User.client
    };
})(List_all_AdditionalTransactionInformationCategory_for_User || (exports.List_all_AdditionalTransactionInformationCategory_for_User = List_all_AdditionalTransactionInformationCategory_for_User = {}));
var CREATE_AdditionalTransactionInformationCategoryUserDefined_for_User;
(function (CREATE_AdditionalTransactionInformationCategoryUserDefined_for_User) {
    CREATE_AdditionalTransactionInformationCategoryUserDefined_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_AdditionalTransactionInformationCategoryUserDefined_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_AdditionalTransactionInformationCategoryUserDefined_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_AdditionalTransactionInformationCategoryUserDefined_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "additional-transaction-information-category-user-defined"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_AdditionalTransactionInformationCategoryUserDefined_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_AdditionalTransactionInformationCategoryUserDefined_for_User.api = {
        name: "cREATE_AdditionalTransactionInformationCategoryUserDefined_for_User",
        method: "POST",
        path: "user/:userID/additional-transaction-information-category-user-defined",
        server: CREATE_AdditionalTransactionInformationCategoryUserDefined_for_User.server,
        client: CREATE_AdditionalTransactionInformationCategoryUserDefined_for_User.client
    };
})(CREATE_AdditionalTransactionInformationCategoryUserDefined_for_User || (exports.CREATE_AdditionalTransactionInformationCategoryUserDefined_for_User = CREATE_AdditionalTransactionInformationCategoryUserDefined_for_User = {}));
var CREATE_Attachment_for_User_MonetaryAccount;
(function (CREATE_Attachment_for_User_MonetaryAccount) {
    CREATE_Attachment_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_Attachment_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_Attachment_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_Attachment_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "attachment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_Attachment_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_Attachment_for_User_MonetaryAccount.api = {
        name: "cREATE_Attachment_for_User_MonetaryAccount",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/attachment",
        server: CREATE_Attachment_for_User_MonetaryAccount.server,
        client: CREATE_Attachment_for_User_MonetaryAccount.client
    };
})(CREATE_Attachment_for_User_MonetaryAccount || (exports.CREATE_Attachment_for_User_MonetaryAccount = CREATE_Attachment_for_User_MonetaryAccount = {}));
var READ_Attachment_for_User;
(function (READ_Attachment_for_User) {
    READ_Attachment_for_User.request = (props) => ({
        path: { "userID": props["userID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_Attachment_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_Attachment_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_Attachment_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_Attachment_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "itemId": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_Attachment_for_User.api = {
        name: "rEAD_Attachment_for_User",
        method: "GET",
        path: "user/:userID/attachment/:itemId",
        server: READ_Attachment_for_User.server,
        client: READ_Attachment_for_User.client
    };
})(READ_Attachment_for_User || (exports.READ_Attachment_for_User = READ_Attachment_for_User = {}));
var CREATE_AttachmentPublic;
(function (CREATE_AttachmentPublic) {
    CREATE_AttachmentPublic.request = (props) => ({
        path: {},
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_AttachmentPublic.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_AttachmentPublic.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_AttachmentPublic.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["attachment-public"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_AttachmentPublic.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {},
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_AttachmentPublic.api = {
        name: "cREATE_AttachmentPublic",
        method: "POST",
        path: "attachment-public",
        server: CREATE_AttachmentPublic.server,
        client: CREATE_AttachmentPublic.client
    };
})(CREATE_AttachmentPublic || (exports.CREATE_AttachmentPublic = CREATE_AttachmentPublic = {}));
var READ_AttachmentPublic;
(function (READ_AttachmentPublic) {
    READ_AttachmentPublic.request = (props) => ({
        path: { "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_AttachmentPublic.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_AttachmentPublic.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_AttachmentPublic.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["attachment-public", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_AttachmentPublic.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "itemId": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_AttachmentPublic.api = {
        name: "rEAD_AttachmentPublic",
        method: "GET",
        path: "attachment-public/:itemId",
        server: READ_AttachmentPublic.server,
        client: READ_AttachmentPublic.client
    };
})(READ_AttachmentPublic || (exports.READ_AttachmentPublic = READ_AttachmentPublic = {}));
var CREATE_Avatar;
(function (CREATE_Avatar) {
    CREATE_Avatar.request = (props) => ({
        path: {},
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_Avatar.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_Avatar.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_Avatar.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["avatar"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_Avatar.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {},
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_Avatar.api = {
        name: "cREATE_Avatar",
        method: "POST",
        path: "avatar",
        server: CREATE_Avatar.server,
        client: CREATE_Avatar.client
    };
})(CREATE_Avatar || (exports.CREATE_Avatar = CREATE_Avatar = {}));
var READ_Avatar;
(function (READ_Avatar) {
    READ_Avatar.request = (props) => ({
        path: { "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_Avatar.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_Avatar.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_Avatar.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["avatar", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_Avatar.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "itemId": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_Avatar.api = {
        name: "rEAD_Avatar",
        method: "GET",
        path: "avatar/:itemId",
        server: READ_Avatar.server,
        client: READ_Avatar.client
    };
})(READ_Avatar || (exports.READ_Avatar = READ_Avatar = {}));
var List_all_BillingContractSubscription_for_User;
(function (List_all_BillingContractSubscription_for_User) {
    List_all_BillingContractSubscription_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_BillingContractSubscription_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_BillingContractSubscription_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_BillingContractSubscription_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "billing-contract-subscription"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_BillingContractSubscription_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_BillingContractSubscription_for_User.api = {
        name: "list_all_BillingContractSubscription_for_User",
        method: "GET",
        path: "user/:userID/billing-contract-subscription",
        server: List_all_BillingContractSubscription_for_User.server,
        client: List_all_BillingContractSubscription_for_User.client
    };
})(List_all_BillingContractSubscription_for_User || (exports.List_all_BillingContractSubscription_for_User = List_all_BillingContractSubscription_for_User = {}));
var READ_BunqmeFundraiserProfile_for_User;
(function (READ_BunqmeFundraiserProfile_for_User) {
    READ_BunqmeFundraiserProfile_for_User.request = (props) => ({
        path: { "userID": props["userID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_BunqmeFundraiserProfile_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_BunqmeFundraiserProfile_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_BunqmeFundraiserProfile_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "bunqme-fundraiser-profile", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_BunqmeFundraiserProfile_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "itemId": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_BunqmeFundraiserProfile_for_User.api = {
        name: "rEAD_BunqmeFundraiserProfile_for_User",
        method: "GET",
        path: "user/:userID/bunqme-fundraiser-profile/:itemId",
        server: READ_BunqmeFundraiserProfile_for_User.server,
        client: READ_BunqmeFundraiserProfile_for_User.client
    };
})(READ_BunqmeFundraiserProfile_for_User || (exports.READ_BunqmeFundraiserProfile_for_User = READ_BunqmeFundraiserProfile_for_User = {}));
var List_all_BunqmeFundraiserProfile_for_User;
(function (List_all_BunqmeFundraiserProfile_for_User) {
    List_all_BunqmeFundraiserProfile_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_BunqmeFundraiserProfile_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_BunqmeFundraiserProfile_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_BunqmeFundraiserProfile_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "bunqme-fundraiser-profile"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_BunqmeFundraiserProfile_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_BunqmeFundraiserProfile_for_User.api = {
        name: "list_all_BunqmeFundraiserProfile_for_User",
        method: "GET",
        path: "user/:userID/bunqme-fundraiser-profile",
        server: List_all_BunqmeFundraiserProfile_for_User.server,
        client: List_all_BunqmeFundraiserProfile_for_User.client
    };
})(List_all_BunqmeFundraiserProfile_for_User || (exports.List_all_BunqmeFundraiserProfile_for_User = List_all_BunqmeFundraiserProfile_for_User = {}));
var READ_BunqmeFundraiserResult_for_User_MonetaryAccount;
(function (READ_BunqmeFundraiserResult_for_User_MonetaryAccount) {
    READ_BunqmeFundraiserResult_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_BunqmeFundraiserResult_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_BunqmeFundraiserResult_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_BunqmeFundraiserResult_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "bunqme-fundraiser-result", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_BunqmeFundraiserResult_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_BunqmeFundraiserResult_for_User_MonetaryAccount.api = {
        name: "rEAD_BunqmeFundraiserResult_for_User_MonetaryAccount",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/bunqme-fundraiser-result/:itemId",
        server: READ_BunqmeFundraiserResult_for_User_MonetaryAccount.server,
        client: READ_BunqmeFundraiserResult_for_User_MonetaryAccount.client
    };
})(READ_BunqmeFundraiserResult_for_User_MonetaryAccount || (exports.READ_BunqmeFundraiserResult_for_User_MonetaryAccount = READ_BunqmeFundraiserResult_for_User_MonetaryAccount = {}));
var List_all_BunqmeTab_for_User_MonetaryAccount;
(function (List_all_BunqmeTab_for_User_MonetaryAccount) {
    List_all_BunqmeTab_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_BunqmeTab_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_BunqmeTab_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_BunqmeTab_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "bunqme-tab"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_BunqmeTab_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_BunqmeTab_for_User_MonetaryAccount.api = {
        name: "list_all_BunqmeTab_for_User_MonetaryAccount",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/bunqme-tab",
        server: List_all_BunqmeTab_for_User_MonetaryAccount.server,
        client: List_all_BunqmeTab_for_User_MonetaryAccount.client
    };
})(List_all_BunqmeTab_for_User_MonetaryAccount || (exports.List_all_BunqmeTab_for_User_MonetaryAccount = List_all_BunqmeTab_for_User_MonetaryAccount = {}));
var CREATE_BunqmeTab_for_User_MonetaryAccount;
(function (CREATE_BunqmeTab_for_User_MonetaryAccount) {
    CREATE_BunqmeTab_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_BunqmeTab_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_BunqmeTab_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_BunqmeTab_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "bunqme-tab"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_BunqmeTab_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_BunqmeTab_for_User_MonetaryAccount.api = {
        name: "cREATE_BunqmeTab_for_User_MonetaryAccount",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/bunqme-tab",
        server: CREATE_BunqmeTab_for_User_MonetaryAccount.server,
        client: CREATE_BunqmeTab_for_User_MonetaryAccount.client
    };
})(CREATE_BunqmeTab_for_User_MonetaryAccount || (exports.CREATE_BunqmeTab_for_User_MonetaryAccount = CREATE_BunqmeTab_for_User_MonetaryAccount = {}));
var READ_BunqmeTab_for_User_MonetaryAccount;
(function (READ_BunqmeTab_for_User_MonetaryAccount) {
    READ_BunqmeTab_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_BunqmeTab_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_BunqmeTab_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_BunqmeTab_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "bunqme-tab", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_BunqmeTab_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_BunqmeTab_for_User_MonetaryAccount.api = {
        name: "rEAD_BunqmeTab_for_User_MonetaryAccount",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/bunqme-tab/:itemId",
        server: READ_BunqmeTab_for_User_MonetaryAccount.server,
        client: READ_BunqmeTab_for_User_MonetaryAccount.client
    };
})(READ_BunqmeTab_for_User_MonetaryAccount || (exports.READ_BunqmeTab_for_User_MonetaryAccount = READ_BunqmeTab_for_User_MonetaryAccount = {}));
var UPDATE_BunqmeTab_for_User_MonetaryAccount;
(function (UPDATE_BunqmeTab_for_User_MonetaryAccount) {
    UPDATE_BunqmeTab_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_BunqmeTab_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_BunqmeTab_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_BunqmeTab_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "bunqme-tab", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_BunqmeTab_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_BunqmeTab_for_User_MonetaryAccount.api = {
        name: "uPDATE_BunqmeTab_for_User_MonetaryAccount",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/bunqme-tab/:itemId",
        server: UPDATE_BunqmeTab_for_User_MonetaryAccount.server,
        client: UPDATE_BunqmeTab_for_User_MonetaryAccount.client
    };
})(UPDATE_BunqmeTab_for_User_MonetaryAccount || (exports.UPDATE_BunqmeTab_for_User_MonetaryAccount = UPDATE_BunqmeTab_for_User_MonetaryAccount = {}));
var READ_BunqmeTabResultResponse_for_User_MonetaryAccount;
(function (READ_BunqmeTabResultResponse_for_User_MonetaryAccount) {
    READ_BunqmeTabResultResponse_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_BunqmeTabResultResponse_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_BunqmeTabResultResponse_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_BunqmeTabResultResponse_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "bunqme-tab-result-response", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_BunqmeTabResultResponse_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_BunqmeTabResultResponse_for_User_MonetaryAccount.api = {
        name: "rEAD_BunqmeTabResultResponse_for_User_MonetaryAccount",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/bunqme-tab-result-response/:itemId",
        server: READ_BunqmeTabResultResponse_for_User_MonetaryAccount.server,
        client: READ_BunqmeTabResultResponse_for_User_MonetaryAccount.client
    };
})(READ_BunqmeTabResultResponse_for_User_MonetaryAccount || (exports.READ_BunqmeTabResultResponse_for_User_MonetaryAccount = READ_BunqmeTabResultResponse_for_User_MonetaryAccount = {}));
var READ_CallbackUrl_for_User_OauthClient;
(function (READ_CallbackUrl_for_User_OauthClient) {
    READ_CallbackUrl_for_User_OauthClient.request = (props) => ({
        path: { "userID": props["userID"], "oauth-clientID": props["oauth-clientID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_CallbackUrl_for_User_OauthClient.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_CallbackUrl_for_User_OauthClient.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_CallbackUrl_for_User_OauthClient.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "oauth-client", serialization.serialize(it.path["oauth-clientID"]), "callback-url", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_CallbackUrl_for_User_OauthClient.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "oauth-clientID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_CallbackUrl_for_User_OauthClient.api = {
        name: "rEAD_CallbackUrl_for_User_OauthClient",
        method: "GET",
        path: "user/:userID/oauth-client/:oauth-clientID/callback-url/:itemId",
        server: READ_CallbackUrl_for_User_OauthClient.server,
        client: READ_CallbackUrl_for_User_OauthClient.client
    };
})(READ_CallbackUrl_for_User_OauthClient || (exports.READ_CallbackUrl_for_User_OauthClient = READ_CallbackUrl_for_User_OauthClient = {}));
var UPDATE_CallbackUrl_for_User_OauthClient;
(function (UPDATE_CallbackUrl_for_User_OauthClient) {
    UPDATE_CallbackUrl_for_User_OauthClient.request = (props) => ({
        path: { "userID": props["userID"], "oauth-clientID": props["oauth-clientID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_CallbackUrl_for_User_OauthClient.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_CallbackUrl_for_User_OauthClient.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_CallbackUrl_for_User_OauthClient.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "oauth-client", serialization.serialize(it.path["oauth-clientID"]), "callback-url", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_CallbackUrl_for_User_OauthClient.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "oauth-clientID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_CallbackUrl_for_User_OauthClient.api = {
        name: "uPDATE_CallbackUrl_for_User_OauthClient",
        method: "PUT",
        path: "user/:userID/oauth-client/:oauth-clientID/callback-url/:itemId",
        server: UPDATE_CallbackUrl_for_User_OauthClient.server,
        client: UPDATE_CallbackUrl_for_User_OauthClient.client
    };
})(UPDATE_CallbackUrl_for_User_OauthClient || (exports.UPDATE_CallbackUrl_for_User_OauthClient = UPDATE_CallbackUrl_for_User_OauthClient = {}));
var DELETE_CallbackUrl_for_User_OauthClient;
(function (DELETE_CallbackUrl_for_User_OauthClient) {
    DELETE_CallbackUrl_for_User_OauthClient.request = (props) => ({
        path: { "userID": props["userID"], "oauth-clientID": props["oauth-clientID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_CallbackUrl_for_User_OauthClient.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_CallbackUrl_for_User_OauthClient.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_CallbackUrl_for_User_OauthClient.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "oauth-client", serialization.serialize(it.path["oauth-clientID"]), "callback-url", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_CallbackUrl_for_User_OauthClient.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "oauth-clientID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_CallbackUrl_for_User_OauthClient.api = {
        name: "dELETE_CallbackUrl_for_User_OauthClient",
        method: "DELETE",
        path: "user/:userID/oauth-client/:oauth-clientID/callback-url/:itemId",
        server: DELETE_CallbackUrl_for_User_OauthClient.server,
        client: DELETE_CallbackUrl_for_User_OauthClient.client
    };
})(DELETE_CallbackUrl_for_User_OauthClient || (exports.DELETE_CallbackUrl_for_User_OauthClient = DELETE_CallbackUrl_for_User_OauthClient = {}));
var List_all_CallbackUrl_for_User_OauthClient;
(function (List_all_CallbackUrl_for_User_OauthClient) {
    List_all_CallbackUrl_for_User_OauthClient.request = (props) => ({
        path: { "userID": props["userID"], "oauth-clientID": props["oauth-clientID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_CallbackUrl_for_User_OauthClient.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_CallbackUrl_for_User_OauthClient.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_CallbackUrl_for_User_OauthClient.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "oauth-client", serialization.serialize(it.path["oauth-clientID"]), "callback-url"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_CallbackUrl_for_User_OauthClient.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "oauth-clientID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_CallbackUrl_for_User_OauthClient.api = {
        name: "list_all_CallbackUrl_for_User_OauthClient",
        method: "GET",
        path: "user/:userID/oauth-client/:oauth-clientID/callback-url",
        server: List_all_CallbackUrl_for_User_OauthClient.server,
        client: List_all_CallbackUrl_for_User_OauthClient.client
    };
})(List_all_CallbackUrl_for_User_OauthClient || (exports.List_all_CallbackUrl_for_User_OauthClient = List_all_CallbackUrl_for_User_OauthClient = {}));
var CREATE_CallbackUrl_for_User_OauthClient;
(function (CREATE_CallbackUrl_for_User_OauthClient) {
    CREATE_CallbackUrl_for_User_OauthClient.request = (props) => ({
        path: { "userID": props["userID"], "oauth-clientID": props["oauth-clientID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_CallbackUrl_for_User_OauthClient.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_CallbackUrl_for_User_OauthClient.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_CallbackUrl_for_User_OauthClient.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "oauth-client", serialization.serialize(it.path["oauth-clientID"]), "callback-url"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_CallbackUrl_for_User_OauthClient.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "oauth-clientID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_CallbackUrl_for_User_OauthClient.api = {
        name: "cREATE_CallbackUrl_for_User_OauthClient",
        method: "POST",
        path: "user/:userID/oauth-client/:oauth-clientID/callback-url",
        server: CREATE_CallbackUrl_for_User_OauthClient.server,
        client: CREATE_CallbackUrl_for_User_OauthClient.client
    };
})(CREATE_CallbackUrl_for_User_OauthClient || (exports.CREATE_CallbackUrl_for_User_OauthClient = CREATE_CallbackUrl_for_User_OauthClient = {}));
var READ_Card_for_User;
(function (READ_Card_for_User) {
    READ_Card_for_User.request = (props) => ({
        path: { "userID": props["userID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_Card_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_Card_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_Card_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "card", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_Card_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "itemId": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_Card_for_User.api = {
        name: "rEAD_Card_for_User",
        method: "GET",
        path: "user/:userID/card/:itemId",
        server: READ_Card_for_User.server,
        client: READ_Card_for_User.client
    };
})(READ_Card_for_User || (exports.READ_Card_for_User = READ_Card_for_User = {}));
var UPDATE_Card_for_User;
(function (UPDATE_Card_for_User) {
    UPDATE_Card_for_User.request = (props) => ({
        path: { "userID": props["userID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_Card_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_Card_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_Card_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "card", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_Card_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "itemId": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_Card_for_User.api = {
        name: "uPDATE_Card_for_User",
        method: "PUT",
        path: "user/:userID/card/:itemId",
        server: UPDATE_Card_for_User.server,
        client: UPDATE_Card_for_User.client
    };
})(UPDATE_Card_for_User || (exports.UPDATE_Card_for_User = UPDATE_Card_for_User = {}));
var List_all_Card_for_User;
(function (List_all_Card_for_User) {
    List_all_Card_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_Card_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Card_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Card_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "card"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_Card_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_Card_for_User.api = {
        name: "list_all_Card_for_User",
        method: "GET",
        path: "user/:userID/card",
        server: List_all_Card_for_User.server,
        client: List_all_Card_for_User.client
    };
})(List_all_Card_for_User || (exports.List_all_Card_for_User = List_all_Card_for_User = {}));
var CREATE_CardBatch_for_User;
(function (CREATE_CardBatch_for_User) {
    CREATE_CardBatch_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_CardBatch_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_CardBatch_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_CardBatch_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "card-batch"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_CardBatch_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_CardBatch_for_User.api = {
        name: "cREATE_CardBatch_for_User",
        method: "POST",
        path: "user/:userID/card-batch",
        server: CREATE_CardBatch_for_User.server,
        client: CREATE_CardBatch_for_User.client
    };
})(CREATE_CardBatch_for_User || (exports.CREATE_CardBatch_for_User = CREATE_CardBatch_for_User = {}));
var CREATE_CardBatchReplace_for_User;
(function (CREATE_CardBatchReplace_for_User) {
    CREATE_CardBatchReplace_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_CardBatchReplace_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_CardBatchReplace_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_CardBatchReplace_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "card-batch-replace"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_CardBatchReplace_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_CardBatchReplace_for_User.api = {
        name: "cREATE_CardBatchReplace_for_User",
        method: "POST",
        path: "user/:userID/card-batch-replace",
        server: CREATE_CardBatchReplace_for_User.server,
        client: CREATE_CardBatchReplace_for_User.client
    };
})(CREATE_CardBatchReplace_for_User || (exports.CREATE_CardBatchReplace_for_User = CREATE_CardBatchReplace_for_User = {}));
var CREATE_CardCredit_for_User;
(function (CREATE_CardCredit_for_User) {
    CREATE_CardCredit_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_CardCredit_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_CardCredit_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_CardCredit_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "card-credit"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_CardCredit_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_CardCredit_for_User.api = {
        name: "cREATE_CardCredit_for_User",
        method: "POST",
        path: "user/:userID/card-credit",
        server: CREATE_CardCredit_for_User.server,
        client: CREATE_CardCredit_for_User.client
    };
})(CREATE_CardCredit_for_User || (exports.CREATE_CardCredit_for_User = CREATE_CardCredit_for_User = {}));
var CREATE_CardDebit_for_User;
(function (CREATE_CardDebit_for_User) {
    CREATE_CardDebit_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_CardDebit_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_CardDebit_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_CardDebit_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "card-debit"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_CardDebit_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_CardDebit_for_User.api = {
        name: "cREATE_CardDebit_for_User",
        method: "POST",
        path: "user/:userID/card-debit",
        server: CREATE_CardDebit_for_User.server,
        client: CREATE_CardDebit_for_User.client
    };
})(CREATE_CardDebit_for_User || (exports.CREATE_CardDebit_for_User = CREATE_CardDebit_for_User = {}));
var List_all_CardName_for_User;
(function (List_all_CardName_for_User) {
    List_all_CardName_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_CardName_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_CardName_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_CardName_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "card-name"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_CardName_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_CardName_for_User.api = {
        name: "list_all_CardName_for_User",
        method: "GET",
        path: "user/:userID/card-name",
        server: List_all_CardName_for_User.server,
        client: List_all_CardName_for_User.client
    };
})(List_all_CardName_for_User || (exports.List_all_CardName_for_User = List_all_CardName_for_User = {}));
var List_all_CertificatePinned_for_User;
(function (List_all_CertificatePinned_for_User) {
    List_all_CertificatePinned_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_CertificatePinned_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_CertificatePinned_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_CertificatePinned_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "certificate-pinned"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_CertificatePinned_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_CertificatePinned_for_User.api = {
        name: "list_all_CertificatePinned_for_User",
        method: "GET",
        path: "user/:userID/certificate-pinned",
        server: List_all_CertificatePinned_for_User.server,
        client: List_all_CertificatePinned_for_User.client
    };
})(List_all_CertificatePinned_for_User || (exports.List_all_CertificatePinned_for_User = List_all_CertificatePinned_for_User = {}));
var CREATE_CertificatePinned_for_User;
(function (CREATE_CertificatePinned_for_User) {
    CREATE_CertificatePinned_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_CertificatePinned_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_CertificatePinned_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_CertificatePinned_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "certificate-pinned"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_CertificatePinned_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_CertificatePinned_for_User.api = {
        name: "cREATE_CertificatePinned_for_User",
        method: "POST",
        path: "user/:userID/certificate-pinned",
        server: CREATE_CertificatePinned_for_User.server,
        client: CREATE_CertificatePinned_for_User.client
    };
})(CREATE_CertificatePinned_for_User || (exports.CREATE_CertificatePinned_for_User = CREATE_CertificatePinned_for_User = {}));
var READ_CertificatePinned_for_User;
(function (READ_CertificatePinned_for_User) {
    READ_CertificatePinned_for_User.request = (props) => ({
        path: { "userID": props["userID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_CertificatePinned_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_CertificatePinned_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_CertificatePinned_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "certificate-pinned", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_CertificatePinned_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "itemId": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_CertificatePinned_for_User.api = {
        name: "rEAD_CertificatePinned_for_User",
        method: "GET",
        path: "user/:userID/certificate-pinned/:itemId",
        server: READ_CertificatePinned_for_User.server,
        client: READ_CertificatePinned_for_User.client
    };
})(READ_CertificatePinned_for_User || (exports.READ_CertificatePinned_for_User = READ_CertificatePinned_for_User = {}));
var DELETE_CertificatePinned_for_User;
(function (DELETE_CertificatePinned_for_User) {
    DELETE_CertificatePinned_for_User.request = (props) => ({
        path: { "userID": props["userID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_CertificatePinned_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_CertificatePinned_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_CertificatePinned_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "certificate-pinned", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_CertificatePinned_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "itemId": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_CertificatePinned_for_User.api = {
        name: "dELETE_CertificatePinned_for_User",
        method: "DELETE",
        path: "user/:userID/certificate-pinned/:itemId",
        server: DELETE_CertificatePinned_for_User.server,
        client: DELETE_CertificatePinned_for_User.client
    };
})(DELETE_CertificatePinned_for_User || (exports.DELETE_CertificatePinned_for_User = DELETE_CertificatePinned_for_User = {}));
var READ_ChallengeRequest_for_User;
(function (READ_ChallengeRequest_for_User) {
    READ_ChallengeRequest_for_User.request = (props) => ({
        path: { "userID": props["userID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_ChallengeRequest_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_ChallengeRequest_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_ChallengeRequest_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "challenge-request", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_ChallengeRequest_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "itemId": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_ChallengeRequest_for_User.api = {
        name: "rEAD_ChallengeRequest_for_User",
        method: "GET",
        path: "user/:userID/challenge-request/:itemId",
        server: READ_ChallengeRequest_for_User.server,
        client: READ_ChallengeRequest_for_User.client
    };
})(READ_ChallengeRequest_for_User || (exports.READ_ChallengeRequest_for_User = READ_ChallengeRequest_for_User = {}));
var UPDATE_ChallengeRequest_for_User;
(function (UPDATE_ChallengeRequest_for_User) {
    UPDATE_ChallengeRequest_for_User.request = (props) => ({
        path: { "userID": props["userID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_ChallengeRequest_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_ChallengeRequest_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_ChallengeRequest_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "challenge-request", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_ChallengeRequest_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "itemId": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_ChallengeRequest_for_User.api = {
        name: "uPDATE_ChallengeRequest_for_User",
        method: "PUT",
        path: "user/:userID/challenge-request/:itemId",
        server: UPDATE_ChallengeRequest_for_User.server,
        client: UPDATE_ChallengeRequest_for_User.client
    };
})(UPDATE_ChallengeRequest_for_User || (exports.UPDATE_ChallengeRequest_for_User = UPDATE_ChallengeRequest_for_User = {}));
var List_all_Company_for_User;
(function (List_all_Company_for_User) {
    List_all_Company_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_Company_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Company_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Company_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "company"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_Company_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_Company_for_User.api = {
        name: "list_all_Company_for_User",
        method: "GET",
        path: "user/:userID/company",
        server: List_all_Company_for_User.server,
        client: List_all_Company_for_User.client
    };
})(List_all_Company_for_User || (exports.List_all_Company_for_User = List_all_Company_for_User = {}));
var CREATE_Company_for_User;
(function (CREATE_Company_for_User) {
    CREATE_Company_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_Company_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_Company_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_Company_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "company"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_Company_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_Company_for_User.api = {
        name: "cREATE_Company_for_User",
        method: "POST",
        path: "user/:userID/company",
        server: CREATE_Company_for_User.server,
        client: CREATE_Company_for_User.client
    };
})(CREATE_Company_for_User || (exports.CREATE_Company_for_User = CREATE_Company_for_User = {}));
var READ_Company_for_User;
(function (READ_Company_for_User) {
    READ_Company_for_User.request = (props) => ({
        path: { "userID": props["userID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_Company_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_Company_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_Company_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "company", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_Company_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "itemId": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_Company_for_User.api = {
        name: "rEAD_Company_for_User",
        method: "GET",
        path: "user/:userID/company/:itemId",
        server: READ_Company_for_User.server,
        client: READ_Company_for_User.client
    };
})(READ_Company_for_User || (exports.READ_Company_for_User = READ_Company_for_User = {}));
var UPDATE_Company_for_User;
(function (UPDATE_Company_for_User) {
    UPDATE_Company_for_User.request = (props) => ({
        path: { "userID": props["userID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_Company_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_Company_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_Company_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "company", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_Company_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "itemId": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_Company_for_User.api = {
        name: "uPDATE_Company_for_User",
        method: "PUT",
        path: "user/:userID/company/:itemId",
        server: UPDATE_Company_for_User.server,
        client: UPDATE_Company_for_User.client
    };
})(UPDATE_Company_for_User || (exports.UPDATE_Company_for_User = UPDATE_Company_for_User = {}));
var CREATE_ConfirmationOfFunds_for_User;
(function (CREATE_ConfirmationOfFunds_for_User) {
    CREATE_ConfirmationOfFunds_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_ConfirmationOfFunds_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_ConfirmationOfFunds_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_ConfirmationOfFunds_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "confirmation-of-funds"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_ConfirmationOfFunds_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_ConfirmationOfFunds_for_User.api = {
        name: "cREATE_ConfirmationOfFunds_for_User",
        method: "POST",
        path: "user/:userID/confirmation-of-funds",
        server: CREATE_ConfirmationOfFunds_for_User.server,
        client: CREATE_ConfirmationOfFunds_for_User.client
    };
})(CREATE_ConfirmationOfFunds_for_User || (exports.CREATE_ConfirmationOfFunds_for_User = CREATE_ConfirmationOfFunds_for_User = {}));
var List_all_Content_for_User_ChatConversation_Attachment;
(function (List_all_Content_for_User_ChatConversation_Attachment) {
    List_all_Content_for_User_ChatConversation_Attachment.request = (props) => ({
        path: { "userID": props["userID"], "chat-conversationID": props["chat-conversationID"], "attachmentID": props["attachmentID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_Content_for_User_ChatConversation_Attachment.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Content_for_User_ChatConversation_Attachment.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Content_for_User_ChatConversation_Attachment.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "chat-conversation", serialization.serialize(it.path["chat-conversationID"]), "attachment", serialization.serialize(it.path["attachmentID"]), "content"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_Content_for_User_ChatConversation_Attachment.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "chat-conversationID": serialization.deserialize(it.path[3]), "attachmentID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_Content_for_User_ChatConversation_Attachment.api = {
        name: "list_all_Content_for_User_ChatConversation_Attachment",
        method: "GET",
        path: "user/:userID/chat-conversation/:chat-conversationID/attachment/:attachmentID/content",
        server: List_all_Content_for_User_ChatConversation_Attachment.server,
        client: List_all_Content_for_User_ChatConversation_Attachment.client
    };
})(List_all_Content_for_User_ChatConversation_Attachment || (exports.List_all_Content_for_User_ChatConversation_Attachment = List_all_Content_for_User_ChatConversation_Attachment = {}));
var List_all_Content_for_User_MonetaryAccount_Attachment;
(function (List_all_Content_for_User_MonetaryAccount_Attachment) {
    List_all_Content_for_User_MonetaryAccount_Attachment.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "attachmentID": props["attachmentID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_Content_for_User_MonetaryAccount_Attachment.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Content_for_User_MonetaryAccount_Attachment.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Content_for_User_MonetaryAccount_Attachment.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "attachment", serialization.serialize(it.path["attachmentID"]), "content"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_Content_for_User_MonetaryAccount_Attachment.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "attachmentID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_Content_for_User_MonetaryAccount_Attachment.api = {
        name: "list_all_Content_for_User_MonetaryAccount_Attachment",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/attachment/:attachmentID/content",
        server: List_all_Content_for_User_MonetaryAccount_Attachment.server,
        client: List_all_Content_for_User_MonetaryAccount_Attachment.client
    };
})(List_all_Content_for_User_MonetaryAccount_Attachment || (exports.List_all_Content_for_User_MonetaryAccount_Attachment = List_all_Content_for_User_MonetaryAccount_Attachment = {}));
var List_all_Content_for_AttachmentPublic;
(function (List_all_Content_for_AttachmentPublic) {
    List_all_Content_for_AttachmentPublic.request = (props) => ({
        path: { "attachment-publicUUID": props["attachment-publicUUID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_Content_for_AttachmentPublic.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Content_for_AttachmentPublic.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Content_for_AttachmentPublic.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["attachment-public", serialization.serialize(it.path["attachment-publicUUID"]), "content"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_Content_for_AttachmentPublic.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "attachment-publicUUID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_Content_for_AttachmentPublic.api = {
        name: "list_all_Content_for_AttachmentPublic",
        method: "GET",
        path: "attachment-public/:attachment-publicUUID/content",
        server: List_all_Content_for_AttachmentPublic.server,
        client: List_all_Content_for_AttachmentPublic.client
    };
})(List_all_Content_for_AttachmentPublic || (exports.List_all_Content_for_AttachmentPublic = List_all_Content_for_AttachmentPublic = {}));
var List_all_Content_for_User_Attachment;
(function (List_all_Content_for_User_Attachment) {
    List_all_Content_for_User_Attachment.request = (props) => ({
        path: { "userID": props["userID"], "attachmentID": props["attachmentID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_Content_for_User_Attachment.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Content_for_User_Attachment.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Content_for_User_Attachment.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "attachment", serialization.serialize(it.path["attachmentID"]), "content"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_Content_for_User_Attachment.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "attachmentID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_Content_for_User_Attachment.api = {
        name: "list_all_Content_for_User_Attachment",
        method: "GET",
        path: "user/:userID/attachment/:attachmentID/content",
        server: List_all_Content_for_User_Attachment.server,
        client: List_all_Content_for_User_Attachment.client
    };
})(List_all_Content_for_User_Attachment || (exports.List_all_Content_for_User_Attachment = List_all_Content_for_User_Attachment = {}));
var List_all_Content_for_User_ExportAnnualOverview;
(function (List_all_Content_for_User_ExportAnnualOverview) {
    List_all_Content_for_User_ExportAnnualOverview.request = (props) => ({
        path: { "userID": props["userID"], "export-annual-overviewID": props["export-annual-overviewID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_Content_for_User_ExportAnnualOverview.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Content_for_User_ExportAnnualOverview.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Content_for_User_ExportAnnualOverview.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "export-annual-overview", serialization.serialize(it.path["export-annual-overviewID"]), "content"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_Content_for_User_ExportAnnualOverview.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "export-annual-overviewID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_Content_for_User_ExportAnnualOverview.api = {
        name: "list_all_Content_for_User_ExportAnnualOverview",
        method: "GET",
        path: "user/:userID/export-annual-overview/:export-annual-overviewID/content",
        server: List_all_Content_for_User_ExportAnnualOverview.server,
        client: List_all_Content_for_User_ExportAnnualOverview.client
    };
})(List_all_Content_for_User_ExportAnnualOverview || (exports.List_all_Content_for_User_ExportAnnualOverview = List_all_Content_for_User_ExportAnnualOverview = {}));
var List_all_Content_for_User_MonetaryAccount_ExportRib;
(function (List_all_Content_for_User_MonetaryAccount_ExportRib) {
    List_all_Content_for_User_MonetaryAccount_ExportRib.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "export-ribID": props["export-ribID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_Content_for_User_MonetaryAccount_ExportRib.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Content_for_User_MonetaryAccount_ExportRib.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Content_for_User_MonetaryAccount_ExportRib.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "export-rib", serialization.serialize(it.path["export-ribID"]), "content"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_Content_for_User_MonetaryAccount_ExportRib.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "export-ribID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_Content_for_User_MonetaryAccount_ExportRib.api = {
        name: "list_all_Content_for_User_MonetaryAccount_ExportRib",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/export-rib/:export-ribID/content",
        server: List_all_Content_for_User_MonetaryAccount_ExportRib.server,
        client: List_all_Content_for_User_MonetaryAccount_ExportRib.client
    };
})(List_all_Content_for_User_MonetaryAccount_ExportRib || (exports.List_all_Content_for_User_MonetaryAccount_ExportRib = List_all_Content_for_User_MonetaryAccount_ExportRib = {}));
var List_all_Content_for_User_Card_ExportStatementCard;
(function (List_all_Content_for_User_Card_ExportStatementCard) {
    List_all_Content_for_User_Card_ExportStatementCard.request = (props) => ({
        path: { "userID": props["userID"], "cardID": props["cardID"], "export-statement-cardID": props["export-statement-cardID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_Content_for_User_Card_ExportStatementCard.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Content_for_User_Card_ExportStatementCard.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Content_for_User_Card_ExportStatementCard.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "card", serialization.serialize(it.path["cardID"]), "export-statement-card", serialization.serialize(it.path["export-statement-cardID"]), "content"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_Content_for_User_Card_ExportStatementCard.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "cardID": serialization.deserialize(it.path[3]), "export-statement-cardID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_Content_for_User_Card_ExportStatementCard.api = {
        name: "list_all_Content_for_User_Card_ExportStatementCard",
        method: "GET",
        path: "user/:userID/card/:cardID/export-statement-card/:export-statement-cardID/content",
        server: List_all_Content_for_User_Card_ExportStatementCard.server,
        client: List_all_Content_for_User_Card_ExportStatementCard.client
    };
})(List_all_Content_for_User_Card_ExportStatementCard || (exports.List_all_Content_for_User_Card_ExportStatementCard = List_all_Content_for_User_Card_ExportStatementCard = {}));
var List_all_Content_for_User_MonetaryAccount_CustomerStatement;
(function (List_all_Content_for_User_MonetaryAccount_CustomerStatement) {
    List_all_Content_for_User_MonetaryAccount_CustomerStatement.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "customer-statementID": props["customer-statementID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_Content_for_User_MonetaryAccount_CustomerStatement.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Content_for_User_MonetaryAccount_CustomerStatement.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Content_for_User_MonetaryAccount_CustomerStatement.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "customer-statement", serialization.serialize(it.path["customer-statementID"]), "content"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_Content_for_User_MonetaryAccount_CustomerStatement.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "customer-statementID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_Content_for_User_MonetaryAccount_CustomerStatement.api = {
        name: "list_all_Content_for_User_MonetaryAccount_CustomerStatement",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/customer-statement/:customer-statementID/content",
        server: List_all_Content_for_User_MonetaryAccount_CustomerStatement.server,
        client: List_all_Content_for_User_MonetaryAccount_CustomerStatement.client
    };
})(List_all_Content_for_User_MonetaryAccount_CustomerStatement || (exports.List_all_Content_for_User_MonetaryAccount_CustomerStatement = List_all_Content_for_User_MonetaryAccount_CustomerStatement = {}));
var List_all_Content_for_User_MonetaryAccount_Event_Statement;
(function (List_all_Content_for_User_MonetaryAccount_Event_Statement) {
    List_all_Content_for_User_MonetaryAccount_Event_Statement.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "eventID": props["eventID"], "statementID": props["statementID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_Content_for_User_MonetaryAccount_Event_Statement.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Content_for_User_MonetaryAccount_Event_Statement.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Content_for_User_MonetaryAccount_Event_Statement.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "event", serialization.serialize(it.path["eventID"]), "statement", serialization.serialize(it.path["statementID"]), "content"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_Content_for_User_MonetaryAccount_Event_Statement.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "eventID": serialization.deserialize(it.path[5]), "statementID": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_Content_for_User_MonetaryAccount_Event_Statement.api = {
        name: "list_all_Content_for_User_MonetaryAccount_Event_Statement",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/event/:eventID/statement/:statementID/content",
        server: List_all_Content_for_User_MonetaryAccount_Event_Statement.server,
        client: List_all_Content_for_User_MonetaryAccount_Event_Statement.client
    };
})(List_all_Content_for_User_MonetaryAccount_Event_Statement || (exports.List_all_Content_for_User_MonetaryAccount_Event_Statement = List_all_Content_for_User_MonetaryAccount_Event_Statement = {}));
var READ_CredentialPasswordIp_for_User;
(function (READ_CredentialPasswordIp_for_User) {
    READ_CredentialPasswordIp_for_User.request = (props) => ({
        path: { "userID": props["userID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_CredentialPasswordIp_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_CredentialPasswordIp_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_CredentialPasswordIp_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "credential-password-ip", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_CredentialPasswordIp_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "itemId": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_CredentialPasswordIp_for_User.api = {
        name: "rEAD_CredentialPasswordIp_for_User",
        method: "GET",
        path: "user/:userID/credential-password-ip/:itemId",
        server: READ_CredentialPasswordIp_for_User.server,
        client: READ_CredentialPasswordIp_for_User.client
    };
})(READ_CredentialPasswordIp_for_User || (exports.READ_CredentialPasswordIp_for_User = READ_CredentialPasswordIp_for_User = {}));
var List_all_CredentialPasswordIp_for_User;
(function (List_all_CredentialPasswordIp_for_User) {
    List_all_CredentialPasswordIp_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_CredentialPasswordIp_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_CredentialPasswordIp_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_CredentialPasswordIp_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "credential-password-ip"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_CredentialPasswordIp_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_CredentialPasswordIp_for_User.api = {
        name: "list_all_CredentialPasswordIp_for_User",
        method: "GET",
        path: "user/:userID/credential-password-ip",
        server: List_all_CredentialPasswordIp_for_User.server,
        client: List_all_CredentialPasswordIp_for_User.client
    };
})(List_all_CredentialPasswordIp_for_User || (exports.List_all_CredentialPasswordIp_for_User = List_all_CredentialPasswordIp_for_User = {}));
var List_all_CurrencyCloudBeneficiary_for_User;
(function (List_all_CurrencyCloudBeneficiary_for_User) {
    List_all_CurrencyCloudBeneficiary_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_CurrencyCloudBeneficiary_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_CurrencyCloudBeneficiary_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_CurrencyCloudBeneficiary_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "currency-cloud-beneficiary"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_CurrencyCloudBeneficiary_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_CurrencyCloudBeneficiary_for_User.api = {
        name: "list_all_CurrencyCloudBeneficiary_for_User",
        method: "GET",
        path: "user/:userID/currency-cloud-beneficiary",
        server: List_all_CurrencyCloudBeneficiary_for_User.server,
        client: List_all_CurrencyCloudBeneficiary_for_User.client
    };
})(List_all_CurrencyCloudBeneficiary_for_User || (exports.List_all_CurrencyCloudBeneficiary_for_User = List_all_CurrencyCloudBeneficiary_for_User = {}));
var CREATE_CurrencyCloudBeneficiary_for_User;
(function (CREATE_CurrencyCloudBeneficiary_for_User) {
    CREATE_CurrencyCloudBeneficiary_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_CurrencyCloudBeneficiary_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_CurrencyCloudBeneficiary_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_CurrencyCloudBeneficiary_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "currency-cloud-beneficiary"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_CurrencyCloudBeneficiary_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_CurrencyCloudBeneficiary_for_User.api = {
        name: "cREATE_CurrencyCloudBeneficiary_for_User",
        method: "POST",
        path: "user/:userID/currency-cloud-beneficiary",
        server: CREATE_CurrencyCloudBeneficiary_for_User.server,
        client: CREATE_CurrencyCloudBeneficiary_for_User.client
    };
})(CREATE_CurrencyCloudBeneficiary_for_User || (exports.CREATE_CurrencyCloudBeneficiary_for_User = CREATE_CurrencyCloudBeneficiary_for_User = {}));
var READ_CurrencyCloudBeneficiary_for_User;
(function (READ_CurrencyCloudBeneficiary_for_User) {
    READ_CurrencyCloudBeneficiary_for_User.request = (props) => ({
        path: { "userID": props["userID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_CurrencyCloudBeneficiary_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_CurrencyCloudBeneficiary_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_CurrencyCloudBeneficiary_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "currency-cloud-beneficiary", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_CurrencyCloudBeneficiary_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "itemId": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_CurrencyCloudBeneficiary_for_User.api = {
        name: "rEAD_CurrencyCloudBeneficiary_for_User",
        method: "GET",
        path: "user/:userID/currency-cloud-beneficiary/:itemId",
        server: READ_CurrencyCloudBeneficiary_for_User.server,
        client: READ_CurrencyCloudBeneficiary_for_User.client
    };
})(READ_CurrencyCloudBeneficiary_for_User || (exports.READ_CurrencyCloudBeneficiary_for_User = READ_CurrencyCloudBeneficiary_for_User = {}));
var List_all_CurrencyCloudBeneficiaryRequirement_for_User;
(function (List_all_CurrencyCloudBeneficiaryRequirement_for_User) {
    List_all_CurrencyCloudBeneficiaryRequirement_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_CurrencyCloudBeneficiaryRequirement_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_CurrencyCloudBeneficiaryRequirement_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_CurrencyCloudBeneficiaryRequirement_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "currency-cloud-beneficiary-requirement"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_CurrencyCloudBeneficiaryRequirement_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_CurrencyCloudBeneficiaryRequirement_for_User.api = {
        name: "list_all_CurrencyCloudBeneficiaryRequirement_for_User",
        method: "GET",
        path: "user/:userID/currency-cloud-beneficiary-requirement",
        server: List_all_CurrencyCloudBeneficiaryRequirement_for_User.server,
        client: List_all_CurrencyCloudBeneficiaryRequirement_for_User.client
    };
})(List_all_CurrencyCloudBeneficiaryRequirement_for_User || (exports.List_all_CurrencyCloudBeneficiaryRequirement_for_User = List_all_CurrencyCloudBeneficiaryRequirement_for_User = {}));
var CREATE_CurrencyCloudPaymentQuote_for_User_MonetaryAccount;
(function (CREATE_CurrencyCloudPaymentQuote_for_User_MonetaryAccount) {
    CREATE_CurrencyCloudPaymentQuote_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_CurrencyCloudPaymentQuote_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_CurrencyCloudPaymentQuote_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_CurrencyCloudPaymentQuote_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "currency-cloud-payment-quote"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_CurrencyCloudPaymentQuote_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_CurrencyCloudPaymentQuote_for_User_MonetaryAccount.api = {
        name: "cREATE_CurrencyCloudPaymentQuote_for_User_MonetaryAccount",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/currency-cloud-payment-quote",
        server: CREATE_CurrencyCloudPaymentQuote_for_User_MonetaryAccount.server,
        client: CREATE_CurrencyCloudPaymentQuote_for_User_MonetaryAccount.client
    };
})(CREATE_CurrencyCloudPaymentQuote_for_User_MonetaryAccount || (exports.CREATE_CurrencyCloudPaymentQuote_for_User_MonetaryAccount = CREATE_CurrencyCloudPaymentQuote_for_User_MonetaryAccount = {}));
var List_all_CurrencyConversion_for_User_MonetaryAccount;
(function (List_all_CurrencyConversion_for_User_MonetaryAccount) {
    List_all_CurrencyConversion_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_CurrencyConversion_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_CurrencyConversion_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_CurrencyConversion_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "currency-conversion"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_CurrencyConversion_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_CurrencyConversion_for_User_MonetaryAccount.api = {
        name: "list_all_CurrencyConversion_for_User_MonetaryAccount",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/currency-conversion",
        server: List_all_CurrencyConversion_for_User_MonetaryAccount.server,
        client: List_all_CurrencyConversion_for_User_MonetaryAccount.client
    };
})(List_all_CurrencyConversion_for_User_MonetaryAccount || (exports.List_all_CurrencyConversion_for_User_MonetaryAccount = List_all_CurrencyConversion_for_User_MonetaryAccount = {}));
var READ_CurrencyConversion_for_User_MonetaryAccount;
(function (READ_CurrencyConversion_for_User_MonetaryAccount) {
    READ_CurrencyConversion_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_CurrencyConversion_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_CurrencyConversion_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_CurrencyConversion_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "currency-conversion", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_CurrencyConversion_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_CurrencyConversion_for_User_MonetaryAccount.api = {
        name: "rEAD_CurrencyConversion_for_User_MonetaryAccount",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/currency-conversion/:itemId",
        server: READ_CurrencyConversion_for_User_MonetaryAccount.server,
        client: READ_CurrencyConversion_for_User_MonetaryAccount.client
    };
})(READ_CurrencyConversion_for_User_MonetaryAccount || (exports.READ_CurrencyConversion_for_User_MonetaryAccount = READ_CurrencyConversion_for_User_MonetaryAccount = {}));
var CREATE_CurrencyConversionQuote_for_User_MonetaryAccount;
(function (CREATE_CurrencyConversionQuote_for_User_MonetaryAccount) {
    CREATE_CurrencyConversionQuote_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_CurrencyConversionQuote_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_CurrencyConversionQuote_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_CurrencyConversionQuote_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "currency-conversion-quote"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_CurrencyConversionQuote_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_CurrencyConversionQuote_for_User_MonetaryAccount.api = {
        name: "cREATE_CurrencyConversionQuote_for_User_MonetaryAccount",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/currency-conversion-quote",
        server: CREATE_CurrencyConversionQuote_for_User_MonetaryAccount.server,
        client: CREATE_CurrencyConversionQuote_for_User_MonetaryAccount.client
    };
})(CREATE_CurrencyConversionQuote_for_User_MonetaryAccount || (exports.CREATE_CurrencyConversionQuote_for_User_MonetaryAccount = CREATE_CurrencyConversionQuote_for_User_MonetaryAccount = {}));
var READ_CurrencyConversionQuote_for_User_MonetaryAccount;
(function (READ_CurrencyConversionQuote_for_User_MonetaryAccount) {
    READ_CurrencyConversionQuote_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_CurrencyConversionQuote_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_CurrencyConversionQuote_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_CurrencyConversionQuote_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "currency-conversion-quote", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_CurrencyConversionQuote_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_CurrencyConversionQuote_for_User_MonetaryAccount.api = {
        name: "rEAD_CurrencyConversionQuote_for_User_MonetaryAccount",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/currency-conversion-quote/:itemId",
        server: READ_CurrencyConversionQuote_for_User_MonetaryAccount.server,
        client: READ_CurrencyConversionQuote_for_User_MonetaryAccount.client
    };
})(READ_CurrencyConversionQuote_for_User_MonetaryAccount || (exports.READ_CurrencyConversionQuote_for_User_MonetaryAccount = READ_CurrencyConversionQuote_for_User_MonetaryAccount = {}));
var UPDATE_CurrencyConversionQuote_for_User_MonetaryAccount;
(function (UPDATE_CurrencyConversionQuote_for_User_MonetaryAccount) {
    UPDATE_CurrencyConversionQuote_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_CurrencyConversionQuote_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_CurrencyConversionQuote_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_CurrencyConversionQuote_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "currency-conversion-quote", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_CurrencyConversionQuote_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_CurrencyConversionQuote_for_User_MonetaryAccount.api = {
        name: "uPDATE_CurrencyConversionQuote_for_User_MonetaryAccount",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/currency-conversion-quote/:itemId",
        server: UPDATE_CurrencyConversionQuote_for_User_MonetaryAccount.server,
        client: UPDATE_CurrencyConversionQuote_for_User_MonetaryAccount.client
    };
})(UPDATE_CurrencyConversionQuote_for_User_MonetaryAccount || (exports.UPDATE_CurrencyConversionQuote_for_User_MonetaryAccount = UPDATE_CurrencyConversionQuote_for_User_MonetaryAccount = {}));
var List_all_CustomerStatement_for_User_MonetaryAccount;
(function (List_all_CustomerStatement_for_User_MonetaryAccount) {
    List_all_CustomerStatement_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_CustomerStatement_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_CustomerStatement_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_CustomerStatement_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "customer-statement"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_CustomerStatement_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_CustomerStatement_for_User_MonetaryAccount.api = {
        name: "list_all_CustomerStatement_for_User_MonetaryAccount",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/customer-statement",
        server: List_all_CustomerStatement_for_User_MonetaryAccount.server,
        client: List_all_CustomerStatement_for_User_MonetaryAccount.client
    };
})(List_all_CustomerStatement_for_User_MonetaryAccount || (exports.List_all_CustomerStatement_for_User_MonetaryAccount = List_all_CustomerStatement_for_User_MonetaryAccount = {}));
var CREATE_CustomerStatement_for_User_MonetaryAccount;
(function (CREATE_CustomerStatement_for_User_MonetaryAccount) {
    CREATE_CustomerStatement_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_CustomerStatement_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_CustomerStatement_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_CustomerStatement_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "customer-statement"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_CustomerStatement_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_CustomerStatement_for_User_MonetaryAccount.api = {
        name: "cREATE_CustomerStatement_for_User_MonetaryAccount",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/customer-statement",
        server: CREATE_CustomerStatement_for_User_MonetaryAccount.server,
        client: CREATE_CustomerStatement_for_User_MonetaryAccount.client
    };
})(CREATE_CustomerStatement_for_User_MonetaryAccount || (exports.CREATE_CustomerStatement_for_User_MonetaryAccount = CREATE_CustomerStatement_for_User_MonetaryAccount = {}));
var READ_CustomerStatement_for_User_MonetaryAccount;
(function (READ_CustomerStatement_for_User_MonetaryAccount) {
    READ_CustomerStatement_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_CustomerStatement_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_CustomerStatement_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_CustomerStatement_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "customer-statement", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_CustomerStatement_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_CustomerStatement_for_User_MonetaryAccount.api = {
        name: "rEAD_CustomerStatement_for_User_MonetaryAccount",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/customer-statement/:itemId",
        server: READ_CustomerStatement_for_User_MonetaryAccount.server,
        client: READ_CustomerStatement_for_User_MonetaryAccount.client
    };
})(READ_CustomerStatement_for_User_MonetaryAccount || (exports.READ_CustomerStatement_for_User_MonetaryAccount = READ_CustomerStatement_for_User_MonetaryAccount = {}));
var DELETE_CustomerStatement_for_User_MonetaryAccount;
(function (DELETE_CustomerStatement_for_User_MonetaryAccount) {
    DELETE_CustomerStatement_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_CustomerStatement_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_CustomerStatement_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_CustomerStatement_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "customer-statement", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_CustomerStatement_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_CustomerStatement_for_User_MonetaryAccount.api = {
        name: "dELETE_CustomerStatement_for_User_MonetaryAccount",
        method: "DELETE",
        path: "user/:userID/monetary-account/:monetary-accountID/customer-statement/:itemId",
        server: DELETE_CustomerStatement_for_User_MonetaryAccount.server,
        client: DELETE_CustomerStatement_for_User_MonetaryAccount.client
    };
})(DELETE_CustomerStatement_for_User_MonetaryAccount || (exports.DELETE_CustomerStatement_for_User_MonetaryAccount = DELETE_CustomerStatement_for_User_MonetaryAccount = {}));
var List_all_Definition_for_User_MonetaryAccount_PaymentAutoAllocate;
(function (List_all_Definition_for_User_MonetaryAccount_PaymentAutoAllocate) {
    List_all_Definition_for_User_MonetaryAccount_PaymentAutoAllocate.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "payment-auto-allocateID": props["payment-auto-allocateID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_Definition_for_User_MonetaryAccount_PaymentAutoAllocate.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Definition_for_User_MonetaryAccount_PaymentAutoAllocate.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Definition_for_User_MonetaryAccount_PaymentAutoAllocate.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-auto-allocate", serialization.serialize(it.path["payment-auto-allocateID"]), "definition"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_Definition_for_User_MonetaryAccount_PaymentAutoAllocate.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "payment-auto-allocateID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_Definition_for_User_MonetaryAccount_PaymentAutoAllocate.api = {
        name: "list_all_Definition_for_User_MonetaryAccount_PaymentAutoAllocate",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/payment-auto-allocate/:payment-auto-allocateID/definition",
        server: List_all_Definition_for_User_MonetaryAccount_PaymentAutoAllocate.server,
        client: List_all_Definition_for_User_MonetaryAccount_PaymentAutoAllocate.client
    };
})(List_all_Definition_for_User_MonetaryAccount_PaymentAutoAllocate || (exports.List_all_Definition_for_User_MonetaryAccount_PaymentAutoAllocate = List_all_Definition_for_User_MonetaryAccount_PaymentAutoAllocate = {}));
var READ_Device;
(function (READ_Device) {
    READ_Device.request = (props) => ({
        path: { "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_Device.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_Device.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_Device.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["device", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_Device.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "itemId": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_Device.api = {
        name: "rEAD_Device",
        method: "GET",
        path: "device/:itemId",
        server: READ_Device.server,
        client: READ_Device.client
    };
})(READ_Device || (exports.READ_Device = READ_Device = {}));
var List_all_Device;
(function (List_all_Device) {
    List_all_Device.request = (props) => ({
        path: {},
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_Device.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Device.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Device.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["device"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_Device.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {},
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_Device.api = {
        name: "list_all_Device",
        method: "GET",
        path: "device",
        server: List_all_Device.server,
        client: List_all_Device.client
    };
})(List_all_Device || (exports.List_all_Device = List_all_Device = {}));
var List_all_DeviceServer;
(function (List_all_DeviceServer) {
    List_all_DeviceServer.request = (props) => ({
        path: {},
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_DeviceServer.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_DeviceServer.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_DeviceServer.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["device-server"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_DeviceServer.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {},
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_DeviceServer.api = {
        name: "list_all_DeviceServer",
        method: "GET",
        path: "device-server",
        server: List_all_DeviceServer.server,
        client: List_all_DeviceServer.client
    };
})(List_all_DeviceServer || (exports.List_all_DeviceServer = List_all_DeviceServer = {}));
var CREATE_DeviceServer;
(function (CREATE_DeviceServer) {
    CREATE_DeviceServer.request = (props) => ({
        path: {},
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_DeviceServer.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_DeviceServer.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_DeviceServer.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["device-server"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_DeviceServer.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {},
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_DeviceServer.api = {
        name: "cREATE_DeviceServer",
        method: "POST",
        path: "device-server",
        server: CREATE_DeviceServer.server,
        client: CREATE_DeviceServer.client
    };
})(CREATE_DeviceServer || (exports.CREATE_DeviceServer = CREATE_DeviceServer = {}));
var READ_DeviceServer;
(function (READ_DeviceServer) {
    READ_DeviceServer.request = (props) => ({
        path: { "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_DeviceServer.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_DeviceServer.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_DeviceServer.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["device-server", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_DeviceServer.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "itemId": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_DeviceServer.api = {
        name: "rEAD_DeviceServer",
        method: "GET",
        path: "device-server/:itemId",
        server: READ_DeviceServer.server,
        client: READ_DeviceServer.client
    };
})(READ_DeviceServer || (exports.READ_DeviceServer = READ_DeviceServer = {}));
var List_all_DraftPayment_for_User_MonetaryAccount;
(function (List_all_DraftPayment_for_User_MonetaryAccount) {
    List_all_DraftPayment_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_DraftPayment_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_DraftPayment_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_DraftPayment_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "draft-payment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_DraftPayment_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_DraftPayment_for_User_MonetaryAccount.api = {
        name: "list_all_DraftPayment_for_User_MonetaryAccount",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/draft-payment",
        server: List_all_DraftPayment_for_User_MonetaryAccount.server,
        client: List_all_DraftPayment_for_User_MonetaryAccount.client
    };
})(List_all_DraftPayment_for_User_MonetaryAccount || (exports.List_all_DraftPayment_for_User_MonetaryAccount = List_all_DraftPayment_for_User_MonetaryAccount = {}));
var CREATE_DraftPayment_for_User_MonetaryAccount;
(function (CREATE_DraftPayment_for_User_MonetaryAccount) {
    CREATE_DraftPayment_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_DraftPayment_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_DraftPayment_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_DraftPayment_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "draft-payment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_DraftPayment_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_DraftPayment_for_User_MonetaryAccount.api = {
        name: "cREATE_DraftPayment_for_User_MonetaryAccount",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/draft-payment",
        server: CREATE_DraftPayment_for_User_MonetaryAccount.server,
        client: CREATE_DraftPayment_for_User_MonetaryAccount.client
    };
})(CREATE_DraftPayment_for_User_MonetaryAccount || (exports.CREATE_DraftPayment_for_User_MonetaryAccount = CREATE_DraftPayment_for_User_MonetaryAccount = {}));
var READ_DraftPayment_for_User_MonetaryAccount;
(function (READ_DraftPayment_for_User_MonetaryAccount) {
    READ_DraftPayment_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_DraftPayment_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_DraftPayment_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_DraftPayment_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "draft-payment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_DraftPayment_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_DraftPayment_for_User_MonetaryAccount.api = {
        name: "rEAD_DraftPayment_for_User_MonetaryAccount",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/draft-payment/:itemId",
        server: READ_DraftPayment_for_User_MonetaryAccount.server,
        client: READ_DraftPayment_for_User_MonetaryAccount.client
    };
})(READ_DraftPayment_for_User_MonetaryAccount || (exports.READ_DraftPayment_for_User_MonetaryAccount = READ_DraftPayment_for_User_MonetaryAccount = {}));
var UPDATE_DraftPayment_for_User_MonetaryAccount;
(function (UPDATE_DraftPayment_for_User_MonetaryAccount) {
    UPDATE_DraftPayment_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_DraftPayment_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_DraftPayment_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_DraftPayment_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "draft-payment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_DraftPayment_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_DraftPayment_for_User_MonetaryAccount.api = {
        name: "uPDATE_DraftPayment_for_User_MonetaryAccount",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/draft-payment/:itemId",
        server: UPDATE_DraftPayment_for_User_MonetaryAccount.server,
        client: UPDATE_DraftPayment_for_User_MonetaryAccount.client
    };
})(UPDATE_DraftPayment_for_User_MonetaryAccount || (exports.UPDATE_DraftPayment_for_User_MonetaryAccount = UPDATE_DraftPayment_for_User_MonetaryAccount = {}));
var READ_Event_for_User;
(function (READ_Event_for_User) {
    READ_Event_for_User.request = (props) => ({
        path: { "userID": props["userID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_Event_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_Event_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_Event_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "event", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_Event_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "itemId": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_Event_for_User.api = {
        name: "rEAD_Event_for_User",
        method: "GET",
        path: "user/:userID/event/:itemId",
        server: READ_Event_for_User.server,
        client: READ_Event_for_User.client
    };
})(READ_Event_for_User || (exports.READ_Event_for_User = READ_Event_for_User = {}));
var List_all_Event_for_User;
(function (List_all_Event_for_User) {
    List_all_Event_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_Event_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Event_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Event_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "event"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_Event_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_Event_for_User.api = {
        name: "list_all_Event_for_User",
        method: "GET",
        path: "user/:userID/event",
        server: List_all_Event_for_User.server,
        client: List_all_Event_for_User.client
    };
})(List_all_Event_for_User || (exports.List_all_Event_for_User = List_all_Event_for_User = {}));
var List_all_ExportAnnualOverview_for_User;
(function (List_all_ExportAnnualOverview_for_User) {
    List_all_ExportAnnualOverview_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_ExportAnnualOverview_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_ExportAnnualOverview_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_ExportAnnualOverview_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "export-annual-overview"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_ExportAnnualOverview_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_ExportAnnualOverview_for_User.api = {
        name: "list_all_ExportAnnualOverview_for_User",
        method: "GET",
        path: "user/:userID/export-annual-overview",
        server: List_all_ExportAnnualOverview_for_User.server,
        client: List_all_ExportAnnualOverview_for_User.client
    };
})(List_all_ExportAnnualOverview_for_User || (exports.List_all_ExportAnnualOverview_for_User = List_all_ExportAnnualOverview_for_User = {}));
var CREATE_ExportAnnualOverview_for_User;
(function (CREATE_ExportAnnualOverview_for_User) {
    CREATE_ExportAnnualOverview_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_ExportAnnualOverview_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_ExportAnnualOverview_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_ExportAnnualOverview_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "export-annual-overview"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_ExportAnnualOverview_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_ExportAnnualOverview_for_User.api = {
        name: "cREATE_ExportAnnualOverview_for_User",
        method: "POST",
        path: "user/:userID/export-annual-overview",
        server: CREATE_ExportAnnualOverview_for_User.server,
        client: CREATE_ExportAnnualOverview_for_User.client
    };
})(CREATE_ExportAnnualOverview_for_User || (exports.CREATE_ExportAnnualOverview_for_User = CREATE_ExportAnnualOverview_for_User = {}));
var READ_ExportAnnualOverview_for_User;
(function (READ_ExportAnnualOverview_for_User) {
    READ_ExportAnnualOverview_for_User.request = (props) => ({
        path: { "userID": props["userID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_ExportAnnualOverview_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_ExportAnnualOverview_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_ExportAnnualOverview_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "export-annual-overview", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_ExportAnnualOverview_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "itemId": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_ExportAnnualOverview_for_User.api = {
        name: "rEAD_ExportAnnualOverview_for_User",
        method: "GET",
        path: "user/:userID/export-annual-overview/:itemId",
        server: READ_ExportAnnualOverview_for_User.server,
        client: READ_ExportAnnualOverview_for_User.client
    };
})(READ_ExportAnnualOverview_for_User || (exports.READ_ExportAnnualOverview_for_User = READ_ExportAnnualOverview_for_User = {}));
var DELETE_ExportAnnualOverview_for_User;
(function (DELETE_ExportAnnualOverview_for_User) {
    DELETE_ExportAnnualOverview_for_User.request = (props) => ({
        path: { "userID": props["userID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_ExportAnnualOverview_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_ExportAnnualOverview_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_ExportAnnualOverview_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "export-annual-overview", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_ExportAnnualOverview_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "itemId": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_ExportAnnualOverview_for_User.api = {
        name: "dELETE_ExportAnnualOverview_for_User",
        method: "DELETE",
        path: "user/:userID/export-annual-overview/:itemId",
        server: DELETE_ExportAnnualOverview_for_User.server,
        client: DELETE_ExportAnnualOverview_for_User.client
    };
})(DELETE_ExportAnnualOverview_for_User || (exports.DELETE_ExportAnnualOverview_for_User = DELETE_ExportAnnualOverview_for_User = {}));
var List_all_ExportRib_for_User_MonetaryAccount;
(function (List_all_ExportRib_for_User_MonetaryAccount) {
    List_all_ExportRib_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_ExportRib_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_ExportRib_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_ExportRib_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "export-rib"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_ExportRib_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_ExportRib_for_User_MonetaryAccount.api = {
        name: "list_all_ExportRib_for_User_MonetaryAccount",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/export-rib",
        server: List_all_ExportRib_for_User_MonetaryAccount.server,
        client: List_all_ExportRib_for_User_MonetaryAccount.client
    };
})(List_all_ExportRib_for_User_MonetaryAccount || (exports.List_all_ExportRib_for_User_MonetaryAccount = List_all_ExportRib_for_User_MonetaryAccount = {}));
var CREATE_ExportRib_for_User_MonetaryAccount;
(function (CREATE_ExportRib_for_User_MonetaryAccount) {
    CREATE_ExportRib_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_ExportRib_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_ExportRib_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_ExportRib_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "export-rib"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_ExportRib_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_ExportRib_for_User_MonetaryAccount.api = {
        name: "cREATE_ExportRib_for_User_MonetaryAccount",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/export-rib",
        server: CREATE_ExportRib_for_User_MonetaryAccount.server,
        client: CREATE_ExportRib_for_User_MonetaryAccount.client
    };
})(CREATE_ExportRib_for_User_MonetaryAccount || (exports.CREATE_ExportRib_for_User_MonetaryAccount = CREATE_ExportRib_for_User_MonetaryAccount = {}));
var READ_ExportRib_for_User_MonetaryAccount;
(function (READ_ExportRib_for_User_MonetaryAccount) {
    READ_ExportRib_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_ExportRib_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_ExportRib_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_ExportRib_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "export-rib", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_ExportRib_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_ExportRib_for_User_MonetaryAccount.api = {
        name: "rEAD_ExportRib_for_User_MonetaryAccount",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/export-rib/:itemId",
        server: READ_ExportRib_for_User_MonetaryAccount.server,
        client: READ_ExportRib_for_User_MonetaryAccount.client
    };
})(READ_ExportRib_for_User_MonetaryAccount || (exports.READ_ExportRib_for_User_MonetaryAccount = READ_ExportRib_for_User_MonetaryAccount = {}));
var DELETE_ExportRib_for_User_MonetaryAccount;
(function (DELETE_ExportRib_for_User_MonetaryAccount) {
    DELETE_ExportRib_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_ExportRib_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_ExportRib_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_ExportRib_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "export-rib", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_ExportRib_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_ExportRib_for_User_MonetaryAccount.api = {
        name: "dELETE_ExportRib_for_User_MonetaryAccount",
        method: "DELETE",
        path: "user/:userID/monetary-account/:monetary-accountID/export-rib/:itemId",
        server: DELETE_ExportRib_for_User_MonetaryAccount.server,
        client: DELETE_ExportRib_for_User_MonetaryAccount.client
    };
})(DELETE_ExportRib_for_User_MonetaryAccount || (exports.DELETE_ExportRib_for_User_MonetaryAccount = DELETE_ExportRib_for_User_MonetaryAccount = {}));
var READ_ExportStatementCard_for_User_Card;
(function (READ_ExportStatementCard_for_User_Card) {
    READ_ExportStatementCard_for_User_Card.request = (props) => ({
        path: { "userID": props["userID"], "cardID": props["cardID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_ExportStatementCard_for_User_Card.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_ExportStatementCard_for_User_Card.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_ExportStatementCard_for_User_Card.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "card", serialization.serialize(it.path["cardID"]), "export-statement-card", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_ExportStatementCard_for_User_Card.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "cardID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_ExportStatementCard_for_User_Card.api = {
        name: "rEAD_ExportStatementCard_for_User_Card",
        method: "GET",
        path: "user/:userID/card/:cardID/export-statement-card/:itemId",
        server: READ_ExportStatementCard_for_User_Card.server,
        client: READ_ExportStatementCard_for_User_Card.client
    };
})(READ_ExportStatementCard_for_User_Card || (exports.READ_ExportStatementCard_for_User_Card = READ_ExportStatementCard_for_User_Card = {}));
var List_all_ExportStatementCard_for_User_Card;
(function (List_all_ExportStatementCard_for_User_Card) {
    List_all_ExportStatementCard_for_User_Card.request = (props) => ({
        path: { "userID": props["userID"], "cardID": props["cardID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_ExportStatementCard_for_User_Card.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_ExportStatementCard_for_User_Card.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_ExportStatementCard_for_User_Card.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "card", serialization.serialize(it.path["cardID"]), "export-statement-card"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_ExportStatementCard_for_User_Card.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "cardID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_ExportStatementCard_for_User_Card.api = {
        name: "list_all_ExportStatementCard_for_User_Card",
        method: "GET",
        path: "user/:userID/card/:cardID/export-statement-card",
        server: List_all_ExportStatementCard_for_User_Card.server,
        client: List_all_ExportStatementCard_for_User_Card.client
    };
})(List_all_ExportStatementCard_for_User_Card || (exports.List_all_ExportStatementCard_for_User_Card = List_all_ExportStatementCard_for_User_Card = {}));
var List_all_ExportStatementCardCsv_for_User_Card;
(function (List_all_ExportStatementCardCsv_for_User_Card) {
    List_all_ExportStatementCardCsv_for_User_Card.request = (props) => ({
        path: { "userID": props["userID"], "cardID": props["cardID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_ExportStatementCardCsv_for_User_Card.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_ExportStatementCardCsv_for_User_Card.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_ExportStatementCardCsv_for_User_Card.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "card", serialization.serialize(it.path["cardID"]), "export-statement-card-csv"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_ExportStatementCardCsv_for_User_Card.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "cardID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_ExportStatementCardCsv_for_User_Card.api = {
        name: "list_all_ExportStatementCardCsv_for_User_Card",
        method: "GET",
        path: "user/:userID/card/:cardID/export-statement-card-csv",
        server: List_all_ExportStatementCardCsv_for_User_Card.server,
        client: List_all_ExportStatementCardCsv_for_User_Card.client
    };
})(List_all_ExportStatementCardCsv_for_User_Card || (exports.List_all_ExportStatementCardCsv_for_User_Card = List_all_ExportStatementCardCsv_for_User_Card = {}));
var CREATE_ExportStatementCardCsv_for_User_Card;
(function (CREATE_ExportStatementCardCsv_for_User_Card) {
    CREATE_ExportStatementCardCsv_for_User_Card.request = (props) => ({
        path: { "userID": props["userID"], "cardID": props["cardID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_ExportStatementCardCsv_for_User_Card.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_ExportStatementCardCsv_for_User_Card.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_ExportStatementCardCsv_for_User_Card.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "card", serialization.serialize(it.path["cardID"]), "export-statement-card-csv"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_ExportStatementCardCsv_for_User_Card.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "cardID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_ExportStatementCardCsv_for_User_Card.api = {
        name: "cREATE_ExportStatementCardCsv_for_User_Card",
        method: "POST",
        path: "user/:userID/card/:cardID/export-statement-card-csv",
        server: CREATE_ExportStatementCardCsv_for_User_Card.server,
        client: CREATE_ExportStatementCardCsv_for_User_Card.client
    };
})(CREATE_ExportStatementCardCsv_for_User_Card || (exports.CREATE_ExportStatementCardCsv_for_User_Card = CREATE_ExportStatementCardCsv_for_User_Card = {}));
var READ_ExportStatementCardCsv_for_User_Card;
(function (READ_ExportStatementCardCsv_for_User_Card) {
    READ_ExportStatementCardCsv_for_User_Card.request = (props) => ({
        path: { "userID": props["userID"], "cardID": props["cardID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_ExportStatementCardCsv_for_User_Card.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_ExportStatementCardCsv_for_User_Card.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_ExportStatementCardCsv_for_User_Card.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "card", serialization.serialize(it.path["cardID"]), "export-statement-card-csv", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_ExportStatementCardCsv_for_User_Card.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "cardID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_ExportStatementCardCsv_for_User_Card.api = {
        name: "rEAD_ExportStatementCardCsv_for_User_Card",
        method: "GET",
        path: "user/:userID/card/:cardID/export-statement-card-csv/:itemId",
        server: READ_ExportStatementCardCsv_for_User_Card.server,
        client: READ_ExportStatementCardCsv_for_User_Card.client
    };
})(READ_ExportStatementCardCsv_for_User_Card || (exports.READ_ExportStatementCardCsv_for_User_Card = READ_ExportStatementCardCsv_for_User_Card = {}));
var DELETE_ExportStatementCardCsv_for_User_Card;
(function (DELETE_ExportStatementCardCsv_for_User_Card) {
    DELETE_ExportStatementCardCsv_for_User_Card.request = (props) => ({
        path: { "userID": props["userID"], "cardID": props["cardID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_ExportStatementCardCsv_for_User_Card.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_ExportStatementCardCsv_for_User_Card.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_ExportStatementCardCsv_for_User_Card.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "card", serialization.serialize(it.path["cardID"]), "export-statement-card-csv", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_ExportStatementCardCsv_for_User_Card.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "cardID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_ExportStatementCardCsv_for_User_Card.api = {
        name: "dELETE_ExportStatementCardCsv_for_User_Card",
        method: "DELETE",
        path: "user/:userID/card/:cardID/export-statement-card-csv/:itemId",
        server: DELETE_ExportStatementCardCsv_for_User_Card.server,
        client: DELETE_ExportStatementCardCsv_for_User_Card.client
    };
})(DELETE_ExportStatementCardCsv_for_User_Card || (exports.DELETE_ExportStatementCardCsv_for_User_Card = DELETE_ExportStatementCardCsv_for_User_Card = {}));
var List_all_ExportStatementCardPdf_for_User_Card;
(function (List_all_ExportStatementCardPdf_for_User_Card) {
    List_all_ExportStatementCardPdf_for_User_Card.request = (props) => ({
        path: { "userID": props["userID"], "cardID": props["cardID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_ExportStatementCardPdf_for_User_Card.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_ExportStatementCardPdf_for_User_Card.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_ExportStatementCardPdf_for_User_Card.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "card", serialization.serialize(it.path["cardID"]), "export-statement-card-pdf"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_ExportStatementCardPdf_for_User_Card.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "cardID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_ExportStatementCardPdf_for_User_Card.api = {
        name: "list_all_ExportStatementCardPdf_for_User_Card",
        method: "GET",
        path: "user/:userID/card/:cardID/export-statement-card-pdf",
        server: List_all_ExportStatementCardPdf_for_User_Card.server,
        client: List_all_ExportStatementCardPdf_for_User_Card.client
    };
})(List_all_ExportStatementCardPdf_for_User_Card || (exports.List_all_ExportStatementCardPdf_for_User_Card = List_all_ExportStatementCardPdf_for_User_Card = {}));
var CREATE_ExportStatementCardPdf_for_User_Card;
(function (CREATE_ExportStatementCardPdf_for_User_Card) {
    CREATE_ExportStatementCardPdf_for_User_Card.request = (props) => ({
        path: { "userID": props["userID"], "cardID": props["cardID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_ExportStatementCardPdf_for_User_Card.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_ExportStatementCardPdf_for_User_Card.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_ExportStatementCardPdf_for_User_Card.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "card", serialization.serialize(it.path["cardID"]), "export-statement-card-pdf"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_ExportStatementCardPdf_for_User_Card.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "cardID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_ExportStatementCardPdf_for_User_Card.api = {
        name: "cREATE_ExportStatementCardPdf_for_User_Card",
        method: "POST",
        path: "user/:userID/card/:cardID/export-statement-card-pdf",
        server: CREATE_ExportStatementCardPdf_for_User_Card.server,
        client: CREATE_ExportStatementCardPdf_for_User_Card.client
    };
})(CREATE_ExportStatementCardPdf_for_User_Card || (exports.CREATE_ExportStatementCardPdf_for_User_Card = CREATE_ExportStatementCardPdf_for_User_Card = {}));
var READ_ExportStatementCardPdf_for_User_Card;
(function (READ_ExportStatementCardPdf_for_User_Card) {
    READ_ExportStatementCardPdf_for_User_Card.request = (props) => ({
        path: { "userID": props["userID"], "cardID": props["cardID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_ExportStatementCardPdf_for_User_Card.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_ExportStatementCardPdf_for_User_Card.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_ExportStatementCardPdf_for_User_Card.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "card", serialization.serialize(it.path["cardID"]), "export-statement-card-pdf", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_ExportStatementCardPdf_for_User_Card.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "cardID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_ExportStatementCardPdf_for_User_Card.api = {
        name: "rEAD_ExportStatementCardPdf_for_User_Card",
        method: "GET",
        path: "user/:userID/card/:cardID/export-statement-card-pdf/:itemId",
        server: READ_ExportStatementCardPdf_for_User_Card.server,
        client: READ_ExportStatementCardPdf_for_User_Card.client
    };
})(READ_ExportStatementCardPdf_for_User_Card || (exports.READ_ExportStatementCardPdf_for_User_Card = READ_ExportStatementCardPdf_for_User_Card = {}));
var DELETE_ExportStatementCardPdf_for_User_Card;
(function (DELETE_ExportStatementCardPdf_for_User_Card) {
    DELETE_ExportStatementCardPdf_for_User_Card.request = (props) => ({
        path: { "userID": props["userID"], "cardID": props["cardID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_ExportStatementCardPdf_for_User_Card.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_ExportStatementCardPdf_for_User_Card.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_ExportStatementCardPdf_for_User_Card.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "card", serialization.serialize(it.path["cardID"]), "export-statement-card-pdf", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_ExportStatementCardPdf_for_User_Card.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "cardID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_ExportStatementCardPdf_for_User_Card.api = {
        name: "dELETE_ExportStatementCardPdf_for_User_Card",
        method: "DELETE",
        path: "user/:userID/card/:cardID/export-statement-card-pdf/:itemId",
        server: DELETE_ExportStatementCardPdf_for_User_Card.server,
        client: DELETE_ExportStatementCardPdf_for_User_Card.client
    };
})(DELETE_ExportStatementCardPdf_for_User_Card || (exports.DELETE_ExportStatementCardPdf_for_User_Card = DELETE_ExportStatementCardPdf_for_User_Card = {}));
var READ_FeatureAnnouncement_for_User;
(function (READ_FeatureAnnouncement_for_User) {
    READ_FeatureAnnouncement_for_User.request = (props) => ({
        path: { "userID": props["userID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_FeatureAnnouncement_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_FeatureAnnouncement_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_FeatureAnnouncement_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "feature-announcement", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_FeatureAnnouncement_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "itemId": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_FeatureAnnouncement_for_User.api = {
        name: "rEAD_FeatureAnnouncement_for_User",
        method: "GET",
        path: "user/:userID/feature-announcement/:itemId",
        server: READ_FeatureAnnouncement_for_User.server,
        client: READ_FeatureAnnouncement_for_User.client
    };
})(READ_FeatureAnnouncement_for_User || (exports.READ_FeatureAnnouncement_for_User = READ_FeatureAnnouncement_for_User = {}));
var List_all_GeneratedCvc2_for_User_Card;
(function (List_all_GeneratedCvc2_for_User_Card) {
    List_all_GeneratedCvc2_for_User_Card.request = (props) => ({
        path: { "userID": props["userID"], "cardID": props["cardID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_GeneratedCvc2_for_User_Card.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_GeneratedCvc2_for_User_Card.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_GeneratedCvc2_for_User_Card.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "card", serialization.serialize(it.path["cardID"]), "generated-cvc2"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_GeneratedCvc2_for_User_Card.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "cardID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_GeneratedCvc2_for_User_Card.api = {
        name: "list_all_GeneratedCvc2_for_User_Card",
        method: "GET",
        path: "user/:userID/card/:cardID/generated-cvc2",
        server: List_all_GeneratedCvc2_for_User_Card.server,
        client: List_all_GeneratedCvc2_for_User_Card.client
    };
})(List_all_GeneratedCvc2_for_User_Card || (exports.List_all_GeneratedCvc2_for_User_Card = List_all_GeneratedCvc2_for_User_Card = {}));
var CREATE_GeneratedCvc2_for_User_Card;
(function (CREATE_GeneratedCvc2_for_User_Card) {
    CREATE_GeneratedCvc2_for_User_Card.request = (props) => ({
        path: { "userID": props["userID"], "cardID": props["cardID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_GeneratedCvc2_for_User_Card.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_GeneratedCvc2_for_User_Card.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_GeneratedCvc2_for_User_Card.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "card", serialization.serialize(it.path["cardID"]), "generated-cvc2"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_GeneratedCvc2_for_User_Card.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "cardID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_GeneratedCvc2_for_User_Card.api = {
        name: "cREATE_GeneratedCvc2_for_User_Card",
        method: "POST",
        path: "user/:userID/card/:cardID/generated-cvc2",
        server: CREATE_GeneratedCvc2_for_User_Card.server,
        client: CREATE_GeneratedCvc2_for_User_Card.client
    };
})(CREATE_GeneratedCvc2_for_User_Card || (exports.CREATE_GeneratedCvc2_for_User_Card = CREATE_GeneratedCvc2_for_User_Card = {}));
var READ_GeneratedCvc2_for_User_Card;
(function (READ_GeneratedCvc2_for_User_Card) {
    READ_GeneratedCvc2_for_User_Card.request = (props) => ({
        path: { "userID": props["userID"], "cardID": props["cardID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_GeneratedCvc2_for_User_Card.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_GeneratedCvc2_for_User_Card.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_GeneratedCvc2_for_User_Card.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "card", serialization.serialize(it.path["cardID"]), "generated-cvc2", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_GeneratedCvc2_for_User_Card.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "cardID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_GeneratedCvc2_for_User_Card.api = {
        name: "rEAD_GeneratedCvc2_for_User_Card",
        method: "GET",
        path: "user/:userID/card/:cardID/generated-cvc2/:itemId",
        server: READ_GeneratedCvc2_for_User_Card.server,
        client: READ_GeneratedCvc2_for_User_Card.client
    };
})(READ_GeneratedCvc2_for_User_Card || (exports.READ_GeneratedCvc2_for_User_Card = READ_GeneratedCvc2_for_User_Card = {}));
var UPDATE_GeneratedCvc2_for_User_Card;
(function (UPDATE_GeneratedCvc2_for_User_Card) {
    UPDATE_GeneratedCvc2_for_User_Card.request = (props) => ({
        path: { "userID": props["userID"], "cardID": props["cardID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_GeneratedCvc2_for_User_Card.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_GeneratedCvc2_for_User_Card.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_GeneratedCvc2_for_User_Card.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "card", serialization.serialize(it.path["cardID"]), "generated-cvc2", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_GeneratedCvc2_for_User_Card.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "cardID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_GeneratedCvc2_for_User_Card.api = {
        name: "uPDATE_GeneratedCvc2_for_User_Card",
        method: "PUT",
        path: "user/:userID/card/:cardID/generated-cvc2/:itemId",
        server: UPDATE_GeneratedCvc2_for_User_Card.server,
        client: UPDATE_GeneratedCvc2_for_User_Card.client
    };
})(UPDATE_GeneratedCvc2_for_User_Card || (exports.UPDATE_GeneratedCvc2_for_User_Card = UPDATE_GeneratedCvc2_for_User_Card = {}));
var List_all_IdealMerchantTransaction_for_User_MonetaryAccount;
(function (List_all_IdealMerchantTransaction_for_User_MonetaryAccount) {
    List_all_IdealMerchantTransaction_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_IdealMerchantTransaction_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_IdealMerchantTransaction_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_IdealMerchantTransaction_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "ideal-merchant-transaction"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_IdealMerchantTransaction_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_IdealMerchantTransaction_for_User_MonetaryAccount.api = {
        name: "list_all_IdealMerchantTransaction_for_User_MonetaryAccount",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/ideal-merchant-transaction",
        server: List_all_IdealMerchantTransaction_for_User_MonetaryAccount.server,
        client: List_all_IdealMerchantTransaction_for_User_MonetaryAccount.client
    };
})(List_all_IdealMerchantTransaction_for_User_MonetaryAccount || (exports.List_all_IdealMerchantTransaction_for_User_MonetaryAccount = List_all_IdealMerchantTransaction_for_User_MonetaryAccount = {}));
var CREATE_IdealMerchantTransaction_for_User_MonetaryAccount;
(function (CREATE_IdealMerchantTransaction_for_User_MonetaryAccount) {
    CREATE_IdealMerchantTransaction_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_IdealMerchantTransaction_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_IdealMerchantTransaction_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_IdealMerchantTransaction_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "ideal-merchant-transaction"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_IdealMerchantTransaction_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_IdealMerchantTransaction_for_User_MonetaryAccount.api = {
        name: "cREATE_IdealMerchantTransaction_for_User_MonetaryAccount",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/ideal-merchant-transaction",
        server: CREATE_IdealMerchantTransaction_for_User_MonetaryAccount.server,
        client: CREATE_IdealMerchantTransaction_for_User_MonetaryAccount.client
    };
})(CREATE_IdealMerchantTransaction_for_User_MonetaryAccount || (exports.CREATE_IdealMerchantTransaction_for_User_MonetaryAccount = CREATE_IdealMerchantTransaction_for_User_MonetaryAccount = {}));
var READ_IdealMerchantTransaction_for_User_MonetaryAccount;
(function (READ_IdealMerchantTransaction_for_User_MonetaryAccount) {
    READ_IdealMerchantTransaction_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_IdealMerchantTransaction_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_IdealMerchantTransaction_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_IdealMerchantTransaction_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "ideal-merchant-transaction", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_IdealMerchantTransaction_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_IdealMerchantTransaction_for_User_MonetaryAccount.api = {
        name: "rEAD_IdealMerchantTransaction_for_User_MonetaryAccount",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/ideal-merchant-transaction/:itemId",
        server: READ_IdealMerchantTransaction_for_User_MonetaryAccount.server,
        client: READ_IdealMerchantTransaction_for_User_MonetaryAccount.client
    };
})(READ_IdealMerchantTransaction_for_User_MonetaryAccount || (exports.READ_IdealMerchantTransaction_for_User_MonetaryAccount = READ_IdealMerchantTransaction_for_User_MonetaryAccount = {}));
var List_all_InsightPreferenceDate_for_User;
(function (List_all_InsightPreferenceDate_for_User) {
    List_all_InsightPreferenceDate_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_InsightPreferenceDate_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_InsightPreferenceDate_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_InsightPreferenceDate_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "insight-preference-date"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_InsightPreferenceDate_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_InsightPreferenceDate_for_User.api = {
        name: "list_all_InsightPreferenceDate_for_User",
        method: "GET",
        path: "user/:userID/insight-preference-date",
        server: List_all_InsightPreferenceDate_for_User.server,
        client: List_all_InsightPreferenceDate_for_User.client
    };
})(List_all_InsightPreferenceDate_for_User || (exports.List_all_InsightPreferenceDate_for_User = List_all_InsightPreferenceDate_for_User = {}));
var List_all_Insights_for_User;
(function (List_all_Insights_for_User) {
    List_all_Insights_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_Insights_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Insights_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Insights_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "insights"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_Insights_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_Insights_for_User.api = {
        name: "list_all_Insights_for_User",
        method: "GET",
        path: "user/:userID/insights",
        server: List_all_Insights_for_User.server,
        client: List_all_Insights_for_User.client
    };
})(List_all_Insights_for_User || (exports.List_all_Insights_for_User = List_all_Insights_for_User = {}));
var List_all_InsightsSearch_for_User;
(function (List_all_InsightsSearch_for_User) {
    List_all_InsightsSearch_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_InsightsSearch_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_InsightsSearch_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_InsightsSearch_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "insights-search"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_InsightsSearch_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_InsightsSearch_for_User.api = {
        name: "list_all_InsightsSearch_for_User",
        method: "GET",
        path: "user/:userID/insights-search",
        server: List_all_InsightsSearch_for_User.server,
        client: List_all_InsightsSearch_for_User.client
    };
})(List_all_InsightsSearch_for_User || (exports.List_all_InsightsSearch_for_User = List_all_InsightsSearch_for_User = {}));
var List_all_Installation;
(function (List_all_Installation) {
    List_all_Installation.request = (props) => ({
        path: {},
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_Installation.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Installation.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Installation.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["installation"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_Installation.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {},
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_Installation.api = {
        name: "list_all_Installation",
        method: "GET",
        path: "installation",
        server: List_all_Installation.server,
        client: List_all_Installation.client
    };
})(List_all_Installation || (exports.List_all_Installation = List_all_Installation = {}));
var CREATE_Installation;
(function (CREATE_Installation) {
    CREATE_Installation.request = (props) => ({
        path: {},
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_Installation.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_Installation.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_Installation.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["installation"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_Installation.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {},
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_Installation.api = {
        name: "cREATE_Installation",
        method: "POST",
        path: "installation",
        server: CREATE_Installation.server,
        client: CREATE_Installation.client
    };
})(CREATE_Installation || (exports.CREATE_Installation = CREATE_Installation = {}));
var READ_Installation;
(function (READ_Installation) {
    READ_Installation.request = (props) => ({
        path: { "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_Installation.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_Installation.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_Installation.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["installation", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_Installation.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "itemId": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_Installation.api = {
        name: "rEAD_Installation",
        method: "GET",
        path: "installation/:itemId",
        server: READ_Installation.server,
        client: READ_Installation.client
    };
})(READ_Installation || (exports.READ_Installation = READ_Installation = {}));
var List_all_Instance_for_User_MonetaryAccount_PaymentAutoAllocate;
(function (List_all_Instance_for_User_MonetaryAccount_PaymentAutoAllocate) {
    List_all_Instance_for_User_MonetaryAccount_PaymentAutoAllocate.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "payment-auto-allocateID": props["payment-auto-allocateID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_Instance_for_User_MonetaryAccount_PaymentAutoAllocate.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Instance_for_User_MonetaryAccount_PaymentAutoAllocate.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Instance_for_User_MonetaryAccount_PaymentAutoAllocate.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-auto-allocate", serialization.serialize(it.path["payment-auto-allocateID"]), "instance"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_Instance_for_User_MonetaryAccount_PaymentAutoAllocate.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "payment-auto-allocateID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_Instance_for_User_MonetaryAccount_PaymentAutoAllocate.api = {
        name: "list_all_Instance_for_User_MonetaryAccount_PaymentAutoAllocate",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/payment-auto-allocate/:payment-auto-allocateID/instance",
        server: List_all_Instance_for_User_MonetaryAccount_PaymentAutoAllocate.server,
        client: List_all_Instance_for_User_MonetaryAccount_PaymentAutoAllocate.client
    };
})(List_all_Instance_for_User_MonetaryAccount_PaymentAutoAllocate || (exports.List_all_Instance_for_User_MonetaryAccount_PaymentAutoAllocate = List_all_Instance_for_User_MonetaryAccount_PaymentAutoAllocate = {}));
var READ_Instance_for_User_MonetaryAccount_PaymentAutoAllocate;
(function (READ_Instance_for_User_MonetaryAccount_PaymentAutoAllocate) {
    READ_Instance_for_User_MonetaryAccount_PaymentAutoAllocate.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "payment-auto-allocateID": props["payment-auto-allocateID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_Instance_for_User_MonetaryAccount_PaymentAutoAllocate.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_Instance_for_User_MonetaryAccount_PaymentAutoAllocate.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_Instance_for_User_MonetaryAccount_PaymentAutoAllocate.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-auto-allocate", serialization.serialize(it.path["payment-auto-allocateID"]), "instance", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_Instance_for_User_MonetaryAccount_PaymentAutoAllocate.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "payment-auto-allocateID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_Instance_for_User_MonetaryAccount_PaymentAutoAllocate.api = {
        name: "rEAD_Instance_for_User_MonetaryAccount_PaymentAutoAllocate",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/payment-auto-allocate/:payment-auto-allocateID/instance/:itemId",
        server: READ_Instance_for_User_MonetaryAccount_PaymentAutoAllocate.server,
        client: READ_Instance_for_User_MonetaryAccount_PaymentAutoAllocate.client
    };
})(READ_Instance_for_User_MonetaryAccount_PaymentAutoAllocate || (exports.READ_Instance_for_User_MonetaryAccount_PaymentAutoAllocate = READ_Instance_for_User_MonetaryAccount_PaymentAutoAllocate = {}));
var List_all_Invoice_for_User_MonetaryAccount;
(function (List_all_Invoice_for_User_MonetaryAccount) {
    List_all_Invoice_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_Invoice_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Invoice_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Invoice_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "invoice"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_Invoice_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_Invoice_for_User_MonetaryAccount.api = {
        name: "list_all_Invoice_for_User_MonetaryAccount",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/invoice",
        server: List_all_Invoice_for_User_MonetaryAccount.server,
        client: List_all_Invoice_for_User_MonetaryAccount.client
    };
})(List_all_Invoice_for_User_MonetaryAccount || (exports.List_all_Invoice_for_User_MonetaryAccount = List_all_Invoice_for_User_MonetaryAccount = {}));
var READ_Invoice_for_User_MonetaryAccount;
(function (READ_Invoice_for_User_MonetaryAccount) {
    READ_Invoice_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_Invoice_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_Invoice_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_Invoice_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "invoice", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_Invoice_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_Invoice_for_User_MonetaryAccount.api = {
        name: "rEAD_Invoice_for_User_MonetaryAccount",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/invoice/:itemId",
        server: READ_Invoice_for_User_MonetaryAccount.server,
        client: READ_Invoice_for_User_MonetaryAccount.client
    };
})(READ_Invoice_for_User_MonetaryAccount || (exports.READ_Invoice_for_User_MonetaryAccount = READ_Invoice_for_User_MonetaryAccount = {}));
var List_all_Invoice_for_User;
(function (List_all_Invoice_for_User) {
    List_all_Invoice_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_Invoice_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Invoice_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Invoice_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "invoice"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_Invoice_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_Invoice_for_User.api = {
        name: "list_all_Invoice_for_User",
        method: "GET",
        path: "user/:userID/invoice",
        server: List_all_Invoice_for_User.server,
        client: List_all_Invoice_for_User.client
    };
})(List_all_Invoice_for_User || (exports.List_all_Invoice_for_User = List_all_Invoice_for_User = {}));
var READ_Invoice_for_User;
(function (READ_Invoice_for_User) {
    READ_Invoice_for_User.request = (props) => ({
        path: { "userID": props["userID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_Invoice_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_Invoice_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_Invoice_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "invoice", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_Invoice_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "itemId": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_Invoice_for_User.api = {
        name: "rEAD_Invoice_for_User",
        method: "GET",
        path: "user/:userID/invoice/:itemId",
        server: READ_Invoice_for_User.server,
        client: READ_Invoice_for_User.client
    };
})(READ_Invoice_for_User || (exports.READ_Invoice_for_User = READ_Invoice_for_User = {}));
var READ_InvoiceExport_for_User_Invoice;
(function (READ_InvoiceExport_for_User_Invoice) {
    READ_InvoiceExport_for_User_Invoice.request = (props) => ({
        path: { "userID": props["userID"], "invoiceID": props["invoiceID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_InvoiceExport_for_User_Invoice.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_InvoiceExport_for_User_Invoice.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_InvoiceExport_for_User_Invoice.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "invoice", serialization.serialize(it.path["invoiceID"]), "invoice-export", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_InvoiceExport_for_User_Invoice.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "invoiceID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_InvoiceExport_for_User_Invoice.api = {
        name: "rEAD_InvoiceExport_for_User_Invoice",
        method: "GET",
        path: "user/:userID/invoice/:invoiceID/invoice-export/:itemId",
        server: READ_InvoiceExport_for_User_Invoice.server,
        client: READ_InvoiceExport_for_User_Invoice.client
    };
})(READ_InvoiceExport_for_User_Invoice || (exports.READ_InvoiceExport_for_User_Invoice = READ_InvoiceExport_for_User_Invoice = {}));
var UPDATE_InvoiceExport_for_User_Invoice;
(function (UPDATE_InvoiceExport_for_User_Invoice) {
    UPDATE_InvoiceExport_for_User_Invoice.request = (props) => ({
        path: { "userID": props["userID"], "invoiceID": props["invoiceID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_InvoiceExport_for_User_Invoice.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_InvoiceExport_for_User_Invoice.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_InvoiceExport_for_User_Invoice.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "invoice", serialization.serialize(it.path["invoiceID"]), "invoice-export", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_InvoiceExport_for_User_Invoice.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "invoiceID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_InvoiceExport_for_User_Invoice.api = {
        name: "uPDATE_InvoiceExport_for_User_Invoice",
        method: "PUT",
        path: "user/:userID/invoice/:invoiceID/invoice-export/:itemId",
        server: UPDATE_InvoiceExport_for_User_Invoice.server,
        client: UPDATE_InvoiceExport_for_User_Invoice.client
    };
})(UPDATE_InvoiceExport_for_User_Invoice || (exports.UPDATE_InvoiceExport_for_User_Invoice = UPDATE_InvoiceExport_for_User_Invoice = {}));
var DELETE_InvoiceExport_for_User_Invoice;
(function (DELETE_InvoiceExport_for_User_Invoice) {
    DELETE_InvoiceExport_for_User_Invoice.request = (props) => ({
        path: { "userID": props["userID"], "invoiceID": props["invoiceID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_InvoiceExport_for_User_Invoice.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_InvoiceExport_for_User_Invoice.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_InvoiceExport_for_User_Invoice.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "invoice", serialization.serialize(it.path["invoiceID"]), "invoice-export", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_InvoiceExport_for_User_Invoice.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "invoiceID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_InvoiceExport_for_User_Invoice.api = {
        name: "dELETE_InvoiceExport_for_User_Invoice",
        method: "DELETE",
        path: "user/:userID/invoice/:invoiceID/invoice-export/:itemId",
        server: DELETE_InvoiceExport_for_User_Invoice.server,
        client: DELETE_InvoiceExport_for_User_Invoice.client
    };
})(DELETE_InvoiceExport_for_User_Invoice || (exports.DELETE_InvoiceExport_for_User_Invoice = DELETE_InvoiceExport_for_User_Invoice = {}));
var CREATE_InvoiceExport_for_User_Invoice;
(function (CREATE_InvoiceExport_for_User_Invoice) {
    CREATE_InvoiceExport_for_User_Invoice.request = (props) => ({
        path: { "userID": props["userID"], "invoiceID": props["invoiceID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_InvoiceExport_for_User_Invoice.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_InvoiceExport_for_User_Invoice.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_InvoiceExport_for_User_Invoice.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "invoice", serialization.serialize(it.path["invoiceID"]), "invoice-export"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_InvoiceExport_for_User_Invoice.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "invoiceID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_InvoiceExport_for_User_Invoice.api = {
        name: "cREATE_InvoiceExport_for_User_Invoice",
        method: "POST",
        path: "user/:userID/invoice/:invoiceID/invoice-export",
        server: CREATE_InvoiceExport_for_User_Invoice.server,
        client: CREATE_InvoiceExport_for_User_Invoice.client
    };
})(CREATE_InvoiceExport_for_User_Invoice || (exports.CREATE_InvoiceExport_for_User_Invoice = CREATE_InvoiceExport_for_User_Invoice = {}));
var READ_Ip_for_User_CredentialPasswordIp;
(function (READ_Ip_for_User_CredentialPasswordIp) {
    READ_Ip_for_User_CredentialPasswordIp.request = (props) => ({
        path: { "userID": props["userID"], "credential-password-ipID": props["credential-password-ipID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_Ip_for_User_CredentialPasswordIp.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_Ip_for_User_CredentialPasswordIp.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_Ip_for_User_CredentialPasswordIp.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "credential-password-ip", serialization.serialize(it.path["credential-password-ipID"]), "ip", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_Ip_for_User_CredentialPasswordIp.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "credential-password-ipID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_Ip_for_User_CredentialPasswordIp.api = {
        name: "rEAD_Ip_for_User_CredentialPasswordIp",
        method: "GET",
        path: "user/:userID/credential-password-ip/:credential-password-ipID/ip/:itemId",
        server: READ_Ip_for_User_CredentialPasswordIp.server,
        client: READ_Ip_for_User_CredentialPasswordIp.client
    };
})(READ_Ip_for_User_CredentialPasswordIp || (exports.READ_Ip_for_User_CredentialPasswordIp = READ_Ip_for_User_CredentialPasswordIp = {}));
var UPDATE_Ip_for_User_CredentialPasswordIp;
(function (UPDATE_Ip_for_User_CredentialPasswordIp) {
    UPDATE_Ip_for_User_CredentialPasswordIp.request = (props) => ({
        path: { "userID": props["userID"], "credential-password-ipID": props["credential-password-ipID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_Ip_for_User_CredentialPasswordIp.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_Ip_for_User_CredentialPasswordIp.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_Ip_for_User_CredentialPasswordIp.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "credential-password-ip", serialization.serialize(it.path["credential-password-ipID"]), "ip", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_Ip_for_User_CredentialPasswordIp.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "credential-password-ipID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_Ip_for_User_CredentialPasswordIp.api = {
        name: "uPDATE_Ip_for_User_CredentialPasswordIp",
        method: "PUT",
        path: "user/:userID/credential-password-ip/:credential-password-ipID/ip/:itemId",
        server: UPDATE_Ip_for_User_CredentialPasswordIp.server,
        client: UPDATE_Ip_for_User_CredentialPasswordIp.client
    };
})(UPDATE_Ip_for_User_CredentialPasswordIp || (exports.UPDATE_Ip_for_User_CredentialPasswordIp = UPDATE_Ip_for_User_CredentialPasswordIp = {}));
var List_all_Ip_for_User_CredentialPasswordIp;
(function (List_all_Ip_for_User_CredentialPasswordIp) {
    List_all_Ip_for_User_CredentialPasswordIp.request = (props) => ({
        path: { "userID": props["userID"], "credential-password-ipID": props["credential-password-ipID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_Ip_for_User_CredentialPasswordIp.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Ip_for_User_CredentialPasswordIp.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Ip_for_User_CredentialPasswordIp.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "credential-password-ip", serialization.serialize(it.path["credential-password-ipID"]), "ip"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_Ip_for_User_CredentialPasswordIp.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "credential-password-ipID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_Ip_for_User_CredentialPasswordIp.api = {
        name: "list_all_Ip_for_User_CredentialPasswordIp",
        method: "GET",
        path: "user/:userID/credential-password-ip/:credential-password-ipID/ip",
        server: List_all_Ip_for_User_CredentialPasswordIp.server,
        client: List_all_Ip_for_User_CredentialPasswordIp.client
    };
})(List_all_Ip_for_User_CredentialPasswordIp || (exports.List_all_Ip_for_User_CredentialPasswordIp = List_all_Ip_for_User_CredentialPasswordIp = {}));
var CREATE_Ip_for_User_CredentialPasswordIp;
(function (CREATE_Ip_for_User_CredentialPasswordIp) {
    CREATE_Ip_for_User_CredentialPasswordIp.request = (props) => ({
        path: { "userID": props["userID"], "credential-password-ipID": props["credential-password-ipID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_Ip_for_User_CredentialPasswordIp.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_Ip_for_User_CredentialPasswordIp.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_Ip_for_User_CredentialPasswordIp.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "credential-password-ip", serialization.serialize(it.path["credential-password-ipID"]), "ip"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_Ip_for_User_CredentialPasswordIp.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "credential-password-ipID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_Ip_for_User_CredentialPasswordIp.api = {
        name: "cREATE_Ip_for_User_CredentialPasswordIp",
        method: "POST",
        path: "user/:userID/credential-password-ip/:credential-password-ipID/ip",
        server: CREATE_Ip_for_User_CredentialPasswordIp.server,
        client: CREATE_Ip_for_User_CredentialPasswordIp.client
    };
})(CREATE_Ip_for_User_CredentialPasswordIp || (exports.CREATE_Ip_for_User_CredentialPasswordIp = CREATE_Ip_for_User_CredentialPasswordIp = {}));
var List_all_LegalName_for_User;
(function (List_all_LegalName_for_User) {
    List_all_LegalName_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_LegalName_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_LegalName_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_LegalName_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "legal-name"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_LegalName_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_LegalName_for_User.api = {
        name: "list_all_LegalName_for_User",
        method: "GET",
        path: "user/:userID/legal-name",
        server: List_all_LegalName_for_User.server,
        client: List_all_LegalName_for_User.client
    };
})(List_all_LegalName_for_User || (exports.List_all_LegalName_for_User = List_all_LegalName_for_User = {}));
var List_all_Limit_for_User;
(function (List_all_Limit_for_User) {
    List_all_Limit_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_Limit_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Limit_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Limit_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "limit"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_Limit_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_Limit_for_User.api = {
        name: "list_all_Limit_for_User",
        method: "GET",
        path: "user/:userID/limit",
        server: List_all_Limit_for_User.server,
        client: List_all_Limit_for_User.client
    };
})(List_all_Limit_for_User || (exports.List_all_Limit_for_User = List_all_Limit_for_User = {}));
var READ_MastercardAction_for_User_MonetaryAccount;
(function (READ_MastercardAction_for_User_MonetaryAccount) {
    READ_MastercardAction_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_MastercardAction_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_MastercardAction_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_MastercardAction_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "mastercard-action", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_MastercardAction_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_MastercardAction_for_User_MonetaryAccount.api = {
        name: "rEAD_MastercardAction_for_User_MonetaryAccount",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/mastercard-action/:itemId",
        server: READ_MastercardAction_for_User_MonetaryAccount.server,
        client: READ_MastercardAction_for_User_MonetaryAccount.client
    };
})(READ_MastercardAction_for_User_MonetaryAccount || (exports.READ_MastercardAction_for_User_MonetaryAccount = READ_MastercardAction_for_User_MonetaryAccount = {}));
var List_all_MastercardAction_for_User_MonetaryAccount;
(function (List_all_MastercardAction_for_User_MonetaryAccount) {
    List_all_MastercardAction_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_MastercardAction_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_MastercardAction_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_MastercardAction_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "mastercard-action"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_MastercardAction_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_MastercardAction_for_User_MonetaryAccount.api = {
        name: "list_all_MastercardAction_for_User_MonetaryAccount",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/mastercard-action",
        server: List_all_MastercardAction_for_User_MonetaryAccount.server,
        client: List_all_MastercardAction_for_User_MonetaryAccount.client
    };
})(List_all_MastercardAction_for_User_MonetaryAccount || (exports.List_all_MastercardAction_for_User_MonetaryAccount = List_all_MastercardAction_for_User_MonetaryAccount = {}));
var READ_MonetaryAccount_for_User;
(function (READ_MonetaryAccount_for_User) {
    READ_MonetaryAccount_for_User.request = (props) => ({
        path: { "userID": props["userID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_MonetaryAccount_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_MonetaryAccount_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_MonetaryAccount_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_MonetaryAccount_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "itemId": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_MonetaryAccount_for_User.api = {
        name: "rEAD_MonetaryAccount_for_User",
        method: "GET",
        path: "user/:userID/monetary-account/:itemId",
        server: READ_MonetaryAccount_for_User.server,
        client: READ_MonetaryAccount_for_User.client
    };
})(READ_MonetaryAccount_for_User || (exports.READ_MonetaryAccount_for_User = READ_MonetaryAccount_for_User = {}));
var List_all_MonetaryAccount_for_User;
(function (List_all_MonetaryAccount_for_User) {
    List_all_MonetaryAccount_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_MonetaryAccount_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_MonetaryAccount_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_MonetaryAccount_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_MonetaryAccount_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_MonetaryAccount_for_User.api = {
        name: "list_all_MonetaryAccount_for_User",
        method: "GET",
        path: "user/:userID/monetary-account",
        server: List_all_MonetaryAccount_for_User.server,
        client: List_all_MonetaryAccount_for_User.client
    };
})(List_all_MonetaryAccount_for_User || (exports.List_all_MonetaryAccount_for_User = List_all_MonetaryAccount_for_User = {}));
var List_all_MonetaryAccountBank_for_User;
(function (List_all_MonetaryAccountBank_for_User) {
    List_all_MonetaryAccountBank_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_MonetaryAccountBank_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_MonetaryAccountBank_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_MonetaryAccountBank_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account-bank"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_MonetaryAccountBank_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_MonetaryAccountBank_for_User.api = {
        name: "list_all_MonetaryAccountBank_for_User",
        method: "GET",
        path: "user/:userID/monetary-account-bank",
        server: List_all_MonetaryAccountBank_for_User.server,
        client: List_all_MonetaryAccountBank_for_User.client
    };
})(List_all_MonetaryAccountBank_for_User || (exports.List_all_MonetaryAccountBank_for_User = List_all_MonetaryAccountBank_for_User = {}));
var CREATE_MonetaryAccountBank_for_User;
(function (CREATE_MonetaryAccountBank_for_User) {
    CREATE_MonetaryAccountBank_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_MonetaryAccountBank_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_MonetaryAccountBank_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_MonetaryAccountBank_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account-bank"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_MonetaryAccountBank_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_MonetaryAccountBank_for_User.api = {
        name: "cREATE_MonetaryAccountBank_for_User",
        method: "POST",
        path: "user/:userID/monetary-account-bank",
        server: CREATE_MonetaryAccountBank_for_User.server,
        client: CREATE_MonetaryAccountBank_for_User.client
    };
})(CREATE_MonetaryAccountBank_for_User || (exports.CREATE_MonetaryAccountBank_for_User = CREATE_MonetaryAccountBank_for_User = {}));
var READ_MonetaryAccountBank_for_User;
(function (READ_MonetaryAccountBank_for_User) {
    READ_MonetaryAccountBank_for_User.request = (props) => ({
        path: { "userID": props["userID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_MonetaryAccountBank_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_MonetaryAccountBank_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_MonetaryAccountBank_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account-bank", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_MonetaryAccountBank_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "itemId": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_MonetaryAccountBank_for_User.api = {
        name: "rEAD_MonetaryAccountBank_for_User",
        method: "GET",
        path: "user/:userID/monetary-account-bank/:itemId",
        server: READ_MonetaryAccountBank_for_User.server,
        client: READ_MonetaryAccountBank_for_User.client
    };
})(READ_MonetaryAccountBank_for_User || (exports.READ_MonetaryAccountBank_for_User = READ_MonetaryAccountBank_for_User = {}));
var UPDATE_MonetaryAccountBank_for_User;
(function (UPDATE_MonetaryAccountBank_for_User) {
    UPDATE_MonetaryAccountBank_for_User.request = (props) => ({
        path: { "userID": props["userID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_MonetaryAccountBank_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_MonetaryAccountBank_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_MonetaryAccountBank_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account-bank", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_MonetaryAccountBank_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "itemId": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_MonetaryAccountBank_for_User.api = {
        name: "uPDATE_MonetaryAccountBank_for_User",
        method: "PUT",
        path: "user/:userID/monetary-account-bank/:itemId",
        server: UPDATE_MonetaryAccountBank_for_User.server,
        client: UPDATE_MonetaryAccountBank_for_User.client
    };
})(UPDATE_MonetaryAccountBank_for_User || (exports.UPDATE_MonetaryAccountBank_for_User = UPDATE_MonetaryAccountBank_for_User = {}));
var READ_MonetaryAccountCard_for_User;
(function (READ_MonetaryAccountCard_for_User) {
    READ_MonetaryAccountCard_for_User.request = (props) => ({
        path: { "userID": props["userID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_MonetaryAccountCard_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_MonetaryAccountCard_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_MonetaryAccountCard_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account-card", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_MonetaryAccountCard_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "itemId": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_MonetaryAccountCard_for_User.api = {
        name: "rEAD_MonetaryAccountCard_for_User",
        method: "GET",
        path: "user/:userID/monetary-account-card/:itemId",
        server: READ_MonetaryAccountCard_for_User.server,
        client: READ_MonetaryAccountCard_for_User.client
    };
})(READ_MonetaryAccountCard_for_User || (exports.READ_MonetaryAccountCard_for_User = READ_MonetaryAccountCard_for_User = {}));
var UPDATE_MonetaryAccountCard_for_User;
(function (UPDATE_MonetaryAccountCard_for_User) {
    UPDATE_MonetaryAccountCard_for_User.request = (props) => ({
        path: { "userID": props["userID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_MonetaryAccountCard_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_MonetaryAccountCard_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_MonetaryAccountCard_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account-card", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_MonetaryAccountCard_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "itemId": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_MonetaryAccountCard_for_User.api = {
        name: "uPDATE_MonetaryAccountCard_for_User",
        method: "PUT",
        path: "user/:userID/monetary-account-card/:itemId",
        server: UPDATE_MonetaryAccountCard_for_User.server,
        client: UPDATE_MonetaryAccountCard_for_User.client
    };
})(UPDATE_MonetaryAccountCard_for_User || (exports.UPDATE_MonetaryAccountCard_for_User = UPDATE_MonetaryAccountCard_for_User = {}));
var List_all_MonetaryAccountCard_for_User;
(function (List_all_MonetaryAccountCard_for_User) {
    List_all_MonetaryAccountCard_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_MonetaryAccountCard_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_MonetaryAccountCard_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_MonetaryAccountCard_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account-card"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_MonetaryAccountCard_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_MonetaryAccountCard_for_User.api = {
        name: "list_all_MonetaryAccountCard_for_User",
        method: "GET",
        path: "user/:userID/monetary-account-card",
        server: List_all_MonetaryAccountCard_for_User.server,
        client: List_all_MonetaryAccountCard_for_User.client
    };
})(List_all_MonetaryAccountCard_for_User || (exports.List_all_MonetaryAccountCard_for_User = List_all_MonetaryAccountCard_for_User = {}));
var List_all_MonetaryAccountExternal_for_User;
(function (List_all_MonetaryAccountExternal_for_User) {
    List_all_MonetaryAccountExternal_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_MonetaryAccountExternal_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_MonetaryAccountExternal_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_MonetaryAccountExternal_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account-external"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_MonetaryAccountExternal_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_MonetaryAccountExternal_for_User.api = {
        name: "list_all_MonetaryAccountExternal_for_User",
        method: "GET",
        path: "user/:userID/monetary-account-external",
        server: List_all_MonetaryAccountExternal_for_User.server,
        client: List_all_MonetaryAccountExternal_for_User.client
    };
})(List_all_MonetaryAccountExternal_for_User || (exports.List_all_MonetaryAccountExternal_for_User = List_all_MonetaryAccountExternal_for_User = {}));
var CREATE_MonetaryAccountExternal_for_User;
(function (CREATE_MonetaryAccountExternal_for_User) {
    CREATE_MonetaryAccountExternal_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_MonetaryAccountExternal_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_MonetaryAccountExternal_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_MonetaryAccountExternal_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account-external"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_MonetaryAccountExternal_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_MonetaryAccountExternal_for_User.api = {
        name: "cREATE_MonetaryAccountExternal_for_User",
        method: "POST",
        path: "user/:userID/monetary-account-external",
        server: CREATE_MonetaryAccountExternal_for_User.server,
        client: CREATE_MonetaryAccountExternal_for_User.client
    };
})(CREATE_MonetaryAccountExternal_for_User || (exports.CREATE_MonetaryAccountExternal_for_User = CREATE_MonetaryAccountExternal_for_User = {}));
var READ_MonetaryAccountExternal_for_User;
(function (READ_MonetaryAccountExternal_for_User) {
    READ_MonetaryAccountExternal_for_User.request = (props) => ({
        path: { "userID": props["userID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_MonetaryAccountExternal_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_MonetaryAccountExternal_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_MonetaryAccountExternal_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account-external", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_MonetaryAccountExternal_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "itemId": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_MonetaryAccountExternal_for_User.api = {
        name: "rEAD_MonetaryAccountExternal_for_User",
        method: "GET",
        path: "user/:userID/monetary-account-external/:itemId",
        server: READ_MonetaryAccountExternal_for_User.server,
        client: READ_MonetaryAccountExternal_for_User.client
    };
})(READ_MonetaryAccountExternal_for_User || (exports.READ_MonetaryAccountExternal_for_User = READ_MonetaryAccountExternal_for_User = {}));
var UPDATE_MonetaryAccountExternal_for_User;
(function (UPDATE_MonetaryAccountExternal_for_User) {
    UPDATE_MonetaryAccountExternal_for_User.request = (props) => ({
        path: { "userID": props["userID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_MonetaryAccountExternal_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_MonetaryAccountExternal_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_MonetaryAccountExternal_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account-external", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_MonetaryAccountExternal_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "itemId": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_MonetaryAccountExternal_for_User.api = {
        name: "uPDATE_MonetaryAccountExternal_for_User",
        method: "PUT",
        path: "user/:userID/monetary-account-external/:itemId",
        server: UPDATE_MonetaryAccountExternal_for_User.server,
        client: UPDATE_MonetaryAccountExternal_for_User.client
    };
})(UPDATE_MonetaryAccountExternal_for_User || (exports.UPDATE_MonetaryAccountExternal_for_User = UPDATE_MonetaryAccountExternal_for_User = {}));
var List_all_MonetaryAccountExternalSavings_for_User;
(function (List_all_MonetaryAccountExternalSavings_for_User) {
    List_all_MonetaryAccountExternalSavings_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_MonetaryAccountExternalSavings_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_MonetaryAccountExternalSavings_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_MonetaryAccountExternalSavings_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account-external-savings"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_MonetaryAccountExternalSavings_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_MonetaryAccountExternalSavings_for_User.api = {
        name: "list_all_MonetaryAccountExternalSavings_for_User",
        method: "GET",
        path: "user/:userID/monetary-account-external-savings",
        server: List_all_MonetaryAccountExternalSavings_for_User.server,
        client: List_all_MonetaryAccountExternalSavings_for_User.client
    };
})(List_all_MonetaryAccountExternalSavings_for_User || (exports.List_all_MonetaryAccountExternalSavings_for_User = List_all_MonetaryAccountExternalSavings_for_User = {}));
var CREATE_MonetaryAccountExternalSavings_for_User;
(function (CREATE_MonetaryAccountExternalSavings_for_User) {
    CREATE_MonetaryAccountExternalSavings_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_MonetaryAccountExternalSavings_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_MonetaryAccountExternalSavings_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_MonetaryAccountExternalSavings_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account-external-savings"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_MonetaryAccountExternalSavings_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_MonetaryAccountExternalSavings_for_User.api = {
        name: "cREATE_MonetaryAccountExternalSavings_for_User",
        method: "POST",
        path: "user/:userID/monetary-account-external-savings",
        server: CREATE_MonetaryAccountExternalSavings_for_User.server,
        client: CREATE_MonetaryAccountExternalSavings_for_User.client
    };
})(CREATE_MonetaryAccountExternalSavings_for_User || (exports.CREATE_MonetaryAccountExternalSavings_for_User = CREATE_MonetaryAccountExternalSavings_for_User = {}));
var READ_MonetaryAccountExternalSavings_for_User;
(function (READ_MonetaryAccountExternalSavings_for_User) {
    READ_MonetaryAccountExternalSavings_for_User.request = (props) => ({
        path: { "userID": props["userID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_MonetaryAccountExternalSavings_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_MonetaryAccountExternalSavings_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_MonetaryAccountExternalSavings_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account-external-savings", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_MonetaryAccountExternalSavings_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "itemId": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_MonetaryAccountExternalSavings_for_User.api = {
        name: "rEAD_MonetaryAccountExternalSavings_for_User",
        method: "GET",
        path: "user/:userID/monetary-account-external-savings/:itemId",
        server: READ_MonetaryAccountExternalSavings_for_User.server,
        client: READ_MonetaryAccountExternalSavings_for_User.client
    };
})(READ_MonetaryAccountExternalSavings_for_User || (exports.READ_MonetaryAccountExternalSavings_for_User = READ_MonetaryAccountExternalSavings_for_User = {}));
var UPDATE_MonetaryAccountExternalSavings_for_User;
(function (UPDATE_MonetaryAccountExternalSavings_for_User) {
    UPDATE_MonetaryAccountExternalSavings_for_User.request = (props) => ({
        path: { "userID": props["userID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_MonetaryAccountExternalSavings_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_MonetaryAccountExternalSavings_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_MonetaryAccountExternalSavings_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account-external-savings", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_MonetaryAccountExternalSavings_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "itemId": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_MonetaryAccountExternalSavings_for_User.api = {
        name: "uPDATE_MonetaryAccountExternalSavings_for_User",
        method: "PUT",
        path: "user/:userID/monetary-account-external-savings/:itemId",
        server: UPDATE_MonetaryAccountExternalSavings_for_User.server,
        client: UPDATE_MonetaryAccountExternalSavings_for_User.client
    };
})(UPDATE_MonetaryAccountExternalSavings_for_User || (exports.UPDATE_MonetaryAccountExternalSavings_for_User = UPDATE_MonetaryAccountExternalSavings_for_User = {}));
var List_all_MonetaryAccountJoint_for_User;
(function (List_all_MonetaryAccountJoint_for_User) {
    List_all_MonetaryAccountJoint_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_MonetaryAccountJoint_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_MonetaryAccountJoint_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_MonetaryAccountJoint_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account-joint"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_MonetaryAccountJoint_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_MonetaryAccountJoint_for_User.api = {
        name: "list_all_MonetaryAccountJoint_for_User",
        method: "GET",
        path: "user/:userID/monetary-account-joint",
        server: List_all_MonetaryAccountJoint_for_User.server,
        client: List_all_MonetaryAccountJoint_for_User.client
    };
})(List_all_MonetaryAccountJoint_for_User || (exports.List_all_MonetaryAccountJoint_for_User = List_all_MonetaryAccountJoint_for_User = {}));
var CREATE_MonetaryAccountJoint_for_User;
(function (CREATE_MonetaryAccountJoint_for_User) {
    CREATE_MonetaryAccountJoint_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_MonetaryAccountJoint_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_MonetaryAccountJoint_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_MonetaryAccountJoint_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account-joint"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_MonetaryAccountJoint_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_MonetaryAccountJoint_for_User.api = {
        name: "cREATE_MonetaryAccountJoint_for_User",
        method: "POST",
        path: "user/:userID/monetary-account-joint",
        server: CREATE_MonetaryAccountJoint_for_User.server,
        client: CREATE_MonetaryAccountJoint_for_User.client
    };
})(CREATE_MonetaryAccountJoint_for_User || (exports.CREATE_MonetaryAccountJoint_for_User = CREATE_MonetaryAccountJoint_for_User = {}));
var READ_MonetaryAccountJoint_for_User;
(function (READ_MonetaryAccountJoint_for_User) {
    READ_MonetaryAccountJoint_for_User.request = (props) => ({
        path: { "userID": props["userID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_MonetaryAccountJoint_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_MonetaryAccountJoint_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_MonetaryAccountJoint_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account-joint", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_MonetaryAccountJoint_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "itemId": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_MonetaryAccountJoint_for_User.api = {
        name: "rEAD_MonetaryAccountJoint_for_User",
        method: "GET",
        path: "user/:userID/monetary-account-joint/:itemId",
        server: READ_MonetaryAccountJoint_for_User.server,
        client: READ_MonetaryAccountJoint_for_User.client
    };
})(READ_MonetaryAccountJoint_for_User || (exports.READ_MonetaryAccountJoint_for_User = READ_MonetaryAccountJoint_for_User = {}));
var UPDATE_MonetaryAccountJoint_for_User;
(function (UPDATE_MonetaryAccountJoint_for_User) {
    UPDATE_MonetaryAccountJoint_for_User.request = (props) => ({
        path: { "userID": props["userID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_MonetaryAccountJoint_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_MonetaryAccountJoint_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_MonetaryAccountJoint_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account-joint", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_MonetaryAccountJoint_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "itemId": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_MonetaryAccountJoint_for_User.api = {
        name: "uPDATE_MonetaryAccountJoint_for_User",
        method: "PUT",
        path: "user/:userID/monetary-account-joint/:itemId",
        server: UPDATE_MonetaryAccountJoint_for_User.server,
        client: UPDATE_MonetaryAccountJoint_for_User.client
    };
})(UPDATE_MonetaryAccountJoint_for_User || (exports.UPDATE_MonetaryAccountJoint_for_User = UPDATE_MonetaryAccountJoint_for_User = {}));
var List_all_MonetaryAccountSavings_for_User;
(function (List_all_MonetaryAccountSavings_for_User) {
    List_all_MonetaryAccountSavings_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_MonetaryAccountSavings_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_MonetaryAccountSavings_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_MonetaryAccountSavings_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account-savings"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_MonetaryAccountSavings_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_MonetaryAccountSavings_for_User.api = {
        name: "list_all_MonetaryAccountSavings_for_User",
        method: "GET",
        path: "user/:userID/monetary-account-savings",
        server: List_all_MonetaryAccountSavings_for_User.server,
        client: List_all_MonetaryAccountSavings_for_User.client
    };
})(List_all_MonetaryAccountSavings_for_User || (exports.List_all_MonetaryAccountSavings_for_User = List_all_MonetaryAccountSavings_for_User = {}));
var CREATE_MonetaryAccountSavings_for_User;
(function (CREATE_MonetaryAccountSavings_for_User) {
    CREATE_MonetaryAccountSavings_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_MonetaryAccountSavings_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_MonetaryAccountSavings_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_MonetaryAccountSavings_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account-savings"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_MonetaryAccountSavings_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_MonetaryAccountSavings_for_User.api = {
        name: "cREATE_MonetaryAccountSavings_for_User",
        method: "POST",
        path: "user/:userID/monetary-account-savings",
        server: CREATE_MonetaryAccountSavings_for_User.server,
        client: CREATE_MonetaryAccountSavings_for_User.client
    };
})(CREATE_MonetaryAccountSavings_for_User || (exports.CREATE_MonetaryAccountSavings_for_User = CREATE_MonetaryAccountSavings_for_User = {}));
var READ_MonetaryAccountSavings_for_User;
(function (READ_MonetaryAccountSavings_for_User) {
    READ_MonetaryAccountSavings_for_User.request = (props) => ({
        path: { "userID": props["userID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_MonetaryAccountSavings_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_MonetaryAccountSavings_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_MonetaryAccountSavings_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account-savings", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_MonetaryAccountSavings_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "itemId": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_MonetaryAccountSavings_for_User.api = {
        name: "rEAD_MonetaryAccountSavings_for_User",
        method: "GET",
        path: "user/:userID/monetary-account-savings/:itemId",
        server: READ_MonetaryAccountSavings_for_User.server,
        client: READ_MonetaryAccountSavings_for_User.client
    };
})(READ_MonetaryAccountSavings_for_User || (exports.READ_MonetaryAccountSavings_for_User = READ_MonetaryAccountSavings_for_User = {}));
var UPDATE_MonetaryAccountSavings_for_User;
(function (UPDATE_MonetaryAccountSavings_for_User) {
    UPDATE_MonetaryAccountSavings_for_User.request = (props) => ({
        path: { "userID": props["userID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_MonetaryAccountSavings_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_MonetaryAccountSavings_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_MonetaryAccountSavings_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account-savings", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_MonetaryAccountSavings_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "itemId": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_MonetaryAccountSavings_for_User.api = {
        name: "uPDATE_MonetaryAccountSavings_for_User",
        method: "PUT",
        path: "user/:userID/monetary-account-savings/:itemId",
        server: UPDATE_MonetaryAccountSavings_for_User.server,
        client: UPDATE_MonetaryAccountSavings_for_User.client
    };
})(UPDATE_MonetaryAccountSavings_for_User || (exports.UPDATE_MonetaryAccountSavings_for_User = UPDATE_MonetaryAccountSavings_for_User = {}));
var List_all_Name_for_UserCompany;
(function (List_all_Name_for_UserCompany) {
    List_all_Name_for_UserCompany.request = (props) => ({
        path: { "user-companyID": props["user-companyID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_Name_for_UserCompany.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Name_for_UserCompany.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Name_for_UserCompany.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user-company", serialization.serialize(it.path["user-companyID"]), "name"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_Name_for_UserCompany.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "user-companyID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_Name_for_UserCompany.api = {
        name: "list_all_Name_for_UserCompany",
        method: "GET",
        path: "user-company/:user-companyID/name",
        server: List_all_Name_for_UserCompany.server,
        client: List_all_Name_for_UserCompany.client
    };
})(List_all_Name_for_UserCompany || (exports.List_all_Name_for_UserCompany = List_all_Name_for_UserCompany = {}));
var List_all_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction;
(function (List_all_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction) {
    List_all_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "adyen-card-transactionID": props["adyen-card-transactionID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "adyen-card-transaction", serialization.serialize(it.path["adyen-card-transactionID"]), "note-attachment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "adyen-card-transactionID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction.api = {
        name: "list_all_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/adyen-card-transaction/:adyen-card-transactionID/note-attachment",
        server: List_all_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction.server,
        client: List_all_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction.client
    };
})(List_all_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction || (exports.List_all_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction = List_all_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction = {}));
var CREATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction;
(function (CREATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction) {
    CREATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "adyen-card-transactionID": props["adyen-card-transactionID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "adyen-card-transaction", serialization.serialize(it.path["adyen-card-transactionID"]), "note-attachment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "adyen-card-transactionID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction.api = {
        name: "cREATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/adyen-card-transaction/:adyen-card-transactionID/note-attachment",
        server: CREATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction.server,
        client: CREATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction.client
    };
})(CREATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction || (exports.CREATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction = CREATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction = {}));
var READ_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction;
(function (READ_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction) {
    READ_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "adyen-card-transactionID": props["adyen-card-transactionID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "adyen-card-transaction", serialization.serialize(it.path["adyen-card-transactionID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "adyen-card-transactionID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction.api = {
        name: "rEAD_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/adyen-card-transaction/:adyen-card-transactionID/note-attachment/:itemId",
        server: READ_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction.server,
        client: READ_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction.client
    };
})(READ_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction || (exports.READ_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction = READ_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction = {}));
var UPDATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction;
(function (UPDATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction) {
    UPDATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "adyen-card-transactionID": props["adyen-card-transactionID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "adyen-card-transaction", serialization.serialize(it.path["adyen-card-transactionID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "adyen-card-transactionID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction.api = {
        name: "uPDATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/adyen-card-transaction/:adyen-card-transactionID/note-attachment/:itemId",
        server: UPDATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction.server,
        client: UPDATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction.client
    };
})(UPDATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction || (exports.UPDATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction = UPDATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction = {}));
var DELETE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction;
(function (DELETE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction) {
    DELETE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "adyen-card-transactionID": props["adyen-card-transactionID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "adyen-card-transaction", serialization.serialize(it.path["adyen-card-transactionID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "adyen-card-transactionID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction.api = {
        name: "dELETE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction",
        method: "DELETE",
        path: "user/:userID/monetary-account/:monetary-accountID/adyen-card-transaction/:adyen-card-transactionID/note-attachment/:itemId",
        server: DELETE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction.server,
        client: DELETE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction.client
    };
})(DELETE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction || (exports.DELETE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction = DELETE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction = {}));
var List_all_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment;
(function (List_all_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment) {
    List_all_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "switch-service-paymentID": props["switch-service-paymentID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "switch-service-payment", serialization.serialize(it.path["switch-service-paymentID"]), "note-attachment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "switch-service-paymentID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment.api = {
        name: "list_all_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/switch-service-payment/:switch-service-paymentID/note-attachment",
        server: List_all_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment.server,
        client: List_all_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment.client
    };
})(List_all_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment || (exports.List_all_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment = List_all_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment = {}));
var CREATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment;
(function (CREATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment) {
    CREATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "switch-service-paymentID": props["switch-service-paymentID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "switch-service-payment", serialization.serialize(it.path["switch-service-paymentID"]), "note-attachment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "switch-service-paymentID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment.api = {
        name: "cREATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/switch-service-payment/:switch-service-paymentID/note-attachment",
        server: CREATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment.server,
        client: CREATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment.client
    };
})(CREATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment || (exports.CREATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment = CREATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment = {}));
var READ_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment;
(function (READ_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment) {
    READ_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "switch-service-paymentID": props["switch-service-paymentID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "switch-service-payment", serialization.serialize(it.path["switch-service-paymentID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "switch-service-paymentID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment.api = {
        name: "rEAD_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/switch-service-payment/:switch-service-paymentID/note-attachment/:itemId",
        server: READ_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment.server,
        client: READ_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment.client
    };
})(READ_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment || (exports.READ_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment = READ_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment = {}));
var UPDATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment;
(function (UPDATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment) {
    UPDATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "switch-service-paymentID": props["switch-service-paymentID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "switch-service-payment", serialization.serialize(it.path["switch-service-paymentID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "switch-service-paymentID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment.api = {
        name: "uPDATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/switch-service-payment/:switch-service-paymentID/note-attachment/:itemId",
        server: UPDATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment.server,
        client: UPDATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment.client
    };
})(UPDATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment || (exports.UPDATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment = UPDATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment = {}));
var DELETE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment;
(function (DELETE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment) {
    DELETE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "switch-service-paymentID": props["switch-service-paymentID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "switch-service-payment", serialization.serialize(it.path["switch-service-paymentID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "switch-service-paymentID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment.api = {
        name: "dELETE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment",
        method: "DELETE",
        path: "user/:userID/monetary-account/:monetary-accountID/switch-service-payment/:switch-service-paymentID/note-attachment/:itemId",
        server: DELETE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment.server,
        client: DELETE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment.client
    };
})(DELETE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment || (exports.DELETE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment = DELETE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment = {}));
var List_all_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult;
(function (List_all_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult) {
    List_all_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "bunqme-fundraiser-resultID": props["bunqme-fundraiser-resultID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "bunqme-fundraiser-result", serialization.serialize(it.path["bunqme-fundraiser-resultID"]), "note-attachment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "bunqme-fundraiser-resultID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult.api = {
        name: "list_all_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/bunqme-fundraiser-result/:bunqme-fundraiser-resultID/note-attachment",
        server: List_all_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult.server,
        client: List_all_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult.client
    };
})(List_all_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult || (exports.List_all_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult = List_all_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult = {}));
var CREATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult;
(function (CREATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult) {
    CREATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "bunqme-fundraiser-resultID": props["bunqme-fundraiser-resultID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "bunqme-fundraiser-result", serialization.serialize(it.path["bunqme-fundraiser-resultID"]), "note-attachment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "bunqme-fundraiser-resultID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult.api = {
        name: "cREATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/bunqme-fundraiser-result/:bunqme-fundraiser-resultID/note-attachment",
        server: CREATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult.server,
        client: CREATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult.client
    };
})(CREATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult || (exports.CREATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult = CREATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult = {}));
var READ_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult;
(function (READ_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult) {
    READ_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "bunqme-fundraiser-resultID": props["bunqme-fundraiser-resultID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "bunqme-fundraiser-result", serialization.serialize(it.path["bunqme-fundraiser-resultID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "bunqme-fundraiser-resultID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult.api = {
        name: "rEAD_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/bunqme-fundraiser-result/:bunqme-fundraiser-resultID/note-attachment/:itemId",
        server: READ_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult.server,
        client: READ_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult.client
    };
})(READ_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult || (exports.READ_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult = READ_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult = {}));
var UPDATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult;
(function (UPDATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult) {
    UPDATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "bunqme-fundraiser-resultID": props["bunqme-fundraiser-resultID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "bunqme-fundraiser-result", serialization.serialize(it.path["bunqme-fundraiser-resultID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "bunqme-fundraiser-resultID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult.api = {
        name: "uPDATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/bunqme-fundraiser-result/:bunqme-fundraiser-resultID/note-attachment/:itemId",
        server: UPDATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult.server,
        client: UPDATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult.client
    };
})(UPDATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult || (exports.UPDATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult = UPDATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult = {}));
var DELETE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult;
(function (DELETE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult) {
    DELETE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "bunqme-fundraiser-resultID": props["bunqme-fundraiser-resultID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "bunqme-fundraiser-result", serialization.serialize(it.path["bunqme-fundraiser-resultID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "bunqme-fundraiser-resultID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult.api = {
        name: "dELETE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult",
        method: "DELETE",
        path: "user/:userID/monetary-account/:monetary-accountID/bunqme-fundraiser-result/:bunqme-fundraiser-resultID/note-attachment/:itemId",
        server: DELETE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult.server,
        client: DELETE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult.client
    };
})(DELETE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult || (exports.DELETE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult = DELETE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult = {}));
var List_all_NoteAttachment_for_User_MonetaryAccount_DraftPayment;
(function (List_all_NoteAttachment_for_User_MonetaryAccount_DraftPayment) {
    List_all_NoteAttachment_for_User_MonetaryAccount_DraftPayment.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "draft-paymentID": props["draft-paymentID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_DraftPayment.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_DraftPayment.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_DraftPayment.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "draft-payment", serialization.serialize(it.path["draft-paymentID"]), "note-attachment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_DraftPayment.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "draft-paymentID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_DraftPayment.api = {
        name: "list_all_NoteAttachment_for_User_MonetaryAccount_DraftPayment",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/draft-payment/:draft-paymentID/note-attachment",
        server: List_all_NoteAttachment_for_User_MonetaryAccount_DraftPayment.server,
        client: List_all_NoteAttachment_for_User_MonetaryAccount_DraftPayment.client
    };
})(List_all_NoteAttachment_for_User_MonetaryAccount_DraftPayment || (exports.List_all_NoteAttachment_for_User_MonetaryAccount_DraftPayment = List_all_NoteAttachment_for_User_MonetaryAccount_DraftPayment = {}));
var CREATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment;
(function (CREATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment) {
    CREATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "draft-paymentID": props["draft-paymentID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "draft-payment", serialization.serialize(it.path["draft-paymentID"]), "note-attachment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "draft-paymentID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment.api = {
        name: "cREATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/draft-payment/:draft-paymentID/note-attachment",
        server: CREATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment.server,
        client: CREATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment.client
    };
})(CREATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment || (exports.CREATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment = CREATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment = {}));
var READ_NoteAttachment_for_User_MonetaryAccount_DraftPayment;
(function (READ_NoteAttachment_for_User_MonetaryAccount_DraftPayment) {
    READ_NoteAttachment_for_User_MonetaryAccount_DraftPayment.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "draft-paymentID": props["draft-paymentID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_DraftPayment.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_DraftPayment.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_DraftPayment.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "draft-payment", serialization.serialize(it.path["draft-paymentID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_NoteAttachment_for_User_MonetaryAccount_DraftPayment.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "draft-paymentID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_NoteAttachment_for_User_MonetaryAccount_DraftPayment.api = {
        name: "rEAD_NoteAttachment_for_User_MonetaryAccount_DraftPayment",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/draft-payment/:draft-paymentID/note-attachment/:itemId",
        server: READ_NoteAttachment_for_User_MonetaryAccount_DraftPayment.server,
        client: READ_NoteAttachment_for_User_MonetaryAccount_DraftPayment.client
    };
})(READ_NoteAttachment_for_User_MonetaryAccount_DraftPayment || (exports.READ_NoteAttachment_for_User_MonetaryAccount_DraftPayment = READ_NoteAttachment_for_User_MonetaryAccount_DraftPayment = {}));
var UPDATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment;
(function (UPDATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment) {
    UPDATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "draft-paymentID": props["draft-paymentID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "draft-payment", serialization.serialize(it.path["draft-paymentID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "draft-paymentID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment.api = {
        name: "uPDATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/draft-payment/:draft-paymentID/note-attachment/:itemId",
        server: UPDATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment.server,
        client: UPDATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment.client
    };
})(UPDATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment || (exports.UPDATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment = UPDATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment = {}));
var DELETE_NoteAttachment_for_User_MonetaryAccount_DraftPayment;
(function (DELETE_NoteAttachment_for_User_MonetaryAccount_DraftPayment) {
    DELETE_NoteAttachment_for_User_MonetaryAccount_DraftPayment.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "draft-paymentID": props["draft-paymentID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_DraftPayment.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_DraftPayment.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_DraftPayment.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "draft-payment", serialization.serialize(it.path["draft-paymentID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_DraftPayment.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "draft-paymentID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_DraftPayment.api = {
        name: "dELETE_NoteAttachment_for_User_MonetaryAccount_DraftPayment",
        method: "DELETE",
        path: "user/:userID/monetary-account/:monetary-accountID/draft-payment/:draft-paymentID/note-attachment/:itemId",
        server: DELETE_NoteAttachment_for_User_MonetaryAccount_DraftPayment.server,
        client: DELETE_NoteAttachment_for_User_MonetaryAccount_DraftPayment.client
    };
})(DELETE_NoteAttachment_for_User_MonetaryAccount_DraftPayment || (exports.DELETE_NoteAttachment_for_User_MonetaryAccount_DraftPayment = DELETE_NoteAttachment_for_User_MonetaryAccount_DraftPayment = {}));
var List_all_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction;
(function (List_all_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction) {
    List_all_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "ideal-merchant-transactionID": props["ideal-merchant-transactionID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "ideal-merchant-transaction", serialization.serialize(it.path["ideal-merchant-transactionID"]), "note-attachment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "ideal-merchant-transactionID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction.api = {
        name: "list_all_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/ideal-merchant-transaction/:ideal-merchant-transactionID/note-attachment",
        server: List_all_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction.server,
        client: List_all_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction.client
    };
})(List_all_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction || (exports.List_all_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction = List_all_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction = {}));
var CREATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction;
(function (CREATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction) {
    CREATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "ideal-merchant-transactionID": props["ideal-merchant-transactionID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "ideal-merchant-transaction", serialization.serialize(it.path["ideal-merchant-transactionID"]), "note-attachment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "ideal-merchant-transactionID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction.api = {
        name: "cREATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/ideal-merchant-transaction/:ideal-merchant-transactionID/note-attachment",
        server: CREATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction.server,
        client: CREATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction.client
    };
})(CREATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction || (exports.CREATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction = CREATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction = {}));
var READ_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction;
(function (READ_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction) {
    READ_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "ideal-merchant-transactionID": props["ideal-merchant-transactionID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "ideal-merchant-transaction", serialization.serialize(it.path["ideal-merchant-transactionID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "ideal-merchant-transactionID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction.api = {
        name: "rEAD_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/ideal-merchant-transaction/:ideal-merchant-transactionID/note-attachment/:itemId",
        server: READ_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction.server,
        client: READ_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction.client
    };
})(READ_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction || (exports.READ_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction = READ_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction = {}));
var UPDATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction;
(function (UPDATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction) {
    UPDATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "ideal-merchant-transactionID": props["ideal-merchant-transactionID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "ideal-merchant-transaction", serialization.serialize(it.path["ideal-merchant-transactionID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "ideal-merchant-transactionID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction.api = {
        name: "uPDATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/ideal-merchant-transaction/:ideal-merchant-transactionID/note-attachment/:itemId",
        server: UPDATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction.server,
        client: UPDATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction.client
    };
})(UPDATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction || (exports.UPDATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction = UPDATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction = {}));
var DELETE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction;
(function (DELETE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction) {
    DELETE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "ideal-merchant-transactionID": props["ideal-merchant-transactionID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "ideal-merchant-transaction", serialization.serialize(it.path["ideal-merchant-transactionID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "ideal-merchant-transactionID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction.api = {
        name: "dELETE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction",
        method: "DELETE",
        path: "user/:userID/monetary-account/:monetary-accountID/ideal-merchant-transaction/:ideal-merchant-transactionID/note-attachment/:itemId",
        server: DELETE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction.server,
        client: DELETE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction.client
    };
})(DELETE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction || (exports.DELETE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction = DELETE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction = {}));
var List_all_NoteAttachment_for_User_MonetaryAccount_MastercardAction;
(function (List_all_NoteAttachment_for_User_MonetaryAccount_MastercardAction) {
    List_all_NoteAttachment_for_User_MonetaryAccount_MastercardAction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "mastercard-actionID": props["mastercard-actionID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_MastercardAction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_MastercardAction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_MastercardAction.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "mastercard-action", serialization.serialize(it.path["mastercard-actionID"]), "note-attachment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_MastercardAction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "mastercard-actionID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_MastercardAction.api = {
        name: "list_all_NoteAttachment_for_User_MonetaryAccount_MastercardAction",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/mastercard-action/:mastercard-actionID/note-attachment",
        server: List_all_NoteAttachment_for_User_MonetaryAccount_MastercardAction.server,
        client: List_all_NoteAttachment_for_User_MonetaryAccount_MastercardAction.client
    };
})(List_all_NoteAttachment_for_User_MonetaryAccount_MastercardAction || (exports.List_all_NoteAttachment_for_User_MonetaryAccount_MastercardAction = List_all_NoteAttachment_for_User_MonetaryAccount_MastercardAction = {}));
var CREATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction;
(function (CREATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction) {
    CREATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "mastercard-actionID": props["mastercard-actionID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "mastercard-action", serialization.serialize(it.path["mastercard-actionID"]), "note-attachment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "mastercard-actionID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction.api = {
        name: "cREATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/mastercard-action/:mastercard-actionID/note-attachment",
        server: CREATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction.server,
        client: CREATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction.client
    };
})(CREATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction || (exports.CREATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction = CREATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction = {}));
var READ_NoteAttachment_for_User_MonetaryAccount_MastercardAction;
(function (READ_NoteAttachment_for_User_MonetaryAccount_MastercardAction) {
    READ_NoteAttachment_for_User_MonetaryAccount_MastercardAction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "mastercard-actionID": props["mastercard-actionID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_MastercardAction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_MastercardAction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_MastercardAction.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "mastercard-action", serialization.serialize(it.path["mastercard-actionID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_NoteAttachment_for_User_MonetaryAccount_MastercardAction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "mastercard-actionID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_NoteAttachment_for_User_MonetaryAccount_MastercardAction.api = {
        name: "rEAD_NoteAttachment_for_User_MonetaryAccount_MastercardAction",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/mastercard-action/:mastercard-actionID/note-attachment/:itemId",
        server: READ_NoteAttachment_for_User_MonetaryAccount_MastercardAction.server,
        client: READ_NoteAttachment_for_User_MonetaryAccount_MastercardAction.client
    };
})(READ_NoteAttachment_for_User_MonetaryAccount_MastercardAction || (exports.READ_NoteAttachment_for_User_MonetaryAccount_MastercardAction = READ_NoteAttachment_for_User_MonetaryAccount_MastercardAction = {}));
var UPDATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction;
(function (UPDATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction) {
    UPDATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "mastercard-actionID": props["mastercard-actionID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "mastercard-action", serialization.serialize(it.path["mastercard-actionID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "mastercard-actionID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction.api = {
        name: "uPDATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/mastercard-action/:mastercard-actionID/note-attachment/:itemId",
        server: UPDATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction.server,
        client: UPDATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction.client
    };
})(UPDATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction || (exports.UPDATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction = UPDATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction = {}));
var DELETE_NoteAttachment_for_User_MonetaryAccount_MastercardAction;
(function (DELETE_NoteAttachment_for_User_MonetaryAccount_MastercardAction) {
    DELETE_NoteAttachment_for_User_MonetaryAccount_MastercardAction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "mastercard-actionID": props["mastercard-actionID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_MastercardAction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_MastercardAction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_MastercardAction.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "mastercard-action", serialization.serialize(it.path["mastercard-actionID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_MastercardAction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "mastercard-actionID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_MastercardAction.api = {
        name: "dELETE_NoteAttachment_for_User_MonetaryAccount_MastercardAction",
        method: "DELETE",
        path: "user/:userID/monetary-account/:monetary-accountID/mastercard-action/:mastercard-actionID/note-attachment/:itemId",
        server: DELETE_NoteAttachment_for_User_MonetaryAccount_MastercardAction.server,
        client: DELETE_NoteAttachment_for_User_MonetaryAccount_MastercardAction.client
    };
})(DELETE_NoteAttachment_for_User_MonetaryAccount_MastercardAction || (exports.DELETE_NoteAttachment_for_User_MonetaryAccount_MastercardAction = DELETE_NoteAttachment_for_User_MonetaryAccount_MastercardAction = {}));
var List_all_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction;
(function (List_all_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction) {
    List_all_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "open-banking-merchant-transactionID": props["open-banking-merchant-transactionID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "open-banking-merchant-transaction", serialization.serialize(it.path["open-banking-merchant-transactionID"]), "note-attachment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "open-banking-merchant-transactionID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction.api = {
        name: "list_all_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/open-banking-merchant-transaction/:open-banking-merchant-transactionID/note-attachment",
        server: List_all_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction.server,
        client: List_all_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction.client
    };
})(List_all_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction || (exports.List_all_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction = List_all_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction = {}));
var CREATE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction;
(function (CREATE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction) {
    CREATE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "open-banking-merchant-transactionID": props["open-banking-merchant-transactionID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "open-banking-merchant-transaction", serialization.serialize(it.path["open-banking-merchant-transactionID"]), "note-attachment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "open-banking-merchant-transactionID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction.api = {
        name: "cREATE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/open-banking-merchant-transaction/:open-banking-merchant-transactionID/note-attachment",
        server: CREATE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction.server,
        client: CREATE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction.client
    };
})(CREATE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction || (exports.CREATE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction = CREATE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction = {}));
var READ_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction;
(function (READ_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction) {
    READ_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "open-banking-merchant-transactionID": props["open-banking-merchant-transactionID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "open-banking-merchant-transaction", serialization.serialize(it.path["open-banking-merchant-transactionID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "open-banking-merchant-transactionID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction.api = {
        name: "rEAD_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/open-banking-merchant-transaction/:open-banking-merchant-transactionID/note-attachment/:itemId",
        server: READ_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction.server,
        client: READ_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction.client
    };
})(READ_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction || (exports.READ_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction = READ_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction = {}));
var UPDATE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction;
(function (UPDATE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction) {
    UPDATE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "open-banking-merchant-transactionID": props["open-banking-merchant-transactionID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "open-banking-merchant-transaction", serialization.serialize(it.path["open-banking-merchant-transactionID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "open-banking-merchant-transactionID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction.api = {
        name: "uPDATE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/open-banking-merchant-transaction/:open-banking-merchant-transactionID/note-attachment/:itemId",
        server: UPDATE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction.server,
        client: UPDATE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction.client
    };
})(UPDATE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction || (exports.UPDATE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction = UPDATE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction = {}));
var DELETE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction;
(function (DELETE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction) {
    DELETE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "open-banking-merchant-transactionID": props["open-banking-merchant-transactionID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "open-banking-merchant-transaction", serialization.serialize(it.path["open-banking-merchant-transactionID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "open-banking-merchant-transactionID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction.api = {
        name: "dELETE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction",
        method: "DELETE",
        path: "user/:userID/monetary-account/:monetary-accountID/open-banking-merchant-transaction/:open-banking-merchant-transactionID/note-attachment/:itemId",
        server: DELETE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction.server,
        client: DELETE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction.client
    };
})(DELETE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction || (exports.DELETE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction = DELETE_NoteAttachment_for_User_MonetaryAccount_OpenBankingMerchantTransaction = {}));
var List_all_NoteAttachment_for_User_MonetaryAccount_PaymentBatch;
(function (List_all_NoteAttachment_for_User_MonetaryAccount_PaymentBatch) {
    List_all_NoteAttachment_for_User_MonetaryAccount_PaymentBatch.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "payment-batchID": props["payment-batchID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_PaymentBatch.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_PaymentBatch.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_PaymentBatch.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-batch", serialization.serialize(it.path["payment-batchID"]), "note-attachment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_PaymentBatch.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "payment-batchID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_PaymentBatch.api = {
        name: "list_all_NoteAttachment_for_User_MonetaryAccount_PaymentBatch",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/payment-batch/:payment-batchID/note-attachment",
        server: List_all_NoteAttachment_for_User_MonetaryAccount_PaymentBatch.server,
        client: List_all_NoteAttachment_for_User_MonetaryAccount_PaymentBatch.client
    };
})(List_all_NoteAttachment_for_User_MonetaryAccount_PaymentBatch || (exports.List_all_NoteAttachment_for_User_MonetaryAccount_PaymentBatch = List_all_NoteAttachment_for_User_MonetaryAccount_PaymentBatch = {}));
var CREATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch;
(function (CREATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch) {
    CREATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "payment-batchID": props["payment-batchID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-batch", serialization.serialize(it.path["payment-batchID"]), "note-attachment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "payment-batchID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch.api = {
        name: "cREATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/payment-batch/:payment-batchID/note-attachment",
        server: CREATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch.server,
        client: CREATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch.client
    };
})(CREATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch || (exports.CREATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch = CREATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch = {}));
var READ_NoteAttachment_for_User_MonetaryAccount_PaymentBatch;
(function (READ_NoteAttachment_for_User_MonetaryAccount_PaymentBatch) {
    READ_NoteAttachment_for_User_MonetaryAccount_PaymentBatch.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "payment-batchID": props["payment-batchID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_PaymentBatch.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_PaymentBatch.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_PaymentBatch.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-batch", serialization.serialize(it.path["payment-batchID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_NoteAttachment_for_User_MonetaryAccount_PaymentBatch.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "payment-batchID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_NoteAttachment_for_User_MonetaryAccount_PaymentBatch.api = {
        name: "rEAD_NoteAttachment_for_User_MonetaryAccount_PaymentBatch",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/payment-batch/:payment-batchID/note-attachment/:itemId",
        server: READ_NoteAttachment_for_User_MonetaryAccount_PaymentBatch.server,
        client: READ_NoteAttachment_for_User_MonetaryAccount_PaymentBatch.client
    };
})(READ_NoteAttachment_for_User_MonetaryAccount_PaymentBatch || (exports.READ_NoteAttachment_for_User_MonetaryAccount_PaymentBatch = READ_NoteAttachment_for_User_MonetaryAccount_PaymentBatch = {}));
var UPDATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch;
(function (UPDATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch) {
    UPDATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "payment-batchID": props["payment-batchID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-batch", serialization.serialize(it.path["payment-batchID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "payment-batchID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch.api = {
        name: "uPDATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/payment-batch/:payment-batchID/note-attachment/:itemId",
        server: UPDATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch.server,
        client: UPDATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch.client
    };
})(UPDATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch || (exports.UPDATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch = UPDATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch = {}));
var DELETE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch;
(function (DELETE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch) {
    DELETE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "payment-batchID": props["payment-batchID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-batch", serialization.serialize(it.path["payment-batchID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "payment-batchID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch.api = {
        name: "dELETE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch",
        method: "DELETE",
        path: "user/:userID/monetary-account/:monetary-accountID/payment-batch/:payment-batchID/note-attachment/:itemId",
        server: DELETE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch.server,
        client: DELETE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch.client
    };
})(DELETE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch || (exports.DELETE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch = DELETE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch = {}));
var List_all_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed;
(function (List_all_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed) {
    List_all_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "payment-delayedID": props["payment-delayedID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-delayed", serialization.serialize(it.path["payment-delayedID"]), "note-attachment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "payment-delayedID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed.api = {
        name: "list_all_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/payment-delayed/:payment-delayedID/note-attachment",
        server: List_all_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed.server,
        client: List_all_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed.client
    };
})(List_all_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed || (exports.List_all_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed = List_all_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed = {}));
var CREATE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed;
(function (CREATE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed) {
    CREATE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "payment-delayedID": props["payment-delayedID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-delayed", serialization.serialize(it.path["payment-delayedID"]), "note-attachment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "payment-delayedID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed.api = {
        name: "cREATE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/payment-delayed/:payment-delayedID/note-attachment",
        server: CREATE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed.server,
        client: CREATE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed.client
    };
})(CREATE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed || (exports.CREATE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed = CREATE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed = {}));
var READ_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed;
(function (READ_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed) {
    READ_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "payment-delayedID": props["payment-delayedID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-delayed", serialization.serialize(it.path["payment-delayedID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "payment-delayedID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed.api = {
        name: "rEAD_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/payment-delayed/:payment-delayedID/note-attachment/:itemId",
        server: READ_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed.server,
        client: READ_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed.client
    };
})(READ_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed || (exports.READ_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed = READ_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed = {}));
var UPDATE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed;
(function (UPDATE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed) {
    UPDATE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "payment-delayedID": props["payment-delayedID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-delayed", serialization.serialize(it.path["payment-delayedID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "payment-delayedID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed.api = {
        name: "uPDATE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/payment-delayed/:payment-delayedID/note-attachment/:itemId",
        server: UPDATE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed.server,
        client: UPDATE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed.client
    };
})(UPDATE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed || (exports.UPDATE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed = UPDATE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed = {}));
var DELETE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed;
(function (DELETE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed) {
    DELETE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "payment-delayedID": props["payment-delayedID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-delayed", serialization.serialize(it.path["payment-delayedID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "payment-delayedID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed.api = {
        name: "dELETE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed",
        method: "DELETE",
        path: "user/:userID/monetary-account/:monetary-accountID/payment-delayed/:payment-delayedID/note-attachment/:itemId",
        server: DELETE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed.server,
        client: DELETE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed.client
    };
})(DELETE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed || (exports.DELETE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed = DELETE_NoteAttachment_for_User_MonetaryAccount_PaymentDelayed = {}));
var List_all_NoteAttachment_for_User_MonetaryAccount_Payment;
(function (List_all_NoteAttachment_for_User_MonetaryAccount_Payment) {
    List_all_NoteAttachment_for_User_MonetaryAccount_Payment.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "paymentID": props["paymentID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_Payment.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_Payment.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_Payment.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment", serialization.serialize(it.path["paymentID"]), "note-attachment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_Payment.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "paymentID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_Payment.api = {
        name: "list_all_NoteAttachment_for_User_MonetaryAccount_Payment",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/payment/:paymentID/note-attachment",
        server: List_all_NoteAttachment_for_User_MonetaryAccount_Payment.server,
        client: List_all_NoteAttachment_for_User_MonetaryAccount_Payment.client
    };
})(List_all_NoteAttachment_for_User_MonetaryAccount_Payment || (exports.List_all_NoteAttachment_for_User_MonetaryAccount_Payment = List_all_NoteAttachment_for_User_MonetaryAccount_Payment = {}));
var CREATE_NoteAttachment_for_User_MonetaryAccount_Payment;
(function (CREATE_NoteAttachment_for_User_MonetaryAccount_Payment) {
    CREATE_NoteAttachment_for_User_MonetaryAccount_Payment.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "paymentID": props["paymentID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_Payment.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_Payment.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_Payment.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment", serialization.serialize(it.path["paymentID"]), "note-attachment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_Payment.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "paymentID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_Payment.api = {
        name: "cREATE_NoteAttachment_for_User_MonetaryAccount_Payment",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/payment/:paymentID/note-attachment",
        server: CREATE_NoteAttachment_for_User_MonetaryAccount_Payment.server,
        client: CREATE_NoteAttachment_for_User_MonetaryAccount_Payment.client
    };
})(CREATE_NoteAttachment_for_User_MonetaryAccount_Payment || (exports.CREATE_NoteAttachment_for_User_MonetaryAccount_Payment = CREATE_NoteAttachment_for_User_MonetaryAccount_Payment = {}));
var READ_NoteAttachment_for_User_MonetaryAccount_Payment;
(function (READ_NoteAttachment_for_User_MonetaryAccount_Payment) {
    READ_NoteAttachment_for_User_MonetaryAccount_Payment.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "paymentID": props["paymentID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_Payment.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_Payment.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_Payment.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment", serialization.serialize(it.path["paymentID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_NoteAttachment_for_User_MonetaryAccount_Payment.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "paymentID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_NoteAttachment_for_User_MonetaryAccount_Payment.api = {
        name: "rEAD_NoteAttachment_for_User_MonetaryAccount_Payment",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/payment/:paymentID/note-attachment/:itemId",
        server: READ_NoteAttachment_for_User_MonetaryAccount_Payment.server,
        client: READ_NoteAttachment_for_User_MonetaryAccount_Payment.client
    };
})(READ_NoteAttachment_for_User_MonetaryAccount_Payment || (exports.READ_NoteAttachment_for_User_MonetaryAccount_Payment = READ_NoteAttachment_for_User_MonetaryAccount_Payment = {}));
var UPDATE_NoteAttachment_for_User_MonetaryAccount_Payment;
(function (UPDATE_NoteAttachment_for_User_MonetaryAccount_Payment) {
    UPDATE_NoteAttachment_for_User_MonetaryAccount_Payment.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "paymentID": props["paymentID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_Payment.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_Payment.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_Payment.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment", serialization.serialize(it.path["paymentID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_Payment.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "paymentID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_Payment.api = {
        name: "uPDATE_NoteAttachment_for_User_MonetaryAccount_Payment",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/payment/:paymentID/note-attachment/:itemId",
        server: UPDATE_NoteAttachment_for_User_MonetaryAccount_Payment.server,
        client: UPDATE_NoteAttachment_for_User_MonetaryAccount_Payment.client
    };
})(UPDATE_NoteAttachment_for_User_MonetaryAccount_Payment || (exports.UPDATE_NoteAttachment_for_User_MonetaryAccount_Payment = UPDATE_NoteAttachment_for_User_MonetaryAccount_Payment = {}));
var DELETE_NoteAttachment_for_User_MonetaryAccount_Payment;
(function (DELETE_NoteAttachment_for_User_MonetaryAccount_Payment) {
    DELETE_NoteAttachment_for_User_MonetaryAccount_Payment.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "paymentID": props["paymentID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_Payment.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_Payment.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_Payment.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment", serialization.serialize(it.path["paymentID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_Payment.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "paymentID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_Payment.api = {
        name: "dELETE_NoteAttachment_for_User_MonetaryAccount_Payment",
        method: "DELETE",
        path: "user/:userID/monetary-account/:monetary-accountID/payment/:paymentID/note-attachment/:itemId",
        server: DELETE_NoteAttachment_for_User_MonetaryAccount_Payment.server,
        client: DELETE_NoteAttachment_for_User_MonetaryAccount_Payment.client
    };
})(DELETE_NoteAttachment_for_User_MonetaryAccount_Payment || (exports.DELETE_NoteAttachment_for_User_MonetaryAccount_Payment = DELETE_NoteAttachment_for_User_MonetaryAccount_Payment = {}));
var List_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch;
(function (List_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch) {
    List_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-inquiry-batchID": props["request-inquiry-batchID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry-batch", serialization.serialize(it.path["request-inquiry-batchID"]), "note-attachment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "request-inquiry-batchID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch.api = {
        name: "list_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry-batch/:request-inquiry-batchID/note-attachment",
        server: List_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch.server,
        client: List_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch.client
    };
})(List_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch || (exports.List_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch = List_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch = {}));
var CREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch;
(function (CREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch) {
    CREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-inquiry-batchID": props["request-inquiry-batchID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry-batch", serialization.serialize(it.path["request-inquiry-batchID"]), "note-attachment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "request-inquiry-batchID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch.api = {
        name: "cREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry-batch/:request-inquiry-batchID/note-attachment",
        server: CREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch.server,
        client: CREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch.client
    };
})(CREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch || (exports.CREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch = CREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch = {}));
var READ_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch;
(function (READ_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch) {
    READ_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-inquiry-batchID": props["request-inquiry-batchID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry-batch", serialization.serialize(it.path["request-inquiry-batchID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "request-inquiry-batchID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch.api = {
        name: "rEAD_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry-batch/:request-inquiry-batchID/note-attachment/:itemId",
        server: READ_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch.server,
        client: READ_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch.client
    };
})(READ_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch || (exports.READ_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch = READ_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch = {}));
var UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch;
(function (UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch) {
    UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-inquiry-batchID": props["request-inquiry-batchID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry-batch", serialization.serialize(it.path["request-inquiry-batchID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "request-inquiry-batchID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch.api = {
        name: "uPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry-batch/:request-inquiry-batchID/note-attachment/:itemId",
        server: UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch.server,
        client: UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch.client
    };
})(UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch || (exports.UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch = UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch = {}));
var DELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch;
(function (DELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch) {
    DELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-inquiry-batchID": props["request-inquiry-batchID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry-batch", serialization.serialize(it.path["request-inquiry-batchID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "request-inquiry-batchID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch.api = {
        name: "dELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch",
        method: "DELETE",
        path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry-batch/:request-inquiry-batchID/note-attachment/:itemId",
        server: DELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch.server,
        client: DELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch.client
    };
})(DELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch || (exports.DELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch = DELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch = {}));
var List_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiry;
(function (List_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiry) {
    List_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiry.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-inquiryID": props["request-inquiryID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiry.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiry.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiry.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry", serialization.serialize(it.path["request-inquiryID"]), "note-attachment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiry.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "request-inquiryID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiry.api = {
        name: "list_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiry",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry/:request-inquiryID/note-attachment",
        server: List_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiry.server,
        client: List_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiry.client
    };
})(List_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiry || (exports.List_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiry = List_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiry = {}));
var CREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry;
(function (CREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry) {
    CREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-inquiryID": props["request-inquiryID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry", serialization.serialize(it.path["request-inquiryID"]), "note-attachment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "request-inquiryID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry.api = {
        name: "cREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry/:request-inquiryID/note-attachment",
        server: CREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry.server,
        client: CREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry.client
    };
})(CREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry || (exports.CREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry = CREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry = {}));
var READ_NoteAttachment_for_User_MonetaryAccount_RequestInquiry;
(function (READ_NoteAttachment_for_User_MonetaryAccount_RequestInquiry) {
    READ_NoteAttachment_for_User_MonetaryAccount_RequestInquiry.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-inquiryID": props["request-inquiryID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_RequestInquiry.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_RequestInquiry.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_RequestInquiry.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry", serialization.serialize(it.path["request-inquiryID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_NoteAttachment_for_User_MonetaryAccount_RequestInquiry.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "request-inquiryID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_NoteAttachment_for_User_MonetaryAccount_RequestInquiry.api = {
        name: "rEAD_NoteAttachment_for_User_MonetaryAccount_RequestInquiry",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry/:request-inquiryID/note-attachment/:itemId",
        server: READ_NoteAttachment_for_User_MonetaryAccount_RequestInquiry.server,
        client: READ_NoteAttachment_for_User_MonetaryAccount_RequestInquiry.client
    };
})(READ_NoteAttachment_for_User_MonetaryAccount_RequestInquiry || (exports.READ_NoteAttachment_for_User_MonetaryAccount_RequestInquiry = READ_NoteAttachment_for_User_MonetaryAccount_RequestInquiry = {}));
var UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry;
(function (UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry) {
    UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-inquiryID": props["request-inquiryID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry", serialization.serialize(it.path["request-inquiryID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "request-inquiryID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry.api = {
        name: "uPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry/:request-inquiryID/note-attachment/:itemId",
        server: UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry.server,
        client: UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry.client
    };
})(UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry || (exports.UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry = UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry = {}));
var DELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry;
(function (DELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry) {
    DELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-inquiryID": props["request-inquiryID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry", serialization.serialize(it.path["request-inquiryID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "request-inquiryID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry.api = {
        name: "dELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry",
        method: "DELETE",
        path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry/:request-inquiryID/note-attachment/:itemId",
        server: DELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry.server,
        client: DELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry.client
    };
})(DELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry || (exports.DELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry = DELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry = {}));
var List_all_NoteAttachment_for_User_MonetaryAccount_RequestResponse;
(function (List_all_NoteAttachment_for_User_MonetaryAccount_RequestResponse) {
    List_all_NoteAttachment_for_User_MonetaryAccount_RequestResponse.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-responseID": props["request-responseID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_RequestResponse.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_RequestResponse.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_RequestResponse.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-response", serialization.serialize(it.path["request-responseID"]), "note-attachment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_RequestResponse.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "request-responseID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_RequestResponse.api = {
        name: "list_all_NoteAttachment_for_User_MonetaryAccount_RequestResponse",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/request-response/:request-responseID/note-attachment",
        server: List_all_NoteAttachment_for_User_MonetaryAccount_RequestResponse.server,
        client: List_all_NoteAttachment_for_User_MonetaryAccount_RequestResponse.client
    };
})(List_all_NoteAttachment_for_User_MonetaryAccount_RequestResponse || (exports.List_all_NoteAttachment_for_User_MonetaryAccount_RequestResponse = List_all_NoteAttachment_for_User_MonetaryAccount_RequestResponse = {}));
var CREATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse;
(function (CREATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse) {
    CREATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-responseID": props["request-responseID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-response", serialization.serialize(it.path["request-responseID"]), "note-attachment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "request-responseID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse.api = {
        name: "cREATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/request-response/:request-responseID/note-attachment",
        server: CREATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse.server,
        client: CREATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse.client
    };
})(CREATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse || (exports.CREATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse = CREATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse = {}));
var READ_NoteAttachment_for_User_MonetaryAccount_RequestResponse;
(function (READ_NoteAttachment_for_User_MonetaryAccount_RequestResponse) {
    READ_NoteAttachment_for_User_MonetaryAccount_RequestResponse.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-responseID": props["request-responseID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_RequestResponse.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_RequestResponse.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_RequestResponse.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-response", serialization.serialize(it.path["request-responseID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_NoteAttachment_for_User_MonetaryAccount_RequestResponse.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "request-responseID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_NoteAttachment_for_User_MonetaryAccount_RequestResponse.api = {
        name: "rEAD_NoteAttachment_for_User_MonetaryAccount_RequestResponse",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/request-response/:request-responseID/note-attachment/:itemId",
        server: READ_NoteAttachment_for_User_MonetaryAccount_RequestResponse.server,
        client: READ_NoteAttachment_for_User_MonetaryAccount_RequestResponse.client
    };
})(READ_NoteAttachment_for_User_MonetaryAccount_RequestResponse || (exports.READ_NoteAttachment_for_User_MonetaryAccount_RequestResponse = READ_NoteAttachment_for_User_MonetaryAccount_RequestResponse = {}));
var UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse;
(function (UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse) {
    UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-responseID": props["request-responseID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-response", serialization.serialize(it.path["request-responseID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "request-responseID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse.api = {
        name: "uPDATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/request-response/:request-responseID/note-attachment/:itemId",
        server: UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse.server,
        client: UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse.client
    };
})(UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse || (exports.UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse = UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse = {}));
var DELETE_NoteAttachment_for_User_MonetaryAccount_RequestResponse;
(function (DELETE_NoteAttachment_for_User_MonetaryAccount_RequestResponse) {
    DELETE_NoteAttachment_for_User_MonetaryAccount_RequestResponse.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-responseID": props["request-responseID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_RequestResponse.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_RequestResponse.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_RequestResponse.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-response", serialization.serialize(it.path["request-responseID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_RequestResponse.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "request-responseID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_RequestResponse.api = {
        name: "dELETE_NoteAttachment_for_User_MonetaryAccount_RequestResponse",
        method: "DELETE",
        path: "user/:userID/monetary-account/:monetary-accountID/request-response/:request-responseID/note-attachment/:itemId",
        server: DELETE_NoteAttachment_for_User_MonetaryAccount_RequestResponse.server,
        client: DELETE_NoteAttachment_for_User_MonetaryAccount_RequestResponse.client
    };
})(DELETE_NoteAttachment_for_User_MonetaryAccount_RequestResponse || (exports.DELETE_NoteAttachment_for_User_MonetaryAccount_RequestResponse = DELETE_NoteAttachment_for_User_MonetaryAccount_RequestResponse = {}));
var List_all_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance;
(function (List_all_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance) {
    List_all_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "scheduleID": props["scheduleID"], "schedule-instanceID": props["schedule-instanceID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule", serialization.serialize(it.path["scheduleID"]), "schedule-instance", serialization.serialize(it.path["schedule-instanceID"]), "note-attachment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "scheduleID": serialization.deserialize(it.path[5]), "schedule-instanceID": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance.api = {
        name: "list_all_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule/:scheduleID/schedule-instance/:schedule-instanceID/note-attachment",
        server: List_all_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance.server,
        client: List_all_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance.client
    };
})(List_all_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance || (exports.List_all_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance = List_all_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance = {}));
var CREATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance;
(function (CREATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance) {
    CREATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "scheduleID": props["scheduleID"], "schedule-instanceID": props["schedule-instanceID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule", serialization.serialize(it.path["scheduleID"]), "schedule-instance", serialization.serialize(it.path["schedule-instanceID"]), "note-attachment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "scheduleID": serialization.deserialize(it.path[5]), "schedule-instanceID": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance.api = {
        name: "cREATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule/:scheduleID/schedule-instance/:schedule-instanceID/note-attachment",
        server: CREATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance.server,
        client: CREATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance.client
    };
})(CREATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance || (exports.CREATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance = CREATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance = {}));
var READ_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance;
(function (READ_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance) {
    READ_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "scheduleID": props["scheduleID"], "schedule-instanceID": props["schedule-instanceID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule", serialization.serialize(it.path["scheduleID"]), "schedule-instance", serialization.serialize(it.path["schedule-instanceID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "scheduleID": serialization.deserialize(it.path[5]), "schedule-instanceID": serialization.deserialize(it.path[7]), "itemId": serialization.deserialize(it.path[9])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance.api = {
        name: "rEAD_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule/:scheduleID/schedule-instance/:schedule-instanceID/note-attachment/:itemId",
        server: READ_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance.server,
        client: READ_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance.client
    };
})(READ_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance || (exports.READ_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance = READ_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance = {}));
var UPDATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance;
(function (UPDATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance) {
    UPDATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "scheduleID": props["scheduleID"], "schedule-instanceID": props["schedule-instanceID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule", serialization.serialize(it.path["scheduleID"]), "schedule-instance", serialization.serialize(it.path["schedule-instanceID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "scheduleID": serialization.deserialize(it.path[5]), "schedule-instanceID": serialization.deserialize(it.path[7]), "itemId": serialization.deserialize(it.path[9])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance.api = {
        name: "uPDATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule/:scheduleID/schedule-instance/:schedule-instanceID/note-attachment/:itemId",
        server: UPDATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance.server,
        client: UPDATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance.client
    };
})(UPDATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance || (exports.UPDATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance = UPDATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance = {}));
var DELETE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance;
(function (DELETE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance) {
    DELETE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "scheduleID": props["scheduleID"], "schedule-instanceID": props["schedule-instanceID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule", serialization.serialize(it.path["scheduleID"]), "schedule-instance", serialization.serialize(it.path["schedule-instanceID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "scheduleID": serialization.deserialize(it.path[5]), "schedule-instanceID": serialization.deserialize(it.path[7]), "itemId": serialization.deserialize(it.path[9])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance.api = {
        name: "dELETE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance",
        method: "DELETE",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule/:scheduleID/schedule-instance/:schedule-instanceID/note-attachment/:itemId",
        server: DELETE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance.server,
        client: DELETE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance.client
    };
})(DELETE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance || (exports.DELETE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance = DELETE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance = {}));
var List_all_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch;
(function (List_all_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch) {
    List_all_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-payment-batchID": props["schedule-payment-batchID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment-batch", serialization.serialize(it.path["schedule-payment-batchID"]), "note-attachment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "schedule-payment-batchID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch.api = {
        name: "list_all_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment-batch/:schedule-payment-batchID/note-attachment",
        server: List_all_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch.server,
        client: List_all_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch.client
    };
})(List_all_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch || (exports.List_all_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch = List_all_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch = {}));
var CREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch;
(function (CREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch) {
    CREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-payment-batchID": props["schedule-payment-batchID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment-batch", serialization.serialize(it.path["schedule-payment-batchID"]), "note-attachment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "schedule-payment-batchID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch.api = {
        name: "cREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment-batch/:schedule-payment-batchID/note-attachment",
        server: CREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch.server,
        client: CREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch.client
    };
})(CREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch || (exports.CREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch = CREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch = {}));
var READ_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch;
(function (READ_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch) {
    READ_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-payment-batchID": props["schedule-payment-batchID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment-batch", serialization.serialize(it.path["schedule-payment-batchID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "schedule-payment-batchID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch.api = {
        name: "rEAD_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment-batch/:schedule-payment-batchID/note-attachment/:itemId",
        server: READ_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch.server,
        client: READ_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch.client
    };
})(READ_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch || (exports.READ_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch = READ_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch = {}));
var UPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch;
(function (UPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch) {
    UPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-payment-batchID": props["schedule-payment-batchID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment-batch", serialization.serialize(it.path["schedule-payment-batchID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "schedule-payment-batchID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch.api = {
        name: "uPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment-batch/:schedule-payment-batchID/note-attachment/:itemId",
        server: UPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch.server,
        client: UPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch.client
    };
})(UPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch || (exports.UPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch = UPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch = {}));
var DELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch;
(function (DELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch) {
    DELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-payment-batchID": props["schedule-payment-batchID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment-batch", serialization.serialize(it.path["schedule-payment-batchID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "schedule-payment-batchID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch.api = {
        name: "dELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch",
        method: "DELETE",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment-batch/:schedule-payment-batchID/note-attachment/:itemId",
        server: DELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch.server,
        client: DELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch.client
    };
})(DELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch || (exports.DELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch = DELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch = {}));
var List_all_NoteAttachment_for_User_MonetaryAccount_SchedulePayment;
(function (List_all_NoteAttachment_for_User_MonetaryAccount_SchedulePayment) {
    List_all_NoteAttachment_for_User_MonetaryAccount_SchedulePayment.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-paymentID": props["schedule-paymentID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_SchedulePayment.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_SchedulePayment.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_SchedulePayment.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment", serialization.serialize(it.path["schedule-paymentID"]), "note-attachment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_SchedulePayment.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "schedule-paymentID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_SchedulePayment.api = {
        name: "list_all_NoteAttachment_for_User_MonetaryAccount_SchedulePayment",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment/:schedule-paymentID/note-attachment",
        server: List_all_NoteAttachment_for_User_MonetaryAccount_SchedulePayment.server,
        client: List_all_NoteAttachment_for_User_MonetaryAccount_SchedulePayment.client
    };
})(List_all_NoteAttachment_for_User_MonetaryAccount_SchedulePayment || (exports.List_all_NoteAttachment_for_User_MonetaryAccount_SchedulePayment = List_all_NoteAttachment_for_User_MonetaryAccount_SchedulePayment = {}));
var CREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment;
(function (CREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment) {
    CREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-paymentID": props["schedule-paymentID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment", serialization.serialize(it.path["schedule-paymentID"]), "note-attachment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "schedule-paymentID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment.api = {
        name: "cREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment/:schedule-paymentID/note-attachment",
        server: CREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment.server,
        client: CREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment.client
    };
})(CREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment || (exports.CREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment = CREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment = {}));
var READ_NoteAttachment_for_User_MonetaryAccount_SchedulePayment;
(function (READ_NoteAttachment_for_User_MonetaryAccount_SchedulePayment) {
    READ_NoteAttachment_for_User_MonetaryAccount_SchedulePayment.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-paymentID": props["schedule-paymentID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_SchedulePayment.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_SchedulePayment.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_SchedulePayment.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment", serialization.serialize(it.path["schedule-paymentID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_NoteAttachment_for_User_MonetaryAccount_SchedulePayment.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "schedule-paymentID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_NoteAttachment_for_User_MonetaryAccount_SchedulePayment.api = {
        name: "rEAD_NoteAttachment_for_User_MonetaryAccount_SchedulePayment",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment/:schedule-paymentID/note-attachment/:itemId",
        server: READ_NoteAttachment_for_User_MonetaryAccount_SchedulePayment.server,
        client: READ_NoteAttachment_for_User_MonetaryAccount_SchedulePayment.client
    };
})(READ_NoteAttachment_for_User_MonetaryAccount_SchedulePayment || (exports.READ_NoteAttachment_for_User_MonetaryAccount_SchedulePayment = READ_NoteAttachment_for_User_MonetaryAccount_SchedulePayment = {}));
var UPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment;
(function (UPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment) {
    UPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-paymentID": props["schedule-paymentID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment", serialization.serialize(it.path["schedule-paymentID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "schedule-paymentID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment.api = {
        name: "uPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment/:schedule-paymentID/note-attachment/:itemId",
        server: UPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment.server,
        client: UPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment.client
    };
})(UPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment || (exports.UPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment = UPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment = {}));
var DELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment;
(function (DELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment) {
    DELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-paymentID": props["schedule-paymentID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment", serialization.serialize(it.path["schedule-paymentID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "schedule-paymentID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment.api = {
        name: "dELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment",
        method: "DELETE",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment/:schedule-paymentID/note-attachment/:itemId",
        server: DELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment.server,
        client: DELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment.client
    };
})(DELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment || (exports.DELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment = DELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment = {}));
var List_all_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch;
(function (List_all_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch) {
    List_all_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-request-inquiry-batchID": props["schedule-request-inquiry-batchID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-request-inquiry-batch", serialization.serialize(it.path["schedule-request-inquiry-batchID"]), "note-attachment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "schedule-request-inquiry-batchID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.api = {
        name: "list_all_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-request-inquiry-batch/:schedule-request-inquiry-batchID/note-attachment",
        server: List_all_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.server,
        client: List_all_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.client
    };
})(List_all_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch || (exports.List_all_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch = List_all_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch = {}));
var CREATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch;
(function (CREATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch) {
    CREATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-request-inquiry-batchID": props["schedule-request-inquiry-batchID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-request-inquiry-batch", serialization.serialize(it.path["schedule-request-inquiry-batchID"]), "note-attachment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "schedule-request-inquiry-batchID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.api = {
        name: "cREATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-request-inquiry-batch/:schedule-request-inquiry-batchID/note-attachment",
        server: CREATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.server,
        client: CREATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.client
    };
})(CREATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch || (exports.CREATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch = CREATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch = {}));
var READ_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch;
(function (READ_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch) {
    READ_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-request-inquiry-batchID": props["schedule-request-inquiry-batchID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-request-inquiry-batch", serialization.serialize(it.path["schedule-request-inquiry-batchID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "schedule-request-inquiry-batchID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.api = {
        name: "rEAD_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-request-inquiry-batch/:schedule-request-inquiry-batchID/note-attachment/:itemId",
        server: READ_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.server,
        client: READ_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.client
    };
})(READ_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch || (exports.READ_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch = READ_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch = {}));
var UPDATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch;
(function (UPDATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch) {
    UPDATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-request-inquiry-batchID": props["schedule-request-inquiry-batchID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-request-inquiry-batch", serialization.serialize(it.path["schedule-request-inquiry-batchID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "schedule-request-inquiry-batchID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.api = {
        name: "uPDATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-request-inquiry-batch/:schedule-request-inquiry-batchID/note-attachment/:itemId",
        server: UPDATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.server,
        client: UPDATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.client
    };
})(UPDATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch || (exports.UPDATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch = UPDATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch = {}));
var DELETE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch;
(function (DELETE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch) {
    DELETE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-request-inquiry-batchID": props["schedule-request-inquiry-batchID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-request-inquiry-batch", serialization.serialize(it.path["schedule-request-inquiry-batchID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "schedule-request-inquiry-batchID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.api = {
        name: "dELETE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch",
        method: "DELETE",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-request-inquiry-batch/:schedule-request-inquiry-batchID/note-attachment/:itemId",
        server: DELETE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.server,
        client: DELETE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.client
    };
})(DELETE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch || (exports.DELETE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch = DELETE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiryBatch = {}));
var List_all_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry;
(function (List_all_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry) {
    List_all_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-request-inquiryID": props["schedule-request-inquiryID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-request-inquiry", serialization.serialize(it.path["schedule-request-inquiryID"]), "note-attachment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "schedule-request-inquiryID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry.api = {
        name: "list_all_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-request-inquiry/:schedule-request-inquiryID/note-attachment",
        server: List_all_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry.server,
        client: List_all_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry.client
    };
})(List_all_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry || (exports.List_all_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry = List_all_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry = {}));
var CREATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry;
(function (CREATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry) {
    CREATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-request-inquiryID": props["schedule-request-inquiryID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-request-inquiry", serialization.serialize(it.path["schedule-request-inquiryID"]), "note-attachment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "schedule-request-inquiryID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry.api = {
        name: "cREATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-request-inquiry/:schedule-request-inquiryID/note-attachment",
        server: CREATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry.server,
        client: CREATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry.client
    };
})(CREATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry || (exports.CREATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry = CREATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry = {}));
var READ_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry;
(function (READ_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry) {
    READ_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-request-inquiryID": props["schedule-request-inquiryID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-request-inquiry", serialization.serialize(it.path["schedule-request-inquiryID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "schedule-request-inquiryID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry.api = {
        name: "rEAD_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-request-inquiry/:schedule-request-inquiryID/note-attachment/:itemId",
        server: READ_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry.server,
        client: READ_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry.client
    };
})(READ_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry || (exports.READ_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry = READ_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry = {}));
var UPDATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry;
(function (UPDATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry) {
    UPDATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-request-inquiryID": props["schedule-request-inquiryID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-request-inquiry", serialization.serialize(it.path["schedule-request-inquiryID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "schedule-request-inquiryID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry.api = {
        name: "uPDATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-request-inquiry/:schedule-request-inquiryID/note-attachment/:itemId",
        server: UPDATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry.server,
        client: UPDATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry.client
    };
})(UPDATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry || (exports.UPDATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry = UPDATE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry = {}));
var DELETE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry;
(function (DELETE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry) {
    DELETE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-request-inquiryID": props["schedule-request-inquiryID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-request-inquiry", serialization.serialize(it.path["schedule-request-inquiryID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "schedule-request-inquiryID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry.api = {
        name: "dELETE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry",
        method: "DELETE",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-request-inquiry/:schedule-request-inquiryID/note-attachment/:itemId",
        server: DELETE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry.server,
        client: DELETE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry.client
    };
})(DELETE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry || (exports.DELETE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry = DELETE_NoteAttachment_for_User_MonetaryAccount_ScheduleRequestInquiry = {}));
var List_all_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction;
(function (List_all_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction) {
    List_all_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "sofort-merchant-transactionID": props["sofort-merchant-transactionID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "sofort-merchant-transaction", serialization.serialize(it.path["sofort-merchant-transactionID"]), "note-attachment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "sofort-merchant-transactionID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction.api = {
        name: "list_all_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/sofort-merchant-transaction/:sofort-merchant-transactionID/note-attachment",
        server: List_all_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction.server,
        client: List_all_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction.client
    };
})(List_all_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction || (exports.List_all_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction = List_all_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction = {}));
var CREATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction;
(function (CREATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction) {
    CREATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "sofort-merchant-transactionID": props["sofort-merchant-transactionID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "sofort-merchant-transaction", serialization.serialize(it.path["sofort-merchant-transactionID"]), "note-attachment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "sofort-merchant-transactionID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction.api = {
        name: "cREATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/sofort-merchant-transaction/:sofort-merchant-transactionID/note-attachment",
        server: CREATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction.server,
        client: CREATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction.client
    };
})(CREATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction || (exports.CREATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction = CREATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction = {}));
var READ_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction;
(function (READ_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction) {
    READ_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "sofort-merchant-transactionID": props["sofort-merchant-transactionID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "sofort-merchant-transaction", serialization.serialize(it.path["sofort-merchant-transactionID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "sofort-merchant-transactionID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction.api = {
        name: "rEAD_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/sofort-merchant-transaction/:sofort-merchant-transactionID/note-attachment/:itemId",
        server: READ_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction.server,
        client: READ_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction.client
    };
})(READ_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction || (exports.READ_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction = READ_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction = {}));
var UPDATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction;
(function (UPDATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction) {
    UPDATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "sofort-merchant-transactionID": props["sofort-merchant-transactionID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "sofort-merchant-transaction", serialization.serialize(it.path["sofort-merchant-transactionID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "sofort-merchant-transactionID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction.api = {
        name: "uPDATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/sofort-merchant-transaction/:sofort-merchant-transactionID/note-attachment/:itemId",
        server: UPDATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction.server,
        client: UPDATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction.client
    };
})(UPDATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction || (exports.UPDATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction = UPDATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction = {}));
var DELETE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction;
(function (DELETE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction) {
    DELETE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "sofort-merchant-transactionID": props["sofort-merchant-transactionID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "sofort-merchant-transaction", serialization.serialize(it.path["sofort-merchant-transactionID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "sofort-merchant-transactionID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction.api = {
        name: "dELETE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction",
        method: "DELETE",
        path: "user/:userID/monetary-account/:monetary-accountID/sofort-merchant-transaction/:sofort-merchant-transactionID/note-attachment/:itemId",
        server: DELETE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction.server,
        client: DELETE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction.client
    };
})(DELETE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction || (exports.DELETE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction = DELETE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction = {}));
var List_all_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult;
(function (List_all_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult) {
    List_all_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "whitelistID": props["whitelistID"], "whitelist-resultID": props["whitelist-resultID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "whitelist", serialization.serialize(it.path["whitelistID"]), "whitelist-result", serialization.serialize(it.path["whitelist-resultID"]), "note-attachment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "whitelistID": serialization.deserialize(it.path[5]), "whitelist-resultID": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult.api = {
        name: "list_all_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/whitelist/:whitelistID/whitelist-result/:whitelist-resultID/note-attachment",
        server: List_all_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult.server,
        client: List_all_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult.client
    };
})(List_all_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult || (exports.List_all_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult = List_all_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult = {}));
var CREATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult;
(function (CREATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult) {
    CREATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "whitelistID": props["whitelistID"], "whitelist-resultID": props["whitelist-resultID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "whitelist", serialization.serialize(it.path["whitelistID"]), "whitelist-result", serialization.serialize(it.path["whitelist-resultID"]), "note-attachment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "whitelistID": serialization.deserialize(it.path[5]), "whitelist-resultID": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult.api = {
        name: "cREATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/whitelist/:whitelistID/whitelist-result/:whitelist-resultID/note-attachment",
        server: CREATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult.server,
        client: CREATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult.client
    };
})(CREATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult || (exports.CREATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult = CREATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult = {}));
var READ_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult;
(function (READ_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult) {
    READ_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "whitelistID": props["whitelistID"], "whitelist-resultID": props["whitelist-resultID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "whitelist", serialization.serialize(it.path["whitelistID"]), "whitelist-result", serialization.serialize(it.path["whitelist-resultID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "whitelistID": serialization.deserialize(it.path[5]), "whitelist-resultID": serialization.deserialize(it.path[7]), "itemId": serialization.deserialize(it.path[9])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult.api = {
        name: "rEAD_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/whitelist/:whitelistID/whitelist-result/:whitelist-resultID/note-attachment/:itemId",
        server: READ_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult.server,
        client: READ_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult.client
    };
})(READ_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult || (exports.READ_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult = READ_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult = {}));
var UPDATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult;
(function (UPDATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult) {
    UPDATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "whitelistID": props["whitelistID"], "whitelist-resultID": props["whitelist-resultID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "whitelist", serialization.serialize(it.path["whitelistID"]), "whitelist-result", serialization.serialize(it.path["whitelist-resultID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "whitelistID": serialization.deserialize(it.path[5]), "whitelist-resultID": serialization.deserialize(it.path[7]), "itemId": serialization.deserialize(it.path[9])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult.api = {
        name: "uPDATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/whitelist/:whitelistID/whitelist-result/:whitelist-resultID/note-attachment/:itemId",
        server: UPDATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult.server,
        client: UPDATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult.client
    };
})(UPDATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult || (exports.UPDATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult = UPDATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult = {}));
var DELETE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult;
(function (DELETE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult) {
    DELETE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "whitelistID": props["whitelistID"], "whitelist-resultID": props["whitelist-resultID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "whitelist", serialization.serialize(it.path["whitelistID"]), "whitelist-result", serialization.serialize(it.path["whitelist-resultID"]), "note-attachment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "whitelistID": serialization.deserialize(it.path[5]), "whitelist-resultID": serialization.deserialize(it.path[7]), "itemId": serialization.deserialize(it.path[9])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult.api = {
        name: "dELETE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult",
        method: "DELETE",
        path: "user/:userID/monetary-account/:monetary-accountID/whitelist/:whitelistID/whitelist-result/:whitelist-resultID/note-attachment/:itemId",
        server: DELETE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult.server,
        client: DELETE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult.client
    };
})(DELETE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult || (exports.DELETE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult = DELETE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult = {}));
var List_all_NoteText_for_User_MonetaryAccount_AdyenCardTransaction;
(function (List_all_NoteText_for_User_MonetaryAccount_AdyenCardTransaction) {
    List_all_NoteText_for_User_MonetaryAccount_AdyenCardTransaction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "adyen-card-transactionID": props["adyen-card-transactionID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_NoteText_for_User_MonetaryAccount_AdyenCardTransaction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteText_for_User_MonetaryAccount_AdyenCardTransaction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteText_for_User_MonetaryAccount_AdyenCardTransaction.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "adyen-card-transaction", serialization.serialize(it.path["adyen-card-transactionID"]), "note-text"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_NoteText_for_User_MonetaryAccount_AdyenCardTransaction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "adyen-card-transactionID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_NoteText_for_User_MonetaryAccount_AdyenCardTransaction.api = {
        name: "list_all_NoteText_for_User_MonetaryAccount_AdyenCardTransaction",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/adyen-card-transaction/:adyen-card-transactionID/note-text",
        server: List_all_NoteText_for_User_MonetaryAccount_AdyenCardTransaction.server,
        client: List_all_NoteText_for_User_MonetaryAccount_AdyenCardTransaction.client
    };
})(List_all_NoteText_for_User_MonetaryAccount_AdyenCardTransaction || (exports.List_all_NoteText_for_User_MonetaryAccount_AdyenCardTransaction = List_all_NoteText_for_User_MonetaryAccount_AdyenCardTransaction = {}));
var CREATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction;
(function (CREATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction) {
    CREATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "adyen-card-transactionID": props["adyen-card-transactionID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "adyen-card-transaction", serialization.serialize(it.path["adyen-card-transactionID"]), "note-text"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "adyen-card-transactionID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction.api = {
        name: "cREATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/adyen-card-transaction/:adyen-card-transactionID/note-text",
        server: CREATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction.server,
        client: CREATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction.client
    };
})(CREATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction || (exports.CREATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction = CREATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction = {}));
var READ_NoteText_for_User_MonetaryAccount_AdyenCardTransaction;
(function (READ_NoteText_for_User_MonetaryAccount_AdyenCardTransaction) {
    READ_NoteText_for_User_MonetaryAccount_AdyenCardTransaction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "adyen-card-transactionID": props["adyen-card-transactionID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_NoteText_for_User_MonetaryAccount_AdyenCardTransaction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteText_for_User_MonetaryAccount_AdyenCardTransaction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteText_for_User_MonetaryAccount_AdyenCardTransaction.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "adyen-card-transaction", serialization.serialize(it.path["adyen-card-transactionID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_NoteText_for_User_MonetaryAccount_AdyenCardTransaction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "adyen-card-transactionID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_NoteText_for_User_MonetaryAccount_AdyenCardTransaction.api = {
        name: "rEAD_NoteText_for_User_MonetaryAccount_AdyenCardTransaction",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/adyen-card-transaction/:adyen-card-transactionID/note-text/:itemId",
        server: READ_NoteText_for_User_MonetaryAccount_AdyenCardTransaction.server,
        client: READ_NoteText_for_User_MonetaryAccount_AdyenCardTransaction.client
    };
})(READ_NoteText_for_User_MonetaryAccount_AdyenCardTransaction || (exports.READ_NoteText_for_User_MonetaryAccount_AdyenCardTransaction = READ_NoteText_for_User_MonetaryAccount_AdyenCardTransaction = {}));
var UPDATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction;
(function (UPDATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction) {
    UPDATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "adyen-card-transactionID": props["adyen-card-transactionID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "adyen-card-transaction", serialization.serialize(it.path["adyen-card-transactionID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "adyen-card-transactionID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction.api = {
        name: "uPDATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/adyen-card-transaction/:adyen-card-transactionID/note-text/:itemId",
        server: UPDATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction.server,
        client: UPDATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction.client
    };
})(UPDATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction || (exports.UPDATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction = UPDATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction = {}));
var DELETE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction;
(function (DELETE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction) {
    DELETE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "adyen-card-transactionID": props["adyen-card-transactionID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "adyen-card-transaction", serialization.serialize(it.path["adyen-card-transactionID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "adyen-card-transactionID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction.api = {
        name: "dELETE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction",
        method: "DELETE",
        path: "user/:userID/monetary-account/:monetary-accountID/adyen-card-transaction/:adyen-card-transactionID/note-text/:itemId",
        server: DELETE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction.server,
        client: DELETE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction.client
    };
})(DELETE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction || (exports.DELETE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction = DELETE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction = {}));
var List_all_NoteText_for_User_MonetaryAccount_SwitchServicePayment;
(function (List_all_NoteText_for_User_MonetaryAccount_SwitchServicePayment) {
    List_all_NoteText_for_User_MonetaryAccount_SwitchServicePayment.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "switch-service-paymentID": props["switch-service-paymentID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_NoteText_for_User_MonetaryAccount_SwitchServicePayment.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteText_for_User_MonetaryAccount_SwitchServicePayment.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteText_for_User_MonetaryAccount_SwitchServicePayment.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "switch-service-payment", serialization.serialize(it.path["switch-service-paymentID"]), "note-text"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_NoteText_for_User_MonetaryAccount_SwitchServicePayment.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "switch-service-paymentID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_NoteText_for_User_MonetaryAccount_SwitchServicePayment.api = {
        name: "list_all_NoteText_for_User_MonetaryAccount_SwitchServicePayment",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/switch-service-payment/:switch-service-paymentID/note-text",
        server: List_all_NoteText_for_User_MonetaryAccount_SwitchServicePayment.server,
        client: List_all_NoteText_for_User_MonetaryAccount_SwitchServicePayment.client
    };
})(List_all_NoteText_for_User_MonetaryAccount_SwitchServicePayment || (exports.List_all_NoteText_for_User_MonetaryAccount_SwitchServicePayment = List_all_NoteText_for_User_MonetaryAccount_SwitchServicePayment = {}));
var CREATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment;
(function (CREATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment) {
    CREATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "switch-service-paymentID": props["switch-service-paymentID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "switch-service-payment", serialization.serialize(it.path["switch-service-paymentID"]), "note-text"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "switch-service-paymentID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment.api = {
        name: "cREATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/switch-service-payment/:switch-service-paymentID/note-text",
        server: CREATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment.server,
        client: CREATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment.client
    };
})(CREATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment || (exports.CREATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment = CREATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment = {}));
var READ_NoteText_for_User_MonetaryAccount_SwitchServicePayment;
(function (READ_NoteText_for_User_MonetaryAccount_SwitchServicePayment) {
    READ_NoteText_for_User_MonetaryAccount_SwitchServicePayment.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "switch-service-paymentID": props["switch-service-paymentID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_NoteText_for_User_MonetaryAccount_SwitchServicePayment.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteText_for_User_MonetaryAccount_SwitchServicePayment.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteText_for_User_MonetaryAccount_SwitchServicePayment.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "switch-service-payment", serialization.serialize(it.path["switch-service-paymentID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_NoteText_for_User_MonetaryAccount_SwitchServicePayment.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "switch-service-paymentID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_NoteText_for_User_MonetaryAccount_SwitchServicePayment.api = {
        name: "rEAD_NoteText_for_User_MonetaryAccount_SwitchServicePayment",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/switch-service-payment/:switch-service-paymentID/note-text/:itemId",
        server: READ_NoteText_for_User_MonetaryAccount_SwitchServicePayment.server,
        client: READ_NoteText_for_User_MonetaryAccount_SwitchServicePayment.client
    };
})(READ_NoteText_for_User_MonetaryAccount_SwitchServicePayment || (exports.READ_NoteText_for_User_MonetaryAccount_SwitchServicePayment = READ_NoteText_for_User_MonetaryAccount_SwitchServicePayment = {}));
var UPDATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment;
(function (UPDATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment) {
    UPDATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "switch-service-paymentID": props["switch-service-paymentID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "switch-service-payment", serialization.serialize(it.path["switch-service-paymentID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "switch-service-paymentID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment.api = {
        name: "uPDATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/switch-service-payment/:switch-service-paymentID/note-text/:itemId",
        server: UPDATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment.server,
        client: UPDATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment.client
    };
})(UPDATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment || (exports.UPDATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment = UPDATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment = {}));
var DELETE_NoteText_for_User_MonetaryAccount_SwitchServicePayment;
(function (DELETE_NoteText_for_User_MonetaryAccount_SwitchServicePayment) {
    DELETE_NoteText_for_User_MonetaryAccount_SwitchServicePayment.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "switch-service-paymentID": props["switch-service-paymentID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_NoteText_for_User_MonetaryAccount_SwitchServicePayment.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteText_for_User_MonetaryAccount_SwitchServicePayment.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteText_for_User_MonetaryAccount_SwitchServicePayment.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "switch-service-payment", serialization.serialize(it.path["switch-service-paymentID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_NoteText_for_User_MonetaryAccount_SwitchServicePayment.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "switch-service-paymentID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_NoteText_for_User_MonetaryAccount_SwitchServicePayment.api = {
        name: "dELETE_NoteText_for_User_MonetaryAccount_SwitchServicePayment",
        method: "DELETE",
        path: "user/:userID/monetary-account/:monetary-accountID/switch-service-payment/:switch-service-paymentID/note-text/:itemId",
        server: DELETE_NoteText_for_User_MonetaryAccount_SwitchServicePayment.server,
        client: DELETE_NoteText_for_User_MonetaryAccount_SwitchServicePayment.client
    };
})(DELETE_NoteText_for_User_MonetaryAccount_SwitchServicePayment || (exports.DELETE_NoteText_for_User_MonetaryAccount_SwitchServicePayment = DELETE_NoteText_for_User_MonetaryAccount_SwitchServicePayment = {}));
var List_all_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult;
(function (List_all_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult) {
    List_all_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "bunqme-fundraiser-resultID": props["bunqme-fundraiser-resultID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "bunqme-fundraiser-result", serialization.serialize(it.path["bunqme-fundraiser-resultID"]), "note-text"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "bunqme-fundraiser-resultID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult.api = {
        name: "list_all_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/bunqme-fundraiser-result/:bunqme-fundraiser-resultID/note-text",
        server: List_all_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult.server,
        client: List_all_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult.client
    };
})(List_all_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult || (exports.List_all_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult = List_all_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult = {}));
var CREATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult;
(function (CREATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult) {
    CREATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "bunqme-fundraiser-resultID": props["bunqme-fundraiser-resultID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "bunqme-fundraiser-result", serialization.serialize(it.path["bunqme-fundraiser-resultID"]), "note-text"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "bunqme-fundraiser-resultID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult.api = {
        name: "cREATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/bunqme-fundraiser-result/:bunqme-fundraiser-resultID/note-text",
        server: CREATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult.server,
        client: CREATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult.client
    };
})(CREATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult || (exports.CREATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult = CREATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult = {}));
var READ_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult;
(function (READ_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult) {
    READ_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "bunqme-fundraiser-resultID": props["bunqme-fundraiser-resultID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "bunqme-fundraiser-result", serialization.serialize(it.path["bunqme-fundraiser-resultID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "bunqme-fundraiser-resultID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult.api = {
        name: "rEAD_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/bunqme-fundraiser-result/:bunqme-fundraiser-resultID/note-text/:itemId",
        server: READ_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult.server,
        client: READ_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult.client
    };
})(READ_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult || (exports.READ_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult = READ_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult = {}));
var UPDATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult;
(function (UPDATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult) {
    UPDATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "bunqme-fundraiser-resultID": props["bunqme-fundraiser-resultID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "bunqme-fundraiser-result", serialization.serialize(it.path["bunqme-fundraiser-resultID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "bunqme-fundraiser-resultID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult.api = {
        name: "uPDATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/bunqme-fundraiser-result/:bunqme-fundraiser-resultID/note-text/:itemId",
        server: UPDATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult.server,
        client: UPDATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult.client
    };
})(UPDATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult || (exports.UPDATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult = UPDATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult = {}));
var DELETE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult;
(function (DELETE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult) {
    DELETE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "bunqme-fundraiser-resultID": props["bunqme-fundraiser-resultID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "bunqme-fundraiser-result", serialization.serialize(it.path["bunqme-fundraiser-resultID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "bunqme-fundraiser-resultID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult.api = {
        name: "dELETE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult",
        method: "DELETE",
        path: "user/:userID/monetary-account/:monetary-accountID/bunqme-fundraiser-result/:bunqme-fundraiser-resultID/note-text/:itemId",
        server: DELETE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult.server,
        client: DELETE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult.client
    };
})(DELETE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult || (exports.DELETE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult = DELETE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult = {}));
var List_all_NoteText_for_User_MonetaryAccount_DraftPayment;
(function (List_all_NoteText_for_User_MonetaryAccount_DraftPayment) {
    List_all_NoteText_for_User_MonetaryAccount_DraftPayment.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "draft-paymentID": props["draft-paymentID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_NoteText_for_User_MonetaryAccount_DraftPayment.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteText_for_User_MonetaryAccount_DraftPayment.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteText_for_User_MonetaryAccount_DraftPayment.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "draft-payment", serialization.serialize(it.path["draft-paymentID"]), "note-text"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_NoteText_for_User_MonetaryAccount_DraftPayment.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "draft-paymentID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_NoteText_for_User_MonetaryAccount_DraftPayment.api = {
        name: "list_all_NoteText_for_User_MonetaryAccount_DraftPayment",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/draft-payment/:draft-paymentID/note-text",
        server: List_all_NoteText_for_User_MonetaryAccount_DraftPayment.server,
        client: List_all_NoteText_for_User_MonetaryAccount_DraftPayment.client
    };
})(List_all_NoteText_for_User_MonetaryAccount_DraftPayment || (exports.List_all_NoteText_for_User_MonetaryAccount_DraftPayment = List_all_NoteText_for_User_MonetaryAccount_DraftPayment = {}));
var CREATE_NoteText_for_User_MonetaryAccount_DraftPayment;
(function (CREATE_NoteText_for_User_MonetaryAccount_DraftPayment) {
    CREATE_NoteText_for_User_MonetaryAccount_DraftPayment.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "draft-paymentID": props["draft-paymentID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_DraftPayment.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_DraftPayment.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_DraftPayment.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "draft-payment", serialization.serialize(it.path["draft-paymentID"]), "note-text"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_NoteText_for_User_MonetaryAccount_DraftPayment.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "draft-paymentID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_NoteText_for_User_MonetaryAccount_DraftPayment.api = {
        name: "cREATE_NoteText_for_User_MonetaryAccount_DraftPayment",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/draft-payment/:draft-paymentID/note-text",
        server: CREATE_NoteText_for_User_MonetaryAccount_DraftPayment.server,
        client: CREATE_NoteText_for_User_MonetaryAccount_DraftPayment.client
    };
})(CREATE_NoteText_for_User_MonetaryAccount_DraftPayment || (exports.CREATE_NoteText_for_User_MonetaryAccount_DraftPayment = CREATE_NoteText_for_User_MonetaryAccount_DraftPayment = {}));
var READ_NoteText_for_User_MonetaryAccount_DraftPayment;
(function (READ_NoteText_for_User_MonetaryAccount_DraftPayment) {
    READ_NoteText_for_User_MonetaryAccount_DraftPayment.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "draft-paymentID": props["draft-paymentID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_NoteText_for_User_MonetaryAccount_DraftPayment.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteText_for_User_MonetaryAccount_DraftPayment.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteText_for_User_MonetaryAccount_DraftPayment.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "draft-payment", serialization.serialize(it.path["draft-paymentID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_NoteText_for_User_MonetaryAccount_DraftPayment.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "draft-paymentID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_NoteText_for_User_MonetaryAccount_DraftPayment.api = {
        name: "rEAD_NoteText_for_User_MonetaryAccount_DraftPayment",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/draft-payment/:draft-paymentID/note-text/:itemId",
        server: READ_NoteText_for_User_MonetaryAccount_DraftPayment.server,
        client: READ_NoteText_for_User_MonetaryAccount_DraftPayment.client
    };
})(READ_NoteText_for_User_MonetaryAccount_DraftPayment || (exports.READ_NoteText_for_User_MonetaryAccount_DraftPayment = READ_NoteText_for_User_MonetaryAccount_DraftPayment = {}));
var UPDATE_NoteText_for_User_MonetaryAccount_DraftPayment;
(function (UPDATE_NoteText_for_User_MonetaryAccount_DraftPayment) {
    UPDATE_NoteText_for_User_MonetaryAccount_DraftPayment.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "draft-paymentID": props["draft-paymentID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_DraftPayment.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_DraftPayment.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_DraftPayment.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "draft-payment", serialization.serialize(it.path["draft-paymentID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_NoteText_for_User_MonetaryAccount_DraftPayment.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "draft-paymentID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_NoteText_for_User_MonetaryAccount_DraftPayment.api = {
        name: "uPDATE_NoteText_for_User_MonetaryAccount_DraftPayment",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/draft-payment/:draft-paymentID/note-text/:itemId",
        server: UPDATE_NoteText_for_User_MonetaryAccount_DraftPayment.server,
        client: UPDATE_NoteText_for_User_MonetaryAccount_DraftPayment.client
    };
})(UPDATE_NoteText_for_User_MonetaryAccount_DraftPayment || (exports.UPDATE_NoteText_for_User_MonetaryAccount_DraftPayment = UPDATE_NoteText_for_User_MonetaryAccount_DraftPayment = {}));
var DELETE_NoteText_for_User_MonetaryAccount_DraftPayment;
(function (DELETE_NoteText_for_User_MonetaryAccount_DraftPayment) {
    DELETE_NoteText_for_User_MonetaryAccount_DraftPayment.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "draft-paymentID": props["draft-paymentID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_NoteText_for_User_MonetaryAccount_DraftPayment.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteText_for_User_MonetaryAccount_DraftPayment.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteText_for_User_MonetaryAccount_DraftPayment.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "draft-payment", serialization.serialize(it.path["draft-paymentID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_NoteText_for_User_MonetaryAccount_DraftPayment.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "draft-paymentID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_NoteText_for_User_MonetaryAccount_DraftPayment.api = {
        name: "dELETE_NoteText_for_User_MonetaryAccount_DraftPayment",
        method: "DELETE",
        path: "user/:userID/monetary-account/:monetary-accountID/draft-payment/:draft-paymentID/note-text/:itemId",
        server: DELETE_NoteText_for_User_MonetaryAccount_DraftPayment.server,
        client: DELETE_NoteText_for_User_MonetaryAccount_DraftPayment.client
    };
})(DELETE_NoteText_for_User_MonetaryAccount_DraftPayment || (exports.DELETE_NoteText_for_User_MonetaryAccount_DraftPayment = DELETE_NoteText_for_User_MonetaryAccount_DraftPayment = {}));
var List_all_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction;
(function (List_all_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction) {
    List_all_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "ideal-merchant-transactionID": props["ideal-merchant-transactionID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "ideal-merchant-transaction", serialization.serialize(it.path["ideal-merchant-transactionID"]), "note-text"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "ideal-merchant-transactionID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction.api = {
        name: "list_all_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/ideal-merchant-transaction/:ideal-merchant-transactionID/note-text",
        server: List_all_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction.server,
        client: List_all_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction.client
    };
})(List_all_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction || (exports.List_all_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction = List_all_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction = {}));
var CREATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction;
(function (CREATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction) {
    CREATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "ideal-merchant-transactionID": props["ideal-merchant-transactionID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "ideal-merchant-transaction", serialization.serialize(it.path["ideal-merchant-transactionID"]), "note-text"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "ideal-merchant-transactionID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction.api = {
        name: "cREATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/ideal-merchant-transaction/:ideal-merchant-transactionID/note-text",
        server: CREATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction.server,
        client: CREATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction.client
    };
})(CREATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction || (exports.CREATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction = CREATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction = {}));
var READ_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction;
(function (READ_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction) {
    READ_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "ideal-merchant-transactionID": props["ideal-merchant-transactionID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "ideal-merchant-transaction", serialization.serialize(it.path["ideal-merchant-transactionID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "ideal-merchant-transactionID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction.api = {
        name: "rEAD_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/ideal-merchant-transaction/:ideal-merchant-transactionID/note-text/:itemId",
        server: READ_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction.server,
        client: READ_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction.client
    };
})(READ_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction || (exports.READ_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction = READ_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction = {}));
var UPDATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction;
(function (UPDATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction) {
    UPDATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "ideal-merchant-transactionID": props["ideal-merchant-transactionID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "ideal-merchant-transaction", serialization.serialize(it.path["ideal-merchant-transactionID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "ideal-merchant-transactionID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction.api = {
        name: "uPDATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/ideal-merchant-transaction/:ideal-merchant-transactionID/note-text/:itemId",
        server: UPDATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction.server,
        client: UPDATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction.client
    };
})(UPDATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction || (exports.UPDATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction = UPDATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction = {}));
var DELETE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction;
(function (DELETE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction) {
    DELETE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "ideal-merchant-transactionID": props["ideal-merchant-transactionID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "ideal-merchant-transaction", serialization.serialize(it.path["ideal-merchant-transactionID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "ideal-merchant-transactionID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction.api = {
        name: "dELETE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction",
        method: "DELETE",
        path: "user/:userID/monetary-account/:monetary-accountID/ideal-merchant-transaction/:ideal-merchant-transactionID/note-text/:itemId",
        server: DELETE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction.server,
        client: DELETE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction.client
    };
})(DELETE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction || (exports.DELETE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction = DELETE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction = {}));
var List_all_NoteText_for_User_MonetaryAccount_MastercardAction;
(function (List_all_NoteText_for_User_MonetaryAccount_MastercardAction) {
    List_all_NoteText_for_User_MonetaryAccount_MastercardAction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "mastercard-actionID": props["mastercard-actionID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_NoteText_for_User_MonetaryAccount_MastercardAction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteText_for_User_MonetaryAccount_MastercardAction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteText_for_User_MonetaryAccount_MastercardAction.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "mastercard-action", serialization.serialize(it.path["mastercard-actionID"]), "note-text"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_NoteText_for_User_MonetaryAccount_MastercardAction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "mastercard-actionID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_NoteText_for_User_MonetaryAccount_MastercardAction.api = {
        name: "list_all_NoteText_for_User_MonetaryAccount_MastercardAction",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/mastercard-action/:mastercard-actionID/note-text",
        server: List_all_NoteText_for_User_MonetaryAccount_MastercardAction.server,
        client: List_all_NoteText_for_User_MonetaryAccount_MastercardAction.client
    };
})(List_all_NoteText_for_User_MonetaryAccount_MastercardAction || (exports.List_all_NoteText_for_User_MonetaryAccount_MastercardAction = List_all_NoteText_for_User_MonetaryAccount_MastercardAction = {}));
var CREATE_NoteText_for_User_MonetaryAccount_MastercardAction;
(function (CREATE_NoteText_for_User_MonetaryAccount_MastercardAction) {
    CREATE_NoteText_for_User_MonetaryAccount_MastercardAction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "mastercard-actionID": props["mastercard-actionID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_MastercardAction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_MastercardAction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_MastercardAction.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "mastercard-action", serialization.serialize(it.path["mastercard-actionID"]), "note-text"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_NoteText_for_User_MonetaryAccount_MastercardAction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "mastercard-actionID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_NoteText_for_User_MonetaryAccount_MastercardAction.api = {
        name: "cREATE_NoteText_for_User_MonetaryAccount_MastercardAction",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/mastercard-action/:mastercard-actionID/note-text",
        server: CREATE_NoteText_for_User_MonetaryAccount_MastercardAction.server,
        client: CREATE_NoteText_for_User_MonetaryAccount_MastercardAction.client
    };
})(CREATE_NoteText_for_User_MonetaryAccount_MastercardAction || (exports.CREATE_NoteText_for_User_MonetaryAccount_MastercardAction = CREATE_NoteText_for_User_MonetaryAccount_MastercardAction = {}));
var READ_NoteText_for_User_MonetaryAccount_MastercardAction;
(function (READ_NoteText_for_User_MonetaryAccount_MastercardAction) {
    READ_NoteText_for_User_MonetaryAccount_MastercardAction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "mastercard-actionID": props["mastercard-actionID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_NoteText_for_User_MonetaryAccount_MastercardAction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteText_for_User_MonetaryAccount_MastercardAction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteText_for_User_MonetaryAccount_MastercardAction.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "mastercard-action", serialization.serialize(it.path["mastercard-actionID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_NoteText_for_User_MonetaryAccount_MastercardAction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "mastercard-actionID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_NoteText_for_User_MonetaryAccount_MastercardAction.api = {
        name: "rEAD_NoteText_for_User_MonetaryAccount_MastercardAction",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/mastercard-action/:mastercard-actionID/note-text/:itemId",
        server: READ_NoteText_for_User_MonetaryAccount_MastercardAction.server,
        client: READ_NoteText_for_User_MonetaryAccount_MastercardAction.client
    };
})(READ_NoteText_for_User_MonetaryAccount_MastercardAction || (exports.READ_NoteText_for_User_MonetaryAccount_MastercardAction = READ_NoteText_for_User_MonetaryAccount_MastercardAction = {}));
var UPDATE_NoteText_for_User_MonetaryAccount_MastercardAction;
(function (UPDATE_NoteText_for_User_MonetaryAccount_MastercardAction) {
    UPDATE_NoteText_for_User_MonetaryAccount_MastercardAction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "mastercard-actionID": props["mastercard-actionID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_MastercardAction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_MastercardAction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_MastercardAction.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "mastercard-action", serialization.serialize(it.path["mastercard-actionID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_NoteText_for_User_MonetaryAccount_MastercardAction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "mastercard-actionID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_NoteText_for_User_MonetaryAccount_MastercardAction.api = {
        name: "uPDATE_NoteText_for_User_MonetaryAccount_MastercardAction",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/mastercard-action/:mastercard-actionID/note-text/:itemId",
        server: UPDATE_NoteText_for_User_MonetaryAccount_MastercardAction.server,
        client: UPDATE_NoteText_for_User_MonetaryAccount_MastercardAction.client
    };
})(UPDATE_NoteText_for_User_MonetaryAccount_MastercardAction || (exports.UPDATE_NoteText_for_User_MonetaryAccount_MastercardAction = UPDATE_NoteText_for_User_MonetaryAccount_MastercardAction = {}));
var DELETE_NoteText_for_User_MonetaryAccount_MastercardAction;
(function (DELETE_NoteText_for_User_MonetaryAccount_MastercardAction) {
    DELETE_NoteText_for_User_MonetaryAccount_MastercardAction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "mastercard-actionID": props["mastercard-actionID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_NoteText_for_User_MonetaryAccount_MastercardAction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteText_for_User_MonetaryAccount_MastercardAction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteText_for_User_MonetaryAccount_MastercardAction.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "mastercard-action", serialization.serialize(it.path["mastercard-actionID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_NoteText_for_User_MonetaryAccount_MastercardAction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "mastercard-actionID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_NoteText_for_User_MonetaryAccount_MastercardAction.api = {
        name: "dELETE_NoteText_for_User_MonetaryAccount_MastercardAction",
        method: "DELETE",
        path: "user/:userID/monetary-account/:monetary-accountID/mastercard-action/:mastercard-actionID/note-text/:itemId",
        server: DELETE_NoteText_for_User_MonetaryAccount_MastercardAction.server,
        client: DELETE_NoteText_for_User_MonetaryAccount_MastercardAction.client
    };
})(DELETE_NoteText_for_User_MonetaryAccount_MastercardAction || (exports.DELETE_NoteText_for_User_MonetaryAccount_MastercardAction = DELETE_NoteText_for_User_MonetaryAccount_MastercardAction = {}));
var List_all_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction;
(function (List_all_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction) {
    List_all_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "open-banking-merchant-transactionID": props["open-banking-merchant-transactionID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "open-banking-merchant-transaction", serialization.serialize(it.path["open-banking-merchant-transactionID"]), "note-text"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "open-banking-merchant-transactionID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction.api = {
        name: "list_all_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/open-banking-merchant-transaction/:open-banking-merchant-transactionID/note-text",
        server: List_all_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction.server,
        client: List_all_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction.client
    };
})(List_all_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction || (exports.List_all_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction = List_all_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction = {}));
var CREATE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction;
(function (CREATE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction) {
    CREATE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "open-banking-merchant-transactionID": props["open-banking-merchant-transactionID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "open-banking-merchant-transaction", serialization.serialize(it.path["open-banking-merchant-transactionID"]), "note-text"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "open-banking-merchant-transactionID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction.api = {
        name: "cREATE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/open-banking-merchant-transaction/:open-banking-merchant-transactionID/note-text",
        server: CREATE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction.server,
        client: CREATE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction.client
    };
})(CREATE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction || (exports.CREATE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction = CREATE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction = {}));
var READ_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction;
(function (READ_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction) {
    READ_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "open-banking-merchant-transactionID": props["open-banking-merchant-transactionID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "open-banking-merchant-transaction", serialization.serialize(it.path["open-banking-merchant-transactionID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "open-banking-merchant-transactionID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction.api = {
        name: "rEAD_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/open-banking-merchant-transaction/:open-banking-merchant-transactionID/note-text/:itemId",
        server: READ_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction.server,
        client: READ_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction.client
    };
})(READ_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction || (exports.READ_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction = READ_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction = {}));
var UPDATE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction;
(function (UPDATE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction) {
    UPDATE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "open-banking-merchant-transactionID": props["open-banking-merchant-transactionID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "open-banking-merchant-transaction", serialization.serialize(it.path["open-banking-merchant-transactionID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "open-banking-merchant-transactionID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction.api = {
        name: "uPDATE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/open-banking-merchant-transaction/:open-banking-merchant-transactionID/note-text/:itemId",
        server: UPDATE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction.server,
        client: UPDATE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction.client
    };
})(UPDATE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction || (exports.UPDATE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction = UPDATE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction = {}));
var DELETE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction;
(function (DELETE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction) {
    DELETE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "open-banking-merchant-transactionID": props["open-banking-merchant-transactionID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "open-banking-merchant-transaction", serialization.serialize(it.path["open-banking-merchant-transactionID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "open-banking-merchant-transactionID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction.api = {
        name: "dELETE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction",
        method: "DELETE",
        path: "user/:userID/monetary-account/:monetary-accountID/open-banking-merchant-transaction/:open-banking-merchant-transactionID/note-text/:itemId",
        server: DELETE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction.server,
        client: DELETE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction.client
    };
})(DELETE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction || (exports.DELETE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction = DELETE_NoteText_for_User_MonetaryAccount_OpenBankingMerchantTransaction = {}));
var List_all_NoteText_for_User_MonetaryAccount_PaymentBatch;
(function (List_all_NoteText_for_User_MonetaryAccount_PaymentBatch) {
    List_all_NoteText_for_User_MonetaryAccount_PaymentBatch.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "payment-batchID": props["payment-batchID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_NoteText_for_User_MonetaryAccount_PaymentBatch.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteText_for_User_MonetaryAccount_PaymentBatch.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteText_for_User_MonetaryAccount_PaymentBatch.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-batch", serialization.serialize(it.path["payment-batchID"]), "note-text"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_NoteText_for_User_MonetaryAccount_PaymentBatch.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "payment-batchID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_NoteText_for_User_MonetaryAccount_PaymentBatch.api = {
        name: "list_all_NoteText_for_User_MonetaryAccount_PaymentBatch",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/payment-batch/:payment-batchID/note-text",
        server: List_all_NoteText_for_User_MonetaryAccount_PaymentBatch.server,
        client: List_all_NoteText_for_User_MonetaryAccount_PaymentBatch.client
    };
})(List_all_NoteText_for_User_MonetaryAccount_PaymentBatch || (exports.List_all_NoteText_for_User_MonetaryAccount_PaymentBatch = List_all_NoteText_for_User_MonetaryAccount_PaymentBatch = {}));
var CREATE_NoteText_for_User_MonetaryAccount_PaymentBatch;
(function (CREATE_NoteText_for_User_MonetaryAccount_PaymentBatch) {
    CREATE_NoteText_for_User_MonetaryAccount_PaymentBatch.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "payment-batchID": props["payment-batchID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_PaymentBatch.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_PaymentBatch.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_PaymentBatch.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-batch", serialization.serialize(it.path["payment-batchID"]), "note-text"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_NoteText_for_User_MonetaryAccount_PaymentBatch.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "payment-batchID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_NoteText_for_User_MonetaryAccount_PaymentBatch.api = {
        name: "cREATE_NoteText_for_User_MonetaryAccount_PaymentBatch",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/payment-batch/:payment-batchID/note-text",
        server: CREATE_NoteText_for_User_MonetaryAccount_PaymentBatch.server,
        client: CREATE_NoteText_for_User_MonetaryAccount_PaymentBatch.client
    };
})(CREATE_NoteText_for_User_MonetaryAccount_PaymentBatch || (exports.CREATE_NoteText_for_User_MonetaryAccount_PaymentBatch = CREATE_NoteText_for_User_MonetaryAccount_PaymentBatch = {}));
var READ_NoteText_for_User_MonetaryAccount_PaymentBatch;
(function (READ_NoteText_for_User_MonetaryAccount_PaymentBatch) {
    READ_NoteText_for_User_MonetaryAccount_PaymentBatch.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "payment-batchID": props["payment-batchID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_NoteText_for_User_MonetaryAccount_PaymentBatch.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteText_for_User_MonetaryAccount_PaymentBatch.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteText_for_User_MonetaryAccount_PaymentBatch.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-batch", serialization.serialize(it.path["payment-batchID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_NoteText_for_User_MonetaryAccount_PaymentBatch.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "payment-batchID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_NoteText_for_User_MonetaryAccount_PaymentBatch.api = {
        name: "rEAD_NoteText_for_User_MonetaryAccount_PaymentBatch",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/payment-batch/:payment-batchID/note-text/:itemId",
        server: READ_NoteText_for_User_MonetaryAccount_PaymentBatch.server,
        client: READ_NoteText_for_User_MonetaryAccount_PaymentBatch.client
    };
})(READ_NoteText_for_User_MonetaryAccount_PaymentBatch || (exports.READ_NoteText_for_User_MonetaryAccount_PaymentBatch = READ_NoteText_for_User_MonetaryAccount_PaymentBatch = {}));
var UPDATE_NoteText_for_User_MonetaryAccount_PaymentBatch;
(function (UPDATE_NoteText_for_User_MonetaryAccount_PaymentBatch) {
    UPDATE_NoteText_for_User_MonetaryAccount_PaymentBatch.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "payment-batchID": props["payment-batchID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_PaymentBatch.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_PaymentBatch.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_PaymentBatch.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-batch", serialization.serialize(it.path["payment-batchID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_NoteText_for_User_MonetaryAccount_PaymentBatch.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "payment-batchID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_NoteText_for_User_MonetaryAccount_PaymentBatch.api = {
        name: "uPDATE_NoteText_for_User_MonetaryAccount_PaymentBatch",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/payment-batch/:payment-batchID/note-text/:itemId",
        server: UPDATE_NoteText_for_User_MonetaryAccount_PaymentBatch.server,
        client: UPDATE_NoteText_for_User_MonetaryAccount_PaymentBatch.client
    };
})(UPDATE_NoteText_for_User_MonetaryAccount_PaymentBatch || (exports.UPDATE_NoteText_for_User_MonetaryAccount_PaymentBatch = UPDATE_NoteText_for_User_MonetaryAccount_PaymentBatch = {}));
var DELETE_NoteText_for_User_MonetaryAccount_PaymentBatch;
(function (DELETE_NoteText_for_User_MonetaryAccount_PaymentBatch) {
    DELETE_NoteText_for_User_MonetaryAccount_PaymentBatch.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "payment-batchID": props["payment-batchID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_NoteText_for_User_MonetaryAccount_PaymentBatch.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteText_for_User_MonetaryAccount_PaymentBatch.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteText_for_User_MonetaryAccount_PaymentBatch.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-batch", serialization.serialize(it.path["payment-batchID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_NoteText_for_User_MonetaryAccount_PaymentBatch.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "payment-batchID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_NoteText_for_User_MonetaryAccount_PaymentBatch.api = {
        name: "dELETE_NoteText_for_User_MonetaryAccount_PaymentBatch",
        method: "DELETE",
        path: "user/:userID/monetary-account/:monetary-accountID/payment-batch/:payment-batchID/note-text/:itemId",
        server: DELETE_NoteText_for_User_MonetaryAccount_PaymentBatch.server,
        client: DELETE_NoteText_for_User_MonetaryAccount_PaymentBatch.client
    };
})(DELETE_NoteText_for_User_MonetaryAccount_PaymentBatch || (exports.DELETE_NoteText_for_User_MonetaryAccount_PaymentBatch = DELETE_NoteText_for_User_MonetaryAccount_PaymentBatch = {}));
var List_all_NoteText_for_User_MonetaryAccount_PaymentDelayed;
(function (List_all_NoteText_for_User_MonetaryAccount_PaymentDelayed) {
    List_all_NoteText_for_User_MonetaryAccount_PaymentDelayed.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "payment-delayedID": props["payment-delayedID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_NoteText_for_User_MonetaryAccount_PaymentDelayed.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteText_for_User_MonetaryAccount_PaymentDelayed.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteText_for_User_MonetaryAccount_PaymentDelayed.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-delayed", serialization.serialize(it.path["payment-delayedID"]), "note-text"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_NoteText_for_User_MonetaryAccount_PaymentDelayed.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "payment-delayedID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_NoteText_for_User_MonetaryAccount_PaymentDelayed.api = {
        name: "list_all_NoteText_for_User_MonetaryAccount_PaymentDelayed",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/payment-delayed/:payment-delayedID/note-text",
        server: List_all_NoteText_for_User_MonetaryAccount_PaymentDelayed.server,
        client: List_all_NoteText_for_User_MonetaryAccount_PaymentDelayed.client
    };
})(List_all_NoteText_for_User_MonetaryAccount_PaymentDelayed || (exports.List_all_NoteText_for_User_MonetaryAccount_PaymentDelayed = List_all_NoteText_for_User_MonetaryAccount_PaymentDelayed = {}));
var CREATE_NoteText_for_User_MonetaryAccount_PaymentDelayed;
(function (CREATE_NoteText_for_User_MonetaryAccount_PaymentDelayed) {
    CREATE_NoteText_for_User_MonetaryAccount_PaymentDelayed.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "payment-delayedID": props["payment-delayedID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_PaymentDelayed.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_PaymentDelayed.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_PaymentDelayed.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-delayed", serialization.serialize(it.path["payment-delayedID"]), "note-text"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_NoteText_for_User_MonetaryAccount_PaymentDelayed.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "payment-delayedID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_NoteText_for_User_MonetaryAccount_PaymentDelayed.api = {
        name: "cREATE_NoteText_for_User_MonetaryAccount_PaymentDelayed",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/payment-delayed/:payment-delayedID/note-text",
        server: CREATE_NoteText_for_User_MonetaryAccount_PaymentDelayed.server,
        client: CREATE_NoteText_for_User_MonetaryAccount_PaymentDelayed.client
    };
})(CREATE_NoteText_for_User_MonetaryAccount_PaymentDelayed || (exports.CREATE_NoteText_for_User_MonetaryAccount_PaymentDelayed = CREATE_NoteText_for_User_MonetaryAccount_PaymentDelayed = {}));
var READ_NoteText_for_User_MonetaryAccount_PaymentDelayed;
(function (READ_NoteText_for_User_MonetaryAccount_PaymentDelayed) {
    READ_NoteText_for_User_MonetaryAccount_PaymentDelayed.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "payment-delayedID": props["payment-delayedID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_NoteText_for_User_MonetaryAccount_PaymentDelayed.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteText_for_User_MonetaryAccount_PaymentDelayed.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteText_for_User_MonetaryAccount_PaymentDelayed.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-delayed", serialization.serialize(it.path["payment-delayedID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_NoteText_for_User_MonetaryAccount_PaymentDelayed.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "payment-delayedID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_NoteText_for_User_MonetaryAccount_PaymentDelayed.api = {
        name: "rEAD_NoteText_for_User_MonetaryAccount_PaymentDelayed",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/payment-delayed/:payment-delayedID/note-text/:itemId",
        server: READ_NoteText_for_User_MonetaryAccount_PaymentDelayed.server,
        client: READ_NoteText_for_User_MonetaryAccount_PaymentDelayed.client
    };
})(READ_NoteText_for_User_MonetaryAccount_PaymentDelayed || (exports.READ_NoteText_for_User_MonetaryAccount_PaymentDelayed = READ_NoteText_for_User_MonetaryAccount_PaymentDelayed = {}));
var UPDATE_NoteText_for_User_MonetaryAccount_PaymentDelayed;
(function (UPDATE_NoteText_for_User_MonetaryAccount_PaymentDelayed) {
    UPDATE_NoteText_for_User_MonetaryAccount_PaymentDelayed.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "payment-delayedID": props["payment-delayedID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_PaymentDelayed.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_PaymentDelayed.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_PaymentDelayed.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-delayed", serialization.serialize(it.path["payment-delayedID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_NoteText_for_User_MonetaryAccount_PaymentDelayed.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "payment-delayedID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_NoteText_for_User_MonetaryAccount_PaymentDelayed.api = {
        name: "uPDATE_NoteText_for_User_MonetaryAccount_PaymentDelayed",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/payment-delayed/:payment-delayedID/note-text/:itemId",
        server: UPDATE_NoteText_for_User_MonetaryAccount_PaymentDelayed.server,
        client: UPDATE_NoteText_for_User_MonetaryAccount_PaymentDelayed.client
    };
})(UPDATE_NoteText_for_User_MonetaryAccount_PaymentDelayed || (exports.UPDATE_NoteText_for_User_MonetaryAccount_PaymentDelayed = UPDATE_NoteText_for_User_MonetaryAccount_PaymentDelayed = {}));
var DELETE_NoteText_for_User_MonetaryAccount_PaymentDelayed;
(function (DELETE_NoteText_for_User_MonetaryAccount_PaymentDelayed) {
    DELETE_NoteText_for_User_MonetaryAccount_PaymentDelayed.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "payment-delayedID": props["payment-delayedID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_NoteText_for_User_MonetaryAccount_PaymentDelayed.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteText_for_User_MonetaryAccount_PaymentDelayed.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteText_for_User_MonetaryAccount_PaymentDelayed.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-delayed", serialization.serialize(it.path["payment-delayedID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_NoteText_for_User_MonetaryAccount_PaymentDelayed.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "payment-delayedID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_NoteText_for_User_MonetaryAccount_PaymentDelayed.api = {
        name: "dELETE_NoteText_for_User_MonetaryAccount_PaymentDelayed",
        method: "DELETE",
        path: "user/:userID/monetary-account/:monetary-accountID/payment-delayed/:payment-delayedID/note-text/:itemId",
        server: DELETE_NoteText_for_User_MonetaryAccount_PaymentDelayed.server,
        client: DELETE_NoteText_for_User_MonetaryAccount_PaymentDelayed.client
    };
})(DELETE_NoteText_for_User_MonetaryAccount_PaymentDelayed || (exports.DELETE_NoteText_for_User_MonetaryAccount_PaymentDelayed = DELETE_NoteText_for_User_MonetaryAccount_PaymentDelayed = {}));
var List_all_NoteText_for_User_MonetaryAccount_Payment;
(function (List_all_NoteText_for_User_MonetaryAccount_Payment) {
    List_all_NoteText_for_User_MonetaryAccount_Payment.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "paymentID": props["paymentID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_NoteText_for_User_MonetaryAccount_Payment.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteText_for_User_MonetaryAccount_Payment.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteText_for_User_MonetaryAccount_Payment.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment", serialization.serialize(it.path["paymentID"]), "note-text"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_NoteText_for_User_MonetaryAccount_Payment.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "paymentID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_NoteText_for_User_MonetaryAccount_Payment.api = {
        name: "list_all_NoteText_for_User_MonetaryAccount_Payment",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/payment/:paymentID/note-text",
        server: List_all_NoteText_for_User_MonetaryAccount_Payment.server,
        client: List_all_NoteText_for_User_MonetaryAccount_Payment.client
    };
})(List_all_NoteText_for_User_MonetaryAccount_Payment || (exports.List_all_NoteText_for_User_MonetaryAccount_Payment = List_all_NoteText_for_User_MonetaryAccount_Payment = {}));
var CREATE_NoteText_for_User_MonetaryAccount_Payment;
(function (CREATE_NoteText_for_User_MonetaryAccount_Payment) {
    CREATE_NoteText_for_User_MonetaryAccount_Payment.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "paymentID": props["paymentID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_Payment.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_Payment.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_Payment.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment", serialization.serialize(it.path["paymentID"]), "note-text"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_NoteText_for_User_MonetaryAccount_Payment.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "paymentID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_NoteText_for_User_MonetaryAccount_Payment.api = {
        name: "cREATE_NoteText_for_User_MonetaryAccount_Payment",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/payment/:paymentID/note-text",
        server: CREATE_NoteText_for_User_MonetaryAccount_Payment.server,
        client: CREATE_NoteText_for_User_MonetaryAccount_Payment.client
    };
})(CREATE_NoteText_for_User_MonetaryAccount_Payment || (exports.CREATE_NoteText_for_User_MonetaryAccount_Payment = CREATE_NoteText_for_User_MonetaryAccount_Payment = {}));
var READ_NoteText_for_User_MonetaryAccount_Payment;
(function (READ_NoteText_for_User_MonetaryAccount_Payment) {
    READ_NoteText_for_User_MonetaryAccount_Payment.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "paymentID": props["paymentID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_NoteText_for_User_MonetaryAccount_Payment.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteText_for_User_MonetaryAccount_Payment.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteText_for_User_MonetaryAccount_Payment.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment", serialization.serialize(it.path["paymentID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_NoteText_for_User_MonetaryAccount_Payment.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "paymentID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_NoteText_for_User_MonetaryAccount_Payment.api = {
        name: "rEAD_NoteText_for_User_MonetaryAccount_Payment",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/payment/:paymentID/note-text/:itemId",
        server: READ_NoteText_for_User_MonetaryAccount_Payment.server,
        client: READ_NoteText_for_User_MonetaryAccount_Payment.client
    };
})(READ_NoteText_for_User_MonetaryAccount_Payment || (exports.READ_NoteText_for_User_MonetaryAccount_Payment = READ_NoteText_for_User_MonetaryAccount_Payment = {}));
var UPDATE_NoteText_for_User_MonetaryAccount_Payment;
(function (UPDATE_NoteText_for_User_MonetaryAccount_Payment) {
    UPDATE_NoteText_for_User_MonetaryAccount_Payment.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "paymentID": props["paymentID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_Payment.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_Payment.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_Payment.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment", serialization.serialize(it.path["paymentID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_NoteText_for_User_MonetaryAccount_Payment.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "paymentID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_NoteText_for_User_MonetaryAccount_Payment.api = {
        name: "uPDATE_NoteText_for_User_MonetaryAccount_Payment",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/payment/:paymentID/note-text/:itemId",
        server: UPDATE_NoteText_for_User_MonetaryAccount_Payment.server,
        client: UPDATE_NoteText_for_User_MonetaryAccount_Payment.client
    };
})(UPDATE_NoteText_for_User_MonetaryAccount_Payment || (exports.UPDATE_NoteText_for_User_MonetaryAccount_Payment = UPDATE_NoteText_for_User_MonetaryAccount_Payment = {}));
var DELETE_NoteText_for_User_MonetaryAccount_Payment;
(function (DELETE_NoteText_for_User_MonetaryAccount_Payment) {
    DELETE_NoteText_for_User_MonetaryAccount_Payment.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "paymentID": props["paymentID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_NoteText_for_User_MonetaryAccount_Payment.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteText_for_User_MonetaryAccount_Payment.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteText_for_User_MonetaryAccount_Payment.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment", serialization.serialize(it.path["paymentID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_NoteText_for_User_MonetaryAccount_Payment.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "paymentID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_NoteText_for_User_MonetaryAccount_Payment.api = {
        name: "dELETE_NoteText_for_User_MonetaryAccount_Payment",
        method: "DELETE",
        path: "user/:userID/monetary-account/:monetary-accountID/payment/:paymentID/note-text/:itemId",
        server: DELETE_NoteText_for_User_MonetaryAccount_Payment.server,
        client: DELETE_NoteText_for_User_MonetaryAccount_Payment.client
    };
})(DELETE_NoteText_for_User_MonetaryAccount_Payment || (exports.DELETE_NoteText_for_User_MonetaryAccount_Payment = DELETE_NoteText_for_User_MonetaryAccount_Payment = {}));
var List_all_NoteText_for_User_MonetaryAccount_RequestInquiryBatch;
(function (List_all_NoteText_for_User_MonetaryAccount_RequestInquiryBatch) {
    List_all_NoteText_for_User_MonetaryAccount_RequestInquiryBatch.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-inquiry-batchID": props["request-inquiry-batchID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_NoteText_for_User_MonetaryAccount_RequestInquiryBatch.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteText_for_User_MonetaryAccount_RequestInquiryBatch.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteText_for_User_MonetaryAccount_RequestInquiryBatch.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry-batch", serialization.serialize(it.path["request-inquiry-batchID"]), "note-text"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_NoteText_for_User_MonetaryAccount_RequestInquiryBatch.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "request-inquiry-batchID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_NoteText_for_User_MonetaryAccount_RequestInquiryBatch.api = {
        name: "list_all_NoteText_for_User_MonetaryAccount_RequestInquiryBatch",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry-batch/:request-inquiry-batchID/note-text",
        server: List_all_NoteText_for_User_MonetaryAccount_RequestInquiryBatch.server,
        client: List_all_NoteText_for_User_MonetaryAccount_RequestInquiryBatch.client
    };
})(List_all_NoteText_for_User_MonetaryAccount_RequestInquiryBatch || (exports.List_all_NoteText_for_User_MonetaryAccount_RequestInquiryBatch = List_all_NoteText_for_User_MonetaryAccount_RequestInquiryBatch = {}));
var CREATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch;
(function (CREATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch) {
    CREATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-inquiry-batchID": props["request-inquiry-batchID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry-batch", serialization.serialize(it.path["request-inquiry-batchID"]), "note-text"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "request-inquiry-batchID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch.api = {
        name: "cREATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry-batch/:request-inquiry-batchID/note-text",
        server: CREATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch.server,
        client: CREATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch.client
    };
})(CREATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch || (exports.CREATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch = CREATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch = {}));
var READ_NoteText_for_User_MonetaryAccount_RequestInquiryBatch;
(function (READ_NoteText_for_User_MonetaryAccount_RequestInquiryBatch) {
    READ_NoteText_for_User_MonetaryAccount_RequestInquiryBatch.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-inquiry-batchID": props["request-inquiry-batchID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_NoteText_for_User_MonetaryAccount_RequestInquiryBatch.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteText_for_User_MonetaryAccount_RequestInquiryBatch.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteText_for_User_MonetaryAccount_RequestInquiryBatch.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry-batch", serialization.serialize(it.path["request-inquiry-batchID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_NoteText_for_User_MonetaryAccount_RequestInquiryBatch.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "request-inquiry-batchID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_NoteText_for_User_MonetaryAccount_RequestInquiryBatch.api = {
        name: "rEAD_NoteText_for_User_MonetaryAccount_RequestInquiryBatch",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry-batch/:request-inquiry-batchID/note-text/:itemId",
        server: READ_NoteText_for_User_MonetaryAccount_RequestInquiryBatch.server,
        client: READ_NoteText_for_User_MonetaryAccount_RequestInquiryBatch.client
    };
})(READ_NoteText_for_User_MonetaryAccount_RequestInquiryBatch || (exports.READ_NoteText_for_User_MonetaryAccount_RequestInquiryBatch = READ_NoteText_for_User_MonetaryAccount_RequestInquiryBatch = {}));
var UPDATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch;
(function (UPDATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch) {
    UPDATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-inquiry-batchID": props["request-inquiry-batchID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry-batch", serialization.serialize(it.path["request-inquiry-batchID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "request-inquiry-batchID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch.api = {
        name: "uPDATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry-batch/:request-inquiry-batchID/note-text/:itemId",
        server: UPDATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch.server,
        client: UPDATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch.client
    };
})(UPDATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch || (exports.UPDATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch = UPDATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch = {}));
var DELETE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch;
(function (DELETE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch) {
    DELETE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-inquiry-batchID": props["request-inquiry-batchID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry-batch", serialization.serialize(it.path["request-inquiry-batchID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "request-inquiry-batchID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch.api = {
        name: "dELETE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch",
        method: "DELETE",
        path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry-batch/:request-inquiry-batchID/note-text/:itemId",
        server: DELETE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch.server,
        client: DELETE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch.client
    };
})(DELETE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch || (exports.DELETE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch = DELETE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch = {}));
var List_all_NoteText_for_User_MonetaryAccount_RequestInquiry;
(function (List_all_NoteText_for_User_MonetaryAccount_RequestInquiry) {
    List_all_NoteText_for_User_MonetaryAccount_RequestInquiry.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-inquiryID": props["request-inquiryID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_NoteText_for_User_MonetaryAccount_RequestInquiry.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteText_for_User_MonetaryAccount_RequestInquiry.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteText_for_User_MonetaryAccount_RequestInquiry.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry", serialization.serialize(it.path["request-inquiryID"]), "note-text"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_NoteText_for_User_MonetaryAccount_RequestInquiry.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "request-inquiryID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_NoteText_for_User_MonetaryAccount_RequestInquiry.api = {
        name: "list_all_NoteText_for_User_MonetaryAccount_RequestInquiry",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry/:request-inquiryID/note-text",
        server: List_all_NoteText_for_User_MonetaryAccount_RequestInquiry.server,
        client: List_all_NoteText_for_User_MonetaryAccount_RequestInquiry.client
    };
})(List_all_NoteText_for_User_MonetaryAccount_RequestInquiry || (exports.List_all_NoteText_for_User_MonetaryAccount_RequestInquiry = List_all_NoteText_for_User_MonetaryAccount_RequestInquiry = {}));
var CREATE_NoteText_for_User_MonetaryAccount_RequestInquiry;
(function (CREATE_NoteText_for_User_MonetaryAccount_RequestInquiry) {
    CREATE_NoteText_for_User_MonetaryAccount_RequestInquiry.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-inquiryID": props["request-inquiryID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_RequestInquiry.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_RequestInquiry.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_RequestInquiry.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry", serialization.serialize(it.path["request-inquiryID"]), "note-text"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_NoteText_for_User_MonetaryAccount_RequestInquiry.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "request-inquiryID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_NoteText_for_User_MonetaryAccount_RequestInquiry.api = {
        name: "cREATE_NoteText_for_User_MonetaryAccount_RequestInquiry",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry/:request-inquiryID/note-text",
        server: CREATE_NoteText_for_User_MonetaryAccount_RequestInquiry.server,
        client: CREATE_NoteText_for_User_MonetaryAccount_RequestInquiry.client
    };
})(CREATE_NoteText_for_User_MonetaryAccount_RequestInquiry || (exports.CREATE_NoteText_for_User_MonetaryAccount_RequestInquiry = CREATE_NoteText_for_User_MonetaryAccount_RequestInquiry = {}));
var READ_NoteText_for_User_MonetaryAccount_RequestInquiry;
(function (READ_NoteText_for_User_MonetaryAccount_RequestInquiry) {
    READ_NoteText_for_User_MonetaryAccount_RequestInquiry.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-inquiryID": props["request-inquiryID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_NoteText_for_User_MonetaryAccount_RequestInquiry.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteText_for_User_MonetaryAccount_RequestInquiry.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteText_for_User_MonetaryAccount_RequestInquiry.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry", serialization.serialize(it.path["request-inquiryID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_NoteText_for_User_MonetaryAccount_RequestInquiry.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "request-inquiryID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_NoteText_for_User_MonetaryAccount_RequestInquiry.api = {
        name: "rEAD_NoteText_for_User_MonetaryAccount_RequestInquiry",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry/:request-inquiryID/note-text/:itemId",
        server: READ_NoteText_for_User_MonetaryAccount_RequestInquiry.server,
        client: READ_NoteText_for_User_MonetaryAccount_RequestInquiry.client
    };
})(READ_NoteText_for_User_MonetaryAccount_RequestInquiry || (exports.READ_NoteText_for_User_MonetaryAccount_RequestInquiry = READ_NoteText_for_User_MonetaryAccount_RequestInquiry = {}));
var UPDATE_NoteText_for_User_MonetaryAccount_RequestInquiry;
(function (UPDATE_NoteText_for_User_MonetaryAccount_RequestInquiry) {
    UPDATE_NoteText_for_User_MonetaryAccount_RequestInquiry.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-inquiryID": props["request-inquiryID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_RequestInquiry.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_RequestInquiry.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_RequestInquiry.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry", serialization.serialize(it.path["request-inquiryID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_NoteText_for_User_MonetaryAccount_RequestInquiry.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "request-inquiryID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_NoteText_for_User_MonetaryAccount_RequestInquiry.api = {
        name: "uPDATE_NoteText_for_User_MonetaryAccount_RequestInquiry",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry/:request-inquiryID/note-text/:itemId",
        server: UPDATE_NoteText_for_User_MonetaryAccount_RequestInquiry.server,
        client: UPDATE_NoteText_for_User_MonetaryAccount_RequestInquiry.client
    };
})(UPDATE_NoteText_for_User_MonetaryAccount_RequestInquiry || (exports.UPDATE_NoteText_for_User_MonetaryAccount_RequestInquiry = UPDATE_NoteText_for_User_MonetaryAccount_RequestInquiry = {}));
var DELETE_NoteText_for_User_MonetaryAccount_RequestInquiry;
(function (DELETE_NoteText_for_User_MonetaryAccount_RequestInquiry) {
    DELETE_NoteText_for_User_MonetaryAccount_RequestInquiry.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-inquiryID": props["request-inquiryID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_NoteText_for_User_MonetaryAccount_RequestInquiry.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteText_for_User_MonetaryAccount_RequestInquiry.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteText_for_User_MonetaryAccount_RequestInquiry.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry", serialization.serialize(it.path["request-inquiryID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_NoteText_for_User_MonetaryAccount_RequestInquiry.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "request-inquiryID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_NoteText_for_User_MonetaryAccount_RequestInquiry.api = {
        name: "dELETE_NoteText_for_User_MonetaryAccount_RequestInquiry",
        method: "DELETE",
        path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry/:request-inquiryID/note-text/:itemId",
        server: DELETE_NoteText_for_User_MonetaryAccount_RequestInquiry.server,
        client: DELETE_NoteText_for_User_MonetaryAccount_RequestInquiry.client
    };
})(DELETE_NoteText_for_User_MonetaryAccount_RequestInquiry || (exports.DELETE_NoteText_for_User_MonetaryAccount_RequestInquiry = DELETE_NoteText_for_User_MonetaryAccount_RequestInquiry = {}));
var List_all_NoteText_for_User_MonetaryAccount_RequestResponse;
(function (List_all_NoteText_for_User_MonetaryAccount_RequestResponse) {
    List_all_NoteText_for_User_MonetaryAccount_RequestResponse.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-responseID": props["request-responseID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_NoteText_for_User_MonetaryAccount_RequestResponse.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteText_for_User_MonetaryAccount_RequestResponse.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteText_for_User_MonetaryAccount_RequestResponse.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-response", serialization.serialize(it.path["request-responseID"]), "note-text"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_NoteText_for_User_MonetaryAccount_RequestResponse.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "request-responseID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_NoteText_for_User_MonetaryAccount_RequestResponse.api = {
        name: "list_all_NoteText_for_User_MonetaryAccount_RequestResponse",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/request-response/:request-responseID/note-text",
        server: List_all_NoteText_for_User_MonetaryAccount_RequestResponse.server,
        client: List_all_NoteText_for_User_MonetaryAccount_RequestResponse.client
    };
})(List_all_NoteText_for_User_MonetaryAccount_RequestResponse || (exports.List_all_NoteText_for_User_MonetaryAccount_RequestResponse = List_all_NoteText_for_User_MonetaryAccount_RequestResponse = {}));
var CREATE_NoteText_for_User_MonetaryAccount_RequestResponse;
(function (CREATE_NoteText_for_User_MonetaryAccount_RequestResponse) {
    CREATE_NoteText_for_User_MonetaryAccount_RequestResponse.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-responseID": props["request-responseID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_RequestResponse.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_RequestResponse.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_RequestResponse.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-response", serialization.serialize(it.path["request-responseID"]), "note-text"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_NoteText_for_User_MonetaryAccount_RequestResponse.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "request-responseID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_NoteText_for_User_MonetaryAccount_RequestResponse.api = {
        name: "cREATE_NoteText_for_User_MonetaryAccount_RequestResponse",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/request-response/:request-responseID/note-text",
        server: CREATE_NoteText_for_User_MonetaryAccount_RequestResponse.server,
        client: CREATE_NoteText_for_User_MonetaryAccount_RequestResponse.client
    };
})(CREATE_NoteText_for_User_MonetaryAccount_RequestResponse || (exports.CREATE_NoteText_for_User_MonetaryAccount_RequestResponse = CREATE_NoteText_for_User_MonetaryAccount_RequestResponse = {}));
var READ_NoteText_for_User_MonetaryAccount_RequestResponse;
(function (READ_NoteText_for_User_MonetaryAccount_RequestResponse) {
    READ_NoteText_for_User_MonetaryAccount_RequestResponse.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-responseID": props["request-responseID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_NoteText_for_User_MonetaryAccount_RequestResponse.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteText_for_User_MonetaryAccount_RequestResponse.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteText_for_User_MonetaryAccount_RequestResponse.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-response", serialization.serialize(it.path["request-responseID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_NoteText_for_User_MonetaryAccount_RequestResponse.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "request-responseID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_NoteText_for_User_MonetaryAccount_RequestResponse.api = {
        name: "rEAD_NoteText_for_User_MonetaryAccount_RequestResponse",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/request-response/:request-responseID/note-text/:itemId",
        server: READ_NoteText_for_User_MonetaryAccount_RequestResponse.server,
        client: READ_NoteText_for_User_MonetaryAccount_RequestResponse.client
    };
})(READ_NoteText_for_User_MonetaryAccount_RequestResponse || (exports.READ_NoteText_for_User_MonetaryAccount_RequestResponse = READ_NoteText_for_User_MonetaryAccount_RequestResponse = {}));
var UPDATE_NoteText_for_User_MonetaryAccount_RequestResponse;
(function (UPDATE_NoteText_for_User_MonetaryAccount_RequestResponse) {
    UPDATE_NoteText_for_User_MonetaryAccount_RequestResponse.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-responseID": props["request-responseID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_RequestResponse.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_RequestResponse.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_RequestResponse.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-response", serialization.serialize(it.path["request-responseID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_NoteText_for_User_MonetaryAccount_RequestResponse.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "request-responseID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_NoteText_for_User_MonetaryAccount_RequestResponse.api = {
        name: "uPDATE_NoteText_for_User_MonetaryAccount_RequestResponse",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/request-response/:request-responseID/note-text/:itemId",
        server: UPDATE_NoteText_for_User_MonetaryAccount_RequestResponse.server,
        client: UPDATE_NoteText_for_User_MonetaryAccount_RequestResponse.client
    };
})(UPDATE_NoteText_for_User_MonetaryAccount_RequestResponse || (exports.UPDATE_NoteText_for_User_MonetaryAccount_RequestResponse = UPDATE_NoteText_for_User_MonetaryAccount_RequestResponse = {}));
var DELETE_NoteText_for_User_MonetaryAccount_RequestResponse;
(function (DELETE_NoteText_for_User_MonetaryAccount_RequestResponse) {
    DELETE_NoteText_for_User_MonetaryAccount_RequestResponse.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "request-responseID": props["request-responseID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_NoteText_for_User_MonetaryAccount_RequestResponse.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteText_for_User_MonetaryAccount_RequestResponse.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteText_for_User_MonetaryAccount_RequestResponse.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-response", serialization.serialize(it.path["request-responseID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_NoteText_for_User_MonetaryAccount_RequestResponse.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "request-responseID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_NoteText_for_User_MonetaryAccount_RequestResponse.api = {
        name: "dELETE_NoteText_for_User_MonetaryAccount_RequestResponse",
        method: "DELETE",
        path: "user/:userID/monetary-account/:monetary-accountID/request-response/:request-responseID/note-text/:itemId",
        server: DELETE_NoteText_for_User_MonetaryAccount_RequestResponse.server,
        client: DELETE_NoteText_for_User_MonetaryAccount_RequestResponse.client
    };
})(DELETE_NoteText_for_User_MonetaryAccount_RequestResponse || (exports.DELETE_NoteText_for_User_MonetaryAccount_RequestResponse = DELETE_NoteText_for_User_MonetaryAccount_RequestResponse = {}));
var List_all_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance;
(function (List_all_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance) {
    List_all_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "scheduleID": props["scheduleID"], "schedule-instanceID": props["schedule-instanceID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule", serialization.serialize(it.path["scheduleID"]), "schedule-instance", serialization.serialize(it.path["schedule-instanceID"]), "note-text"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "scheduleID": serialization.deserialize(it.path[5]), "schedule-instanceID": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance.api = {
        name: "list_all_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule/:scheduleID/schedule-instance/:schedule-instanceID/note-text",
        server: List_all_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance.server,
        client: List_all_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance.client
    };
})(List_all_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance || (exports.List_all_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance = List_all_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance = {}));
var CREATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance;
(function (CREATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance) {
    CREATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "scheduleID": props["scheduleID"], "schedule-instanceID": props["schedule-instanceID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule", serialization.serialize(it.path["scheduleID"]), "schedule-instance", serialization.serialize(it.path["schedule-instanceID"]), "note-text"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "scheduleID": serialization.deserialize(it.path[5]), "schedule-instanceID": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance.api = {
        name: "cREATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule/:scheduleID/schedule-instance/:schedule-instanceID/note-text",
        server: CREATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance.server,
        client: CREATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance.client
    };
})(CREATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance || (exports.CREATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance = CREATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance = {}));
var READ_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance;
(function (READ_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance) {
    READ_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "scheduleID": props["scheduleID"], "schedule-instanceID": props["schedule-instanceID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule", serialization.serialize(it.path["scheduleID"]), "schedule-instance", serialization.serialize(it.path["schedule-instanceID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "scheduleID": serialization.deserialize(it.path[5]), "schedule-instanceID": serialization.deserialize(it.path[7]), "itemId": serialization.deserialize(it.path[9])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance.api = {
        name: "rEAD_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule/:scheduleID/schedule-instance/:schedule-instanceID/note-text/:itemId",
        server: READ_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance.server,
        client: READ_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance.client
    };
})(READ_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance || (exports.READ_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance = READ_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance = {}));
var UPDATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance;
(function (UPDATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance) {
    UPDATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "scheduleID": props["scheduleID"], "schedule-instanceID": props["schedule-instanceID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule", serialization.serialize(it.path["scheduleID"]), "schedule-instance", serialization.serialize(it.path["schedule-instanceID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "scheduleID": serialization.deserialize(it.path[5]), "schedule-instanceID": serialization.deserialize(it.path[7]), "itemId": serialization.deserialize(it.path[9])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance.api = {
        name: "uPDATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule/:scheduleID/schedule-instance/:schedule-instanceID/note-text/:itemId",
        server: UPDATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance.server,
        client: UPDATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance.client
    };
})(UPDATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance || (exports.UPDATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance = UPDATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance = {}));
var DELETE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance;
(function (DELETE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance) {
    DELETE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "scheduleID": props["scheduleID"], "schedule-instanceID": props["schedule-instanceID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule", serialization.serialize(it.path["scheduleID"]), "schedule-instance", serialization.serialize(it.path["schedule-instanceID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "scheduleID": serialization.deserialize(it.path[5]), "schedule-instanceID": serialization.deserialize(it.path[7]), "itemId": serialization.deserialize(it.path[9])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance.api = {
        name: "dELETE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance",
        method: "DELETE",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule/:scheduleID/schedule-instance/:schedule-instanceID/note-text/:itemId",
        server: DELETE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance.server,
        client: DELETE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance.client
    };
})(DELETE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance || (exports.DELETE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance = DELETE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance = {}));
var List_all_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch;
(function (List_all_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch) {
    List_all_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-payment-batchID": props["schedule-payment-batchID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment-batch", serialization.serialize(it.path["schedule-payment-batchID"]), "note-text"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "schedule-payment-batchID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch.api = {
        name: "list_all_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment-batch/:schedule-payment-batchID/note-text",
        server: List_all_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch.server,
        client: List_all_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch.client
    };
})(List_all_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch || (exports.List_all_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch = List_all_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch = {}));
var CREATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch;
(function (CREATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch) {
    CREATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-payment-batchID": props["schedule-payment-batchID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment-batch", serialization.serialize(it.path["schedule-payment-batchID"]), "note-text"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "schedule-payment-batchID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch.api = {
        name: "cREATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment-batch/:schedule-payment-batchID/note-text",
        server: CREATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch.server,
        client: CREATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch.client
    };
})(CREATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch || (exports.CREATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch = CREATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch = {}));
var READ_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch;
(function (READ_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch) {
    READ_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-payment-batchID": props["schedule-payment-batchID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment-batch", serialization.serialize(it.path["schedule-payment-batchID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "schedule-payment-batchID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch.api = {
        name: "rEAD_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment-batch/:schedule-payment-batchID/note-text/:itemId",
        server: READ_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch.server,
        client: READ_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch.client
    };
})(READ_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch || (exports.READ_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch = READ_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch = {}));
var UPDATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch;
(function (UPDATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch) {
    UPDATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-payment-batchID": props["schedule-payment-batchID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment-batch", serialization.serialize(it.path["schedule-payment-batchID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "schedule-payment-batchID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch.api = {
        name: "uPDATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment-batch/:schedule-payment-batchID/note-text/:itemId",
        server: UPDATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch.server,
        client: UPDATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch.client
    };
})(UPDATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch || (exports.UPDATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch = UPDATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch = {}));
var DELETE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch;
(function (DELETE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch) {
    DELETE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-payment-batchID": props["schedule-payment-batchID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment-batch", serialization.serialize(it.path["schedule-payment-batchID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "schedule-payment-batchID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch.api = {
        name: "dELETE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch",
        method: "DELETE",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment-batch/:schedule-payment-batchID/note-text/:itemId",
        server: DELETE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch.server,
        client: DELETE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch.client
    };
})(DELETE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch || (exports.DELETE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch = DELETE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch = {}));
var List_all_NoteText_for_User_MonetaryAccount_SchedulePayment;
(function (List_all_NoteText_for_User_MonetaryAccount_SchedulePayment) {
    List_all_NoteText_for_User_MonetaryAccount_SchedulePayment.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-paymentID": props["schedule-paymentID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_NoteText_for_User_MonetaryAccount_SchedulePayment.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteText_for_User_MonetaryAccount_SchedulePayment.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteText_for_User_MonetaryAccount_SchedulePayment.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment", serialization.serialize(it.path["schedule-paymentID"]), "note-text"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_NoteText_for_User_MonetaryAccount_SchedulePayment.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "schedule-paymentID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_NoteText_for_User_MonetaryAccount_SchedulePayment.api = {
        name: "list_all_NoteText_for_User_MonetaryAccount_SchedulePayment",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment/:schedule-paymentID/note-text",
        server: List_all_NoteText_for_User_MonetaryAccount_SchedulePayment.server,
        client: List_all_NoteText_for_User_MonetaryAccount_SchedulePayment.client
    };
})(List_all_NoteText_for_User_MonetaryAccount_SchedulePayment || (exports.List_all_NoteText_for_User_MonetaryAccount_SchedulePayment = List_all_NoteText_for_User_MonetaryAccount_SchedulePayment = {}));
var CREATE_NoteText_for_User_MonetaryAccount_SchedulePayment;
(function (CREATE_NoteText_for_User_MonetaryAccount_SchedulePayment) {
    CREATE_NoteText_for_User_MonetaryAccount_SchedulePayment.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-paymentID": props["schedule-paymentID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_SchedulePayment.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_SchedulePayment.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_SchedulePayment.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment", serialization.serialize(it.path["schedule-paymentID"]), "note-text"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_NoteText_for_User_MonetaryAccount_SchedulePayment.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "schedule-paymentID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_NoteText_for_User_MonetaryAccount_SchedulePayment.api = {
        name: "cREATE_NoteText_for_User_MonetaryAccount_SchedulePayment",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment/:schedule-paymentID/note-text",
        server: CREATE_NoteText_for_User_MonetaryAccount_SchedulePayment.server,
        client: CREATE_NoteText_for_User_MonetaryAccount_SchedulePayment.client
    };
})(CREATE_NoteText_for_User_MonetaryAccount_SchedulePayment || (exports.CREATE_NoteText_for_User_MonetaryAccount_SchedulePayment = CREATE_NoteText_for_User_MonetaryAccount_SchedulePayment = {}));
var READ_NoteText_for_User_MonetaryAccount_SchedulePayment;
(function (READ_NoteText_for_User_MonetaryAccount_SchedulePayment) {
    READ_NoteText_for_User_MonetaryAccount_SchedulePayment.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-paymentID": props["schedule-paymentID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_NoteText_for_User_MonetaryAccount_SchedulePayment.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteText_for_User_MonetaryAccount_SchedulePayment.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteText_for_User_MonetaryAccount_SchedulePayment.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment", serialization.serialize(it.path["schedule-paymentID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_NoteText_for_User_MonetaryAccount_SchedulePayment.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "schedule-paymentID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_NoteText_for_User_MonetaryAccount_SchedulePayment.api = {
        name: "rEAD_NoteText_for_User_MonetaryAccount_SchedulePayment",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment/:schedule-paymentID/note-text/:itemId",
        server: READ_NoteText_for_User_MonetaryAccount_SchedulePayment.server,
        client: READ_NoteText_for_User_MonetaryAccount_SchedulePayment.client
    };
})(READ_NoteText_for_User_MonetaryAccount_SchedulePayment || (exports.READ_NoteText_for_User_MonetaryAccount_SchedulePayment = READ_NoteText_for_User_MonetaryAccount_SchedulePayment = {}));
var UPDATE_NoteText_for_User_MonetaryAccount_SchedulePayment;
(function (UPDATE_NoteText_for_User_MonetaryAccount_SchedulePayment) {
    UPDATE_NoteText_for_User_MonetaryAccount_SchedulePayment.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-paymentID": props["schedule-paymentID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_SchedulePayment.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_SchedulePayment.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_SchedulePayment.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment", serialization.serialize(it.path["schedule-paymentID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_NoteText_for_User_MonetaryAccount_SchedulePayment.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "schedule-paymentID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_NoteText_for_User_MonetaryAccount_SchedulePayment.api = {
        name: "uPDATE_NoteText_for_User_MonetaryAccount_SchedulePayment",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment/:schedule-paymentID/note-text/:itemId",
        server: UPDATE_NoteText_for_User_MonetaryAccount_SchedulePayment.server,
        client: UPDATE_NoteText_for_User_MonetaryAccount_SchedulePayment.client
    };
})(UPDATE_NoteText_for_User_MonetaryAccount_SchedulePayment || (exports.UPDATE_NoteText_for_User_MonetaryAccount_SchedulePayment = UPDATE_NoteText_for_User_MonetaryAccount_SchedulePayment = {}));
var DELETE_NoteText_for_User_MonetaryAccount_SchedulePayment;
(function (DELETE_NoteText_for_User_MonetaryAccount_SchedulePayment) {
    DELETE_NoteText_for_User_MonetaryAccount_SchedulePayment.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-paymentID": props["schedule-paymentID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_NoteText_for_User_MonetaryAccount_SchedulePayment.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteText_for_User_MonetaryAccount_SchedulePayment.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteText_for_User_MonetaryAccount_SchedulePayment.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment", serialization.serialize(it.path["schedule-paymentID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_NoteText_for_User_MonetaryAccount_SchedulePayment.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "schedule-paymentID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_NoteText_for_User_MonetaryAccount_SchedulePayment.api = {
        name: "dELETE_NoteText_for_User_MonetaryAccount_SchedulePayment",
        method: "DELETE",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment/:schedule-paymentID/note-text/:itemId",
        server: DELETE_NoteText_for_User_MonetaryAccount_SchedulePayment.server,
        client: DELETE_NoteText_for_User_MonetaryAccount_SchedulePayment.client
    };
})(DELETE_NoteText_for_User_MonetaryAccount_SchedulePayment || (exports.DELETE_NoteText_for_User_MonetaryAccount_SchedulePayment = DELETE_NoteText_for_User_MonetaryAccount_SchedulePayment = {}));
var List_all_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch;
(function (List_all_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch) {
    List_all_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-request-inquiry-batchID": props["schedule-request-inquiry-batchID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-request-inquiry-batch", serialization.serialize(it.path["schedule-request-inquiry-batchID"]), "note-text"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "schedule-request-inquiry-batchID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.api = {
        name: "list_all_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-request-inquiry-batch/:schedule-request-inquiry-batchID/note-text",
        server: List_all_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.server,
        client: List_all_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.client
    };
})(List_all_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch || (exports.List_all_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch = List_all_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch = {}));
var CREATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch;
(function (CREATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch) {
    CREATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-request-inquiry-batchID": props["schedule-request-inquiry-batchID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-request-inquiry-batch", serialization.serialize(it.path["schedule-request-inquiry-batchID"]), "note-text"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "schedule-request-inquiry-batchID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.api = {
        name: "cREATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-request-inquiry-batch/:schedule-request-inquiry-batchID/note-text",
        server: CREATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.server,
        client: CREATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.client
    };
})(CREATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch || (exports.CREATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch = CREATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch = {}));
var READ_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch;
(function (READ_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch) {
    READ_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-request-inquiry-batchID": props["schedule-request-inquiry-batchID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-request-inquiry-batch", serialization.serialize(it.path["schedule-request-inquiry-batchID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "schedule-request-inquiry-batchID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.api = {
        name: "rEAD_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-request-inquiry-batch/:schedule-request-inquiry-batchID/note-text/:itemId",
        server: READ_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.server,
        client: READ_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.client
    };
})(READ_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch || (exports.READ_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch = READ_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch = {}));
var UPDATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch;
(function (UPDATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch) {
    UPDATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-request-inquiry-batchID": props["schedule-request-inquiry-batchID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-request-inquiry-batch", serialization.serialize(it.path["schedule-request-inquiry-batchID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "schedule-request-inquiry-batchID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.api = {
        name: "uPDATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-request-inquiry-batch/:schedule-request-inquiry-batchID/note-text/:itemId",
        server: UPDATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.server,
        client: UPDATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.client
    };
})(UPDATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch || (exports.UPDATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch = UPDATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch = {}));
var DELETE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch;
(function (DELETE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch) {
    DELETE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-request-inquiry-batchID": props["schedule-request-inquiry-batchID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-request-inquiry-batch", serialization.serialize(it.path["schedule-request-inquiry-batchID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "schedule-request-inquiry-batchID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.api = {
        name: "dELETE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch",
        method: "DELETE",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-request-inquiry-batch/:schedule-request-inquiry-batchID/note-text/:itemId",
        server: DELETE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.server,
        client: DELETE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch.client
    };
})(DELETE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch || (exports.DELETE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch = DELETE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiryBatch = {}));
var List_all_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry;
(function (List_all_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry) {
    List_all_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-request-inquiryID": props["schedule-request-inquiryID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-request-inquiry", serialization.serialize(it.path["schedule-request-inquiryID"]), "note-text"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "schedule-request-inquiryID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry.api = {
        name: "list_all_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-request-inquiry/:schedule-request-inquiryID/note-text",
        server: List_all_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry.server,
        client: List_all_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry.client
    };
})(List_all_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry || (exports.List_all_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry = List_all_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry = {}));
var CREATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry;
(function (CREATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry) {
    CREATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-request-inquiryID": props["schedule-request-inquiryID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-request-inquiry", serialization.serialize(it.path["schedule-request-inquiryID"]), "note-text"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "schedule-request-inquiryID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry.api = {
        name: "cREATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-request-inquiry/:schedule-request-inquiryID/note-text",
        server: CREATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry.server,
        client: CREATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry.client
    };
})(CREATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry || (exports.CREATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry = CREATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry = {}));
var READ_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry;
(function (READ_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry) {
    READ_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-request-inquiryID": props["schedule-request-inquiryID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-request-inquiry", serialization.serialize(it.path["schedule-request-inquiryID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "schedule-request-inquiryID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry.api = {
        name: "rEAD_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-request-inquiry/:schedule-request-inquiryID/note-text/:itemId",
        server: READ_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry.server,
        client: READ_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry.client
    };
})(READ_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry || (exports.READ_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry = READ_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry = {}));
var UPDATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry;
(function (UPDATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry) {
    UPDATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-request-inquiryID": props["schedule-request-inquiryID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-request-inquiry", serialization.serialize(it.path["schedule-request-inquiryID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "schedule-request-inquiryID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry.api = {
        name: "uPDATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-request-inquiry/:schedule-request-inquiryID/note-text/:itemId",
        server: UPDATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry.server,
        client: UPDATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry.client
    };
})(UPDATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry || (exports.UPDATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry = UPDATE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry = {}));
var DELETE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry;
(function (DELETE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry) {
    DELETE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "schedule-request-inquiryID": props["schedule-request-inquiryID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-request-inquiry", serialization.serialize(it.path["schedule-request-inquiryID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "schedule-request-inquiryID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry.api = {
        name: "dELETE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry",
        method: "DELETE",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-request-inquiry/:schedule-request-inquiryID/note-text/:itemId",
        server: DELETE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry.server,
        client: DELETE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry.client
    };
})(DELETE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry || (exports.DELETE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry = DELETE_NoteText_for_User_MonetaryAccount_ScheduleRequestInquiry = {}));
var List_all_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction;
(function (List_all_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction) {
    List_all_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "sofort-merchant-transactionID": props["sofort-merchant-transactionID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "sofort-merchant-transaction", serialization.serialize(it.path["sofort-merchant-transactionID"]), "note-text"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "sofort-merchant-transactionID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction.api = {
        name: "list_all_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/sofort-merchant-transaction/:sofort-merchant-transactionID/note-text",
        server: List_all_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction.server,
        client: List_all_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction.client
    };
})(List_all_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction || (exports.List_all_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction = List_all_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction = {}));
var CREATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction;
(function (CREATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction) {
    CREATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "sofort-merchant-transactionID": props["sofort-merchant-transactionID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "sofort-merchant-transaction", serialization.serialize(it.path["sofort-merchant-transactionID"]), "note-text"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "sofort-merchant-transactionID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction.api = {
        name: "cREATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/sofort-merchant-transaction/:sofort-merchant-transactionID/note-text",
        server: CREATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction.server,
        client: CREATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction.client
    };
})(CREATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction || (exports.CREATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction = CREATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction = {}));
var READ_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction;
(function (READ_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction) {
    READ_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "sofort-merchant-transactionID": props["sofort-merchant-transactionID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "sofort-merchant-transaction", serialization.serialize(it.path["sofort-merchant-transactionID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "sofort-merchant-transactionID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction.api = {
        name: "rEAD_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/sofort-merchant-transaction/:sofort-merchant-transactionID/note-text/:itemId",
        server: READ_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction.server,
        client: READ_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction.client
    };
})(READ_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction || (exports.READ_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction = READ_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction = {}));
var UPDATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction;
(function (UPDATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction) {
    UPDATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "sofort-merchant-transactionID": props["sofort-merchant-transactionID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "sofort-merchant-transaction", serialization.serialize(it.path["sofort-merchant-transactionID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "sofort-merchant-transactionID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction.api = {
        name: "uPDATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/sofort-merchant-transaction/:sofort-merchant-transactionID/note-text/:itemId",
        server: UPDATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction.server,
        client: UPDATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction.client
    };
})(UPDATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction || (exports.UPDATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction = UPDATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction = {}));
var DELETE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction;
(function (DELETE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction) {
    DELETE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "sofort-merchant-transactionID": props["sofort-merchant-transactionID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "sofort-merchant-transaction", serialization.serialize(it.path["sofort-merchant-transactionID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "sofort-merchant-transactionID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction.api = {
        name: "dELETE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction",
        method: "DELETE",
        path: "user/:userID/monetary-account/:monetary-accountID/sofort-merchant-transaction/:sofort-merchant-transactionID/note-text/:itemId",
        server: DELETE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction.server,
        client: DELETE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction.client
    };
})(DELETE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction || (exports.DELETE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction = DELETE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction = {}));
var List_all_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult;
(function (List_all_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult) {
    List_all_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "whitelistID": props["whitelistID"], "whitelist-resultID": props["whitelist-resultID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "whitelist", serialization.serialize(it.path["whitelistID"]), "whitelist-result", serialization.serialize(it.path["whitelist-resultID"]), "note-text"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "whitelistID": serialization.deserialize(it.path[5]), "whitelist-resultID": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult.api = {
        name: "list_all_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/whitelist/:whitelistID/whitelist-result/:whitelist-resultID/note-text",
        server: List_all_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult.server,
        client: List_all_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult.client
    };
})(List_all_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult || (exports.List_all_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult = List_all_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult = {}));
var CREATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult;
(function (CREATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult) {
    CREATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "whitelistID": props["whitelistID"], "whitelist-resultID": props["whitelist-resultID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "whitelist", serialization.serialize(it.path["whitelistID"]), "whitelist-result", serialization.serialize(it.path["whitelist-resultID"]), "note-text"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "whitelistID": serialization.deserialize(it.path[5]), "whitelist-resultID": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult.api = {
        name: "cREATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/whitelist/:whitelistID/whitelist-result/:whitelist-resultID/note-text",
        server: CREATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult.server,
        client: CREATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult.client
    };
})(CREATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult || (exports.CREATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult = CREATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult = {}));
var READ_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult;
(function (READ_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult) {
    READ_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "whitelistID": props["whitelistID"], "whitelist-resultID": props["whitelist-resultID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "whitelist", serialization.serialize(it.path["whitelistID"]), "whitelist-result", serialization.serialize(it.path["whitelist-resultID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "whitelistID": serialization.deserialize(it.path[5]), "whitelist-resultID": serialization.deserialize(it.path[7]), "itemId": serialization.deserialize(it.path[9])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult.api = {
        name: "rEAD_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/whitelist/:whitelistID/whitelist-result/:whitelist-resultID/note-text/:itemId",
        server: READ_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult.server,
        client: READ_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult.client
    };
})(READ_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult || (exports.READ_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult = READ_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult = {}));
var UPDATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult;
(function (UPDATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult) {
    UPDATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "whitelistID": props["whitelistID"], "whitelist-resultID": props["whitelist-resultID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "whitelist", serialization.serialize(it.path["whitelistID"]), "whitelist-result", serialization.serialize(it.path["whitelist-resultID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "whitelistID": serialization.deserialize(it.path[5]), "whitelist-resultID": serialization.deserialize(it.path[7]), "itemId": serialization.deserialize(it.path[9])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult.api = {
        name: "uPDATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/whitelist/:whitelistID/whitelist-result/:whitelist-resultID/note-text/:itemId",
        server: UPDATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult.server,
        client: UPDATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult.client
    };
})(UPDATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult || (exports.UPDATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult = UPDATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult = {}));
var DELETE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult;
(function (DELETE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult) {
    DELETE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "whitelistID": props["whitelistID"], "whitelist-resultID": props["whitelist-resultID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "whitelist", serialization.serialize(it.path["whitelistID"]), "whitelist-result", serialization.serialize(it.path["whitelist-resultID"]), "note-text", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "whitelistID": serialization.deserialize(it.path[5]), "whitelist-resultID": serialization.deserialize(it.path[7]), "itemId": serialization.deserialize(it.path[9])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult.api = {
        name: "dELETE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult",
        method: "DELETE",
        path: "user/:userID/monetary-account/:monetary-accountID/whitelist/:whitelistID/whitelist-result/:whitelist-resultID/note-text/:itemId",
        server: DELETE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult.server,
        client: DELETE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult.client
    };
})(DELETE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult || (exports.DELETE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult = DELETE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult = {}));
var List_all_NotificationFilterEmail_for_User;
(function (List_all_NotificationFilterEmail_for_User) {
    List_all_NotificationFilterEmail_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_NotificationFilterEmail_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NotificationFilterEmail_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NotificationFilterEmail_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "notification-filter-email"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_NotificationFilterEmail_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_NotificationFilterEmail_for_User.api = {
        name: "list_all_NotificationFilterEmail_for_User",
        method: "GET",
        path: "user/:userID/notification-filter-email",
        server: List_all_NotificationFilterEmail_for_User.server,
        client: List_all_NotificationFilterEmail_for_User.client
    };
})(List_all_NotificationFilterEmail_for_User || (exports.List_all_NotificationFilterEmail_for_User = List_all_NotificationFilterEmail_for_User = {}));
var CREATE_NotificationFilterEmail_for_User;
(function (CREATE_NotificationFilterEmail_for_User) {
    CREATE_NotificationFilterEmail_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_NotificationFilterEmail_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NotificationFilterEmail_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NotificationFilterEmail_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "notification-filter-email"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_NotificationFilterEmail_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_NotificationFilterEmail_for_User.api = {
        name: "cREATE_NotificationFilterEmail_for_User",
        method: "POST",
        path: "user/:userID/notification-filter-email",
        server: CREATE_NotificationFilterEmail_for_User.server,
        client: CREATE_NotificationFilterEmail_for_User.client
    };
})(CREATE_NotificationFilterEmail_for_User || (exports.CREATE_NotificationFilterEmail_for_User = CREATE_NotificationFilterEmail_for_User = {}));
var List_all_NotificationFilterFailure_for_User;
(function (List_all_NotificationFilterFailure_for_User) {
    List_all_NotificationFilterFailure_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_NotificationFilterFailure_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NotificationFilterFailure_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NotificationFilterFailure_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "notification-filter-failure"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_NotificationFilterFailure_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_NotificationFilterFailure_for_User.api = {
        name: "list_all_NotificationFilterFailure_for_User",
        method: "GET",
        path: "user/:userID/notification-filter-failure",
        server: List_all_NotificationFilterFailure_for_User.server,
        client: List_all_NotificationFilterFailure_for_User.client
    };
})(List_all_NotificationFilterFailure_for_User || (exports.List_all_NotificationFilterFailure_for_User = List_all_NotificationFilterFailure_for_User = {}));
var CREATE_NotificationFilterFailure_for_User;
(function (CREATE_NotificationFilterFailure_for_User) {
    CREATE_NotificationFilterFailure_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_NotificationFilterFailure_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NotificationFilterFailure_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NotificationFilterFailure_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "notification-filter-failure"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_NotificationFilterFailure_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_NotificationFilterFailure_for_User.api = {
        name: "cREATE_NotificationFilterFailure_for_User",
        method: "POST",
        path: "user/:userID/notification-filter-failure",
        server: CREATE_NotificationFilterFailure_for_User.server,
        client: CREATE_NotificationFilterFailure_for_User.client
    };
})(CREATE_NotificationFilterFailure_for_User || (exports.CREATE_NotificationFilterFailure_for_User = CREATE_NotificationFilterFailure_for_User = {}));
var List_all_NotificationFilterPush_for_User;
(function (List_all_NotificationFilterPush_for_User) {
    List_all_NotificationFilterPush_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_NotificationFilterPush_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NotificationFilterPush_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NotificationFilterPush_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "notification-filter-push"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_NotificationFilterPush_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_NotificationFilterPush_for_User.api = {
        name: "list_all_NotificationFilterPush_for_User",
        method: "GET",
        path: "user/:userID/notification-filter-push",
        server: List_all_NotificationFilterPush_for_User.server,
        client: List_all_NotificationFilterPush_for_User.client
    };
})(List_all_NotificationFilterPush_for_User || (exports.List_all_NotificationFilterPush_for_User = List_all_NotificationFilterPush_for_User = {}));
var CREATE_NotificationFilterPush_for_User;
(function (CREATE_NotificationFilterPush_for_User) {
    CREATE_NotificationFilterPush_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_NotificationFilterPush_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NotificationFilterPush_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NotificationFilterPush_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "notification-filter-push"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_NotificationFilterPush_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_NotificationFilterPush_for_User.api = {
        name: "cREATE_NotificationFilterPush_for_User",
        method: "POST",
        path: "user/:userID/notification-filter-push",
        server: CREATE_NotificationFilterPush_for_User.server,
        client: CREATE_NotificationFilterPush_for_User.client
    };
})(CREATE_NotificationFilterPush_for_User || (exports.CREATE_NotificationFilterPush_for_User = CREATE_NotificationFilterPush_for_User = {}));
var List_all_NotificationFilterUrl_for_User;
(function (List_all_NotificationFilterUrl_for_User) {
    List_all_NotificationFilterUrl_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_NotificationFilterUrl_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NotificationFilterUrl_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NotificationFilterUrl_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "notification-filter-url"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_NotificationFilterUrl_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_NotificationFilterUrl_for_User.api = {
        name: "list_all_NotificationFilterUrl_for_User",
        method: "GET",
        path: "user/:userID/notification-filter-url",
        server: List_all_NotificationFilterUrl_for_User.server,
        client: List_all_NotificationFilterUrl_for_User.client
    };
})(List_all_NotificationFilterUrl_for_User || (exports.List_all_NotificationFilterUrl_for_User = List_all_NotificationFilterUrl_for_User = {}));
var CREATE_NotificationFilterUrl_for_User;
(function (CREATE_NotificationFilterUrl_for_User) {
    CREATE_NotificationFilterUrl_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_NotificationFilterUrl_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NotificationFilterUrl_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NotificationFilterUrl_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "notification-filter-url"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_NotificationFilterUrl_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_NotificationFilterUrl_for_User.api = {
        name: "cREATE_NotificationFilterUrl_for_User",
        method: "POST",
        path: "user/:userID/notification-filter-url",
        server: CREATE_NotificationFilterUrl_for_User.server,
        client: CREATE_NotificationFilterUrl_for_User.client
    };
})(CREATE_NotificationFilterUrl_for_User || (exports.CREATE_NotificationFilterUrl_for_User = CREATE_NotificationFilterUrl_for_User = {}));
var List_all_NotificationFilterUrl_for_User_MonetaryAccount;
(function (List_all_NotificationFilterUrl_for_User_MonetaryAccount) {
    List_all_NotificationFilterUrl_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_NotificationFilterUrl_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NotificationFilterUrl_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_NotificationFilterUrl_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "notification-filter-url"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_NotificationFilterUrl_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_NotificationFilterUrl_for_User_MonetaryAccount.api = {
        name: "list_all_NotificationFilterUrl_for_User_MonetaryAccount",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/notification-filter-url",
        server: List_all_NotificationFilterUrl_for_User_MonetaryAccount.server,
        client: List_all_NotificationFilterUrl_for_User_MonetaryAccount.client
    };
})(List_all_NotificationFilterUrl_for_User_MonetaryAccount || (exports.List_all_NotificationFilterUrl_for_User_MonetaryAccount = List_all_NotificationFilterUrl_for_User_MonetaryAccount = {}));
var CREATE_NotificationFilterUrl_for_User_MonetaryAccount;
(function (CREATE_NotificationFilterUrl_for_User_MonetaryAccount) {
    CREATE_NotificationFilterUrl_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_NotificationFilterUrl_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NotificationFilterUrl_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_NotificationFilterUrl_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "notification-filter-url"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_NotificationFilterUrl_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_NotificationFilterUrl_for_User_MonetaryAccount.api = {
        name: "cREATE_NotificationFilterUrl_for_User_MonetaryAccount",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/notification-filter-url",
        server: CREATE_NotificationFilterUrl_for_User_MonetaryAccount.server,
        client: CREATE_NotificationFilterUrl_for_User_MonetaryAccount.client
    };
})(CREATE_NotificationFilterUrl_for_User_MonetaryAccount || (exports.CREATE_NotificationFilterUrl_for_User_MonetaryAccount = CREATE_NotificationFilterUrl_for_User_MonetaryAccount = {}));
var READ_OauthClient_for_User;
(function (READ_OauthClient_for_User) {
    READ_OauthClient_for_User.request = (props) => ({
        path: { "userID": props["userID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_OauthClient_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_OauthClient_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_OauthClient_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "oauth-client", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_OauthClient_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "itemId": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_OauthClient_for_User.api = {
        name: "rEAD_OauthClient_for_User",
        method: "GET",
        path: "user/:userID/oauth-client/:itemId",
        server: READ_OauthClient_for_User.server,
        client: READ_OauthClient_for_User.client
    };
})(READ_OauthClient_for_User || (exports.READ_OauthClient_for_User = READ_OauthClient_for_User = {}));
var UPDATE_OauthClient_for_User;
(function (UPDATE_OauthClient_for_User) {
    UPDATE_OauthClient_for_User.request = (props) => ({
        path: { "userID": props["userID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_OauthClient_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_OauthClient_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_OauthClient_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "oauth-client", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_OauthClient_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "itemId": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_OauthClient_for_User.api = {
        name: "uPDATE_OauthClient_for_User",
        method: "PUT",
        path: "user/:userID/oauth-client/:itemId",
        server: UPDATE_OauthClient_for_User.server,
        client: UPDATE_OauthClient_for_User.client
    };
})(UPDATE_OauthClient_for_User || (exports.UPDATE_OauthClient_for_User = UPDATE_OauthClient_for_User = {}));
var List_all_OauthClient_for_User;
(function (List_all_OauthClient_for_User) {
    List_all_OauthClient_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_OauthClient_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_OauthClient_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_OauthClient_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "oauth-client"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_OauthClient_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_OauthClient_for_User.api = {
        name: "list_all_OauthClient_for_User",
        method: "GET",
        path: "user/:userID/oauth-client",
        server: List_all_OauthClient_for_User.server,
        client: List_all_OauthClient_for_User.client
    };
})(List_all_OauthClient_for_User || (exports.List_all_OauthClient_for_User = List_all_OauthClient_for_User = {}));
var CREATE_OauthClient_for_User;
(function (CREATE_OauthClient_for_User) {
    CREATE_OauthClient_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_OauthClient_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_OauthClient_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_OauthClient_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "oauth-client"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_OauthClient_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_OauthClient_for_User.api = {
        name: "cREATE_OauthClient_for_User",
        method: "POST",
        path: "user/:userID/oauth-client",
        server: CREATE_OauthClient_for_User.server,
        client: CREATE_OauthClient_for_User.client
    };
})(CREATE_OauthClient_for_User || (exports.CREATE_OauthClient_for_User = CREATE_OauthClient_for_User = {}));
var List_all_Payment_for_User_MonetaryAccount;
(function (List_all_Payment_for_User_MonetaryAccount) {
    List_all_Payment_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_Payment_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Payment_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Payment_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_Payment_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_Payment_for_User_MonetaryAccount.api = {
        name: "list_all_Payment_for_User_MonetaryAccount",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/payment",
        server: List_all_Payment_for_User_MonetaryAccount.server,
        client: List_all_Payment_for_User_MonetaryAccount.client
    };
})(List_all_Payment_for_User_MonetaryAccount || (exports.List_all_Payment_for_User_MonetaryAccount = List_all_Payment_for_User_MonetaryAccount = {}));
var CREATE_Payment_for_User_MonetaryAccount;
(function (CREATE_Payment_for_User_MonetaryAccount) {
    CREATE_Payment_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_Payment_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_Payment_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_Payment_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_Payment_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_Payment_for_User_MonetaryAccount.api = {
        name: "cREATE_Payment_for_User_MonetaryAccount",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/payment",
        server: CREATE_Payment_for_User_MonetaryAccount.server,
        client: CREATE_Payment_for_User_MonetaryAccount.client
    };
})(CREATE_Payment_for_User_MonetaryAccount || (exports.CREATE_Payment_for_User_MonetaryAccount = CREATE_Payment_for_User_MonetaryAccount = {}));
var READ_Payment_for_User_MonetaryAccount;
(function (READ_Payment_for_User_MonetaryAccount) {
    READ_Payment_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_Payment_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_Payment_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_Payment_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_Payment_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_Payment_for_User_MonetaryAccount.api = {
        name: "rEAD_Payment_for_User_MonetaryAccount",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/payment/:itemId",
        server: READ_Payment_for_User_MonetaryAccount.server,
        client: READ_Payment_for_User_MonetaryAccount.client
    };
})(READ_Payment_for_User_MonetaryAccount || (exports.READ_Payment_for_User_MonetaryAccount = READ_Payment_for_User_MonetaryAccount = {}));
var List_all_Payment_for_User_MonetaryAccount_MastercardAction;
(function (List_all_Payment_for_User_MonetaryAccount_MastercardAction) {
    List_all_Payment_for_User_MonetaryAccount_MastercardAction.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "mastercard-actionID": props["mastercard-actionID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_Payment_for_User_MonetaryAccount_MastercardAction.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Payment_for_User_MonetaryAccount_MastercardAction.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Payment_for_User_MonetaryAccount_MastercardAction.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "mastercard-action", serialization.serialize(it.path["mastercard-actionID"]), "payment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_Payment_for_User_MonetaryAccount_MastercardAction.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "mastercard-actionID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_Payment_for_User_MonetaryAccount_MastercardAction.api = {
        name: "list_all_Payment_for_User_MonetaryAccount_MastercardAction",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/mastercard-action/:mastercard-actionID/payment",
        server: List_all_Payment_for_User_MonetaryAccount_MastercardAction.server,
        client: List_all_Payment_for_User_MonetaryAccount_MastercardAction.client
    };
})(List_all_Payment_for_User_MonetaryAccount_MastercardAction || (exports.List_all_Payment_for_User_MonetaryAccount_MastercardAction = List_all_Payment_for_User_MonetaryAccount_MastercardAction = {}));
var List_all_PaymentAutoAllocate_for_User_MonetaryAccount;
(function (List_all_PaymentAutoAllocate_for_User_MonetaryAccount) {
    List_all_PaymentAutoAllocate_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_PaymentAutoAllocate_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_PaymentAutoAllocate_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_PaymentAutoAllocate_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-auto-allocate"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_PaymentAutoAllocate_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_PaymentAutoAllocate_for_User_MonetaryAccount.api = {
        name: "list_all_PaymentAutoAllocate_for_User_MonetaryAccount",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/payment-auto-allocate",
        server: List_all_PaymentAutoAllocate_for_User_MonetaryAccount.server,
        client: List_all_PaymentAutoAllocate_for_User_MonetaryAccount.client
    };
})(List_all_PaymentAutoAllocate_for_User_MonetaryAccount || (exports.List_all_PaymentAutoAllocate_for_User_MonetaryAccount = List_all_PaymentAutoAllocate_for_User_MonetaryAccount = {}));
var CREATE_PaymentAutoAllocate_for_User_MonetaryAccount;
(function (CREATE_PaymentAutoAllocate_for_User_MonetaryAccount) {
    CREATE_PaymentAutoAllocate_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_PaymentAutoAllocate_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_PaymentAutoAllocate_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_PaymentAutoAllocate_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-auto-allocate"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_PaymentAutoAllocate_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_PaymentAutoAllocate_for_User_MonetaryAccount.api = {
        name: "cREATE_PaymentAutoAllocate_for_User_MonetaryAccount",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/payment-auto-allocate",
        server: CREATE_PaymentAutoAllocate_for_User_MonetaryAccount.server,
        client: CREATE_PaymentAutoAllocate_for_User_MonetaryAccount.client
    };
})(CREATE_PaymentAutoAllocate_for_User_MonetaryAccount || (exports.CREATE_PaymentAutoAllocate_for_User_MonetaryAccount = CREATE_PaymentAutoAllocate_for_User_MonetaryAccount = {}));
var READ_PaymentAutoAllocate_for_User_MonetaryAccount;
(function (READ_PaymentAutoAllocate_for_User_MonetaryAccount) {
    READ_PaymentAutoAllocate_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_PaymentAutoAllocate_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_PaymentAutoAllocate_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_PaymentAutoAllocate_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-auto-allocate", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_PaymentAutoAllocate_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_PaymentAutoAllocate_for_User_MonetaryAccount.api = {
        name: "rEAD_PaymentAutoAllocate_for_User_MonetaryAccount",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/payment-auto-allocate/:itemId",
        server: READ_PaymentAutoAllocate_for_User_MonetaryAccount.server,
        client: READ_PaymentAutoAllocate_for_User_MonetaryAccount.client
    };
})(READ_PaymentAutoAllocate_for_User_MonetaryAccount || (exports.READ_PaymentAutoAllocate_for_User_MonetaryAccount = READ_PaymentAutoAllocate_for_User_MonetaryAccount = {}));
var UPDATE_PaymentAutoAllocate_for_User_MonetaryAccount;
(function (UPDATE_PaymentAutoAllocate_for_User_MonetaryAccount) {
    UPDATE_PaymentAutoAllocate_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_PaymentAutoAllocate_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_PaymentAutoAllocate_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_PaymentAutoAllocate_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-auto-allocate", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_PaymentAutoAllocate_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_PaymentAutoAllocate_for_User_MonetaryAccount.api = {
        name: "uPDATE_PaymentAutoAllocate_for_User_MonetaryAccount",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/payment-auto-allocate/:itemId",
        server: UPDATE_PaymentAutoAllocate_for_User_MonetaryAccount.server,
        client: UPDATE_PaymentAutoAllocate_for_User_MonetaryAccount.client
    };
})(UPDATE_PaymentAutoAllocate_for_User_MonetaryAccount || (exports.UPDATE_PaymentAutoAllocate_for_User_MonetaryAccount = UPDATE_PaymentAutoAllocate_for_User_MonetaryAccount = {}));
var DELETE_PaymentAutoAllocate_for_User_MonetaryAccount;
(function (DELETE_PaymentAutoAllocate_for_User_MonetaryAccount) {
    DELETE_PaymentAutoAllocate_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_PaymentAutoAllocate_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_PaymentAutoAllocate_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_PaymentAutoAllocate_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-auto-allocate", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_PaymentAutoAllocate_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_PaymentAutoAllocate_for_User_MonetaryAccount.api = {
        name: "dELETE_PaymentAutoAllocate_for_User_MonetaryAccount",
        method: "DELETE",
        path: "user/:userID/monetary-account/:monetary-accountID/payment-auto-allocate/:itemId",
        server: DELETE_PaymentAutoAllocate_for_User_MonetaryAccount.server,
        client: DELETE_PaymentAutoAllocate_for_User_MonetaryAccount.client
    };
})(DELETE_PaymentAutoAllocate_for_User_MonetaryAccount || (exports.DELETE_PaymentAutoAllocate_for_User_MonetaryAccount = DELETE_PaymentAutoAllocate_for_User_MonetaryAccount = {}));
var List_all_PaymentAutoAllocate_for_User;
(function (List_all_PaymentAutoAllocate_for_User) {
    List_all_PaymentAutoAllocate_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_PaymentAutoAllocate_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_PaymentAutoAllocate_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_PaymentAutoAllocate_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "payment-auto-allocate"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_PaymentAutoAllocate_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_PaymentAutoAllocate_for_User.api = {
        name: "list_all_PaymentAutoAllocate_for_User",
        method: "GET",
        path: "user/:userID/payment-auto-allocate",
        server: List_all_PaymentAutoAllocate_for_User.server,
        client: List_all_PaymentAutoAllocate_for_User.client
    };
})(List_all_PaymentAutoAllocate_for_User || (exports.List_all_PaymentAutoAllocate_for_User = List_all_PaymentAutoAllocate_for_User = {}));
var List_all_PaymentBatch_for_User_MonetaryAccount;
(function (List_all_PaymentBatch_for_User_MonetaryAccount) {
    List_all_PaymentBatch_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_PaymentBatch_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_PaymentBatch_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_PaymentBatch_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-batch"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_PaymentBatch_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_PaymentBatch_for_User_MonetaryAccount.api = {
        name: "list_all_PaymentBatch_for_User_MonetaryAccount",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/payment-batch",
        server: List_all_PaymentBatch_for_User_MonetaryAccount.server,
        client: List_all_PaymentBatch_for_User_MonetaryAccount.client
    };
})(List_all_PaymentBatch_for_User_MonetaryAccount || (exports.List_all_PaymentBatch_for_User_MonetaryAccount = List_all_PaymentBatch_for_User_MonetaryAccount = {}));
var CREATE_PaymentBatch_for_User_MonetaryAccount;
(function (CREATE_PaymentBatch_for_User_MonetaryAccount) {
    CREATE_PaymentBatch_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_PaymentBatch_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_PaymentBatch_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_PaymentBatch_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-batch"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_PaymentBatch_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_PaymentBatch_for_User_MonetaryAccount.api = {
        name: "cREATE_PaymentBatch_for_User_MonetaryAccount",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/payment-batch",
        server: CREATE_PaymentBatch_for_User_MonetaryAccount.server,
        client: CREATE_PaymentBatch_for_User_MonetaryAccount.client
    };
})(CREATE_PaymentBatch_for_User_MonetaryAccount || (exports.CREATE_PaymentBatch_for_User_MonetaryAccount = CREATE_PaymentBatch_for_User_MonetaryAccount = {}));
var READ_PaymentBatch_for_User_MonetaryAccount;
(function (READ_PaymentBatch_for_User_MonetaryAccount) {
    READ_PaymentBatch_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_PaymentBatch_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_PaymentBatch_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_PaymentBatch_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-batch", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_PaymentBatch_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_PaymentBatch_for_User_MonetaryAccount.api = {
        name: "rEAD_PaymentBatch_for_User_MonetaryAccount",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/payment-batch/:itemId",
        server: READ_PaymentBatch_for_User_MonetaryAccount.server,
        client: READ_PaymentBatch_for_User_MonetaryAccount.client
    };
})(READ_PaymentBatch_for_User_MonetaryAccount || (exports.READ_PaymentBatch_for_User_MonetaryAccount = READ_PaymentBatch_for_User_MonetaryAccount = {}));
var UPDATE_PaymentBatch_for_User_MonetaryAccount;
(function (UPDATE_PaymentBatch_for_User_MonetaryAccount) {
    UPDATE_PaymentBatch_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_PaymentBatch_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_PaymentBatch_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_PaymentBatch_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "payment-batch", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_PaymentBatch_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_PaymentBatch_for_User_MonetaryAccount.api = {
        name: "uPDATE_PaymentBatch_for_User_MonetaryAccount",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/payment-batch/:itemId",
        server: UPDATE_PaymentBatch_for_User_MonetaryAccount.server,
        client: UPDATE_PaymentBatch_for_User_MonetaryAccount.client
    };
})(UPDATE_PaymentBatch_for_User_MonetaryAccount || (exports.UPDATE_PaymentBatch_for_User_MonetaryAccount = UPDATE_PaymentBatch_for_User_MonetaryAccount = {}));
var READ_PaymentServiceProviderCredential;
(function (READ_PaymentServiceProviderCredential) {
    READ_PaymentServiceProviderCredential.request = (props) => ({
        path: { "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_PaymentServiceProviderCredential.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_PaymentServiceProviderCredential.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_PaymentServiceProviderCredential.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["payment-service-provider-credential", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_PaymentServiceProviderCredential.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "itemId": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_PaymentServiceProviderCredential.api = {
        name: "rEAD_PaymentServiceProviderCredential",
        method: "GET",
        path: "payment-service-provider-credential/:itemId",
        server: READ_PaymentServiceProviderCredential.server,
        client: READ_PaymentServiceProviderCredential.client
    };
})(READ_PaymentServiceProviderCredential || (exports.READ_PaymentServiceProviderCredential = READ_PaymentServiceProviderCredential = {}));
var CREATE_PaymentServiceProviderCredential;
(function (CREATE_PaymentServiceProviderCredential) {
    CREATE_PaymentServiceProviderCredential.request = (props) => ({
        path: {},
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_PaymentServiceProviderCredential.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_PaymentServiceProviderCredential.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_PaymentServiceProviderCredential.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["payment-service-provider-credential"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_PaymentServiceProviderCredential.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {},
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_PaymentServiceProviderCredential.api = {
        name: "cREATE_PaymentServiceProviderCredential",
        method: "POST",
        path: "payment-service-provider-credential",
        server: CREATE_PaymentServiceProviderCredential.server,
        client: CREATE_PaymentServiceProviderCredential.client
    };
})(CREATE_PaymentServiceProviderCredential || (exports.CREATE_PaymentServiceProviderCredential = CREATE_PaymentServiceProviderCredential = {}));
var List_all_PaymentServiceProviderDraftPayment_for_User;
(function (List_all_PaymentServiceProviderDraftPayment_for_User) {
    List_all_PaymentServiceProviderDraftPayment_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_PaymentServiceProviderDraftPayment_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_PaymentServiceProviderDraftPayment_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_PaymentServiceProviderDraftPayment_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "payment-service-provider-draft-payment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_PaymentServiceProviderDraftPayment_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_PaymentServiceProviderDraftPayment_for_User.api = {
        name: "list_all_PaymentServiceProviderDraftPayment_for_User",
        method: "GET",
        path: "user/:userID/payment-service-provider-draft-payment",
        server: List_all_PaymentServiceProviderDraftPayment_for_User.server,
        client: List_all_PaymentServiceProviderDraftPayment_for_User.client
    };
})(List_all_PaymentServiceProviderDraftPayment_for_User || (exports.List_all_PaymentServiceProviderDraftPayment_for_User = List_all_PaymentServiceProviderDraftPayment_for_User = {}));
var CREATE_PaymentServiceProviderDraftPayment_for_User;
(function (CREATE_PaymentServiceProviderDraftPayment_for_User) {
    CREATE_PaymentServiceProviderDraftPayment_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_PaymentServiceProviderDraftPayment_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_PaymentServiceProviderDraftPayment_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_PaymentServiceProviderDraftPayment_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "payment-service-provider-draft-payment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_PaymentServiceProviderDraftPayment_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_PaymentServiceProviderDraftPayment_for_User.api = {
        name: "cREATE_PaymentServiceProviderDraftPayment_for_User",
        method: "POST",
        path: "user/:userID/payment-service-provider-draft-payment",
        server: CREATE_PaymentServiceProviderDraftPayment_for_User.server,
        client: CREATE_PaymentServiceProviderDraftPayment_for_User.client
    };
})(CREATE_PaymentServiceProviderDraftPayment_for_User || (exports.CREATE_PaymentServiceProviderDraftPayment_for_User = CREATE_PaymentServiceProviderDraftPayment_for_User = {}));
var READ_PaymentServiceProviderDraftPayment_for_User;
(function (READ_PaymentServiceProviderDraftPayment_for_User) {
    READ_PaymentServiceProviderDraftPayment_for_User.request = (props) => ({
        path: { "userID": props["userID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_PaymentServiceProviderDraftPayment_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_PaymentServiceProviderDraftPayment_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_PaymentServiceProviderDraftPayment_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "payment-service-provider-draft-payment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_PaymentServiceProviderDraftPayment_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "itemId": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_PaymentServiceProviderDraftPayment_for_User.api = {
        name: "rEAD_PaymentServiceProviderDraftPayment_for_User",
        method: "GET",
        path: "user/:userID/payment-service-provider-draft-payment/:itemId",
        server: READ_PaymentServiceProviderDraftPayment_for_User.server,
        client: READ_PaymentServiceProviderDraftPayment_for_User.client
    };
})(READ_PaymentServiceProviderDraftPayment_for_User || (exports.READ_PaymentServiceProviderDraftPayment_for_User = READ_PaymentServiceProviderDraftPayment_for_User = {}));
var UPDATE_PaymentServiceProviderDraftPayment_for_User;
(function (UPDATE_PaymentServiceProviderDraftPayment_for_User) {
    UPDATE_PaymentServiceProviderDraftPayment_for_User.request = (props) => ({
        path: { "userID": props["userID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_PaymentServiceProviderDraftPayment_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_PaymentServiceProviderDraftPayment_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_PaymentServiceProviderDraftPayment_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "payment-service-provider-draft-payment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_PaymentServiceProviderDraftPayment_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "itemId": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_PaymentServiceProviderDraftPayment_for_User.api = {
        name: "uPDATE_PaymentServiceProviderDraftPayment_for_User",
        method: "PUT",
        path: "user/:userID/payment-service-provider-draft-payment/:itemId",
        server: UPDATE_PaymentServiceProviderDraftPayment_for_User.server,
        client: UPDATE_PaymentServiceProviderDraftPayment_for_User.client
    };
})(UPDATE_PaymentServiceProviderDraftPayment_for_User || (exports.UPDATE_PaymentServiceProviderDraftPayment_for_User = UPDATE_PaymentServiceProviderDraftPayment_for_User = {}));
var List_all_PaymentServiceProviderIssuerTransaction_for_User;
(function (List_all_PaymentServiceProviderIssuerTransaction_for_User) {
    List_all_PaymentServiceProviderIssuerTransaction_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_PaymentServiceProviderIssuerTransaction_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_PaymentServiceProviderIssuerTransaction_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_PaymentServiceProviderIssuerTransaction_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "payment-service-provider-issuer-transaction"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_PaymentServiceProviderIssuerTransaction_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_PaymentServiceProviderIssuerTransaction_for_User.api = {
        name: "list_all_PaymentServiceProviderIssuerTransaction_for_User",
        method: "GET",
        path: "user/:userID/payment-service-provider-issuer-transaction",
        server: List_all_PaymentServiceProviderIssuerTransaction_for_User.server,
        client: List_all_PaymentServiceProviderIssuerTransaction_for_User.client
    };
})(List_all_PaymentServiceProviderIssuerTransaction_for_User || (exports.List_all_PaymentServiceProviderIssuerTransaction_for_User = List_all_PaymentServiceProviderIssuerTransaction_for_User = {}));
var CREATE_PaymentServiceProviderIssuerTransaction_for_User;
(function (CREATE_PaymentServiceProviderIssuerTransaction_for_User) {
    CREATE_PaymentServiceProviderIssuerTransaction_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_PaymentServiceProviderIssuerTransaction_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_PaymentServiceProviderIssuerTransaction_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_PaymentServiceProviderIssuerTransaction_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "payment-service-provider-issuer-transaction"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_PaymentServiceProviderIssuerTransaction_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_PaymentServiceProviderIssuerTransaction_for_User.api = {
        name: "cREATE_PaymentServiceProviderIssuerTransaction_for_User",
        method: "POST",
        path: "user/:userID/payment-service-provider-issuer-transaction",
        server: CREATE_PaymentServiceProviderIssuerTransaction_for_User.server,
        client: CREATE_PaymentServiceProviderIssuerTransaction_for_User.client
    };
})(CREATE_PaymentServiceProviderIssuerTransaction_for_User || (exports.CREATE_PaymentServiceProviderIssuerTransaction_for_User = CREATE_PaymentServiceProviderIssuerTransaction_for_User = {}));
var READ_PaymentServiceProviderIssuerTransaction_for_User;
(function (READ_PaymentServiceProviderIssuerTransaction_for_User) {
    READ_PaymentServiceProviderIssuerTransaction_for_User.request = (props) => ({
        path: { "userID": props["userID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_PaymentServiceProviderIssuerTransaction_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_PaymentServiceProviderIssuerTransaction_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_PaymentServiceProviderIssuerTransaction_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "payment-service-provider-issuer-transaction", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_PaymentServiceProviderIssuerTransaction_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "itemId": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_PaymentServiceProviderIssuerTransaction_for_User.api = {
        name: "rEAD_PaymentServiceProviderIssuerTransaction_for_User",
        method: "GET",
        path: "user/:userID/payment-service-provider-issuer-transaction/:itemId",
        server: READ_PaymentServiceProviderIssuerTransaction_for_User.server,
        client: READ_PaymentServiceProviderIssuerTransaction_for_User.client
    };
})(READ_PaymentServiceProviderIssuerTransaction_for_User || (exports.READ_PaymentServiceProviderIssuerTransaction_for_User = READ_PaymentServiceProviderIssuerTransaction_for_User = {}));
var UPDATE_PaymentServiceProviderIssuerTransaction_for_User;
(function (UPDATE_PaymentServiceProviderIssuerTransaction_for_User) {
    UPDATE_PaymentServiceProviderIssuerTransaction_for_User.request = (props) => ({
        path: { "userID": props["userID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_PaymentServiceProviderIssuerTransaction_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_PaymentServiceProviderIssuerTransaction_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_PaymentServiceProviderIssuerTransaction_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "payment-service-provider-issuer-transaction", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_PaymentServiceProviderIssuerTransaction_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "itemId": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_PaymentServiceProviderIssuerTransaction_for_User.api = {
        name: "uPDATE_PaymentServiceProviderIssuerTransaction_for_User",
        method: "PUT",
        path: "user/:userID/payment-service-provider-issuer-transaction/:itemId",
        server: UPDATE_PaymentServiceProviderIssuerTransaction_for_User.server,
        client: UPDATE_PaymentServiceProviderIssuerTransaction_for_User.client
    };
})(UPDATE_PaymentServiceProviderIssuerTransaction_for_User || (exports.UPDATE_PaymentServiceProviderIssuerTransaction_for_User = UPDATE_PaymentServiceProviderIssuerTransaction_for_User = {}));
var List_all_PdfContent_for_User_Invoice;
(function (List_all_PdfContent_for_User_Invoice) {
    List_all_PdfContent_for_User_Invoice.request = (props) => ({
        path: { "userID": props["userID"], "invoiceID": props["invoiceID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_PdfContent_for_User_Invoice.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_PdfContent_for_User_Invoice.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_PdfContent_for_User_Invoice.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "invoice", serialization.serialize(it.path["invoiceID"]), "pdf-content"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_PdfContent_for_User_Invoice.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "invoiceID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_PdfContent_for_User_Invoice.api = {
        name: "list_all_PdfContent_for_User_Invoice",
        method: "GET",
        path: "user/:userID/invoice/:invoiceID/pdf-content",
        server: List_all_PdfContent_for_User_Invoice.server,
        client: List_all_PdfContent_for_User_Invoice.client
    };
})(List_all_PdfContent_for_User_Invoice || (exports.List_all_PdfContent_for_User_Invoice = List_all_PdfContent_for_User_Invoice = {}));
var CREATE_Replace_for_User_Card;
(function (CREATE_Replace_for_User_Card) {
    CREATE_Replace_for_User_Card.request = (props) => ({
        path: { "userID": props["userID"], "cardID": props["cardID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_Replace_for_User_Card.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_Replace_for_User_Card.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_Replace_for_User_Card.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "card", serialization.serialize(it.path["cardID"]), "replace"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_Replace_for_User_Card.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "cardID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_Replace_for_User_Card.api = {
        name: "cREATE_Replace_for_User_Card",
        method: "POST",
        path: "user/:userID/card/:cardID/replace",
        server: CREATE_Replace_for_User_Card.server,
        client: CREATE_Replace_for_User_Card.client
    };
})(CREATE_Replace_for_User_Card || (exports.CREATE_Replace_for_User_Card = CREATE_Replace_for_User_Card = {}));
var List_all_RequestInquiry_for_User_MonetaryAccount;
(function (List_all_RequestInquiry_for_User_MonetaryAccount) {
    List_all_RequestInquiry_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_RequestInquiry_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_RequestInquiry_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_RequestInquiry_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_RequestInquiry_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_RequestInquiry_for_User_MonetaryAccount.api = {
        name: "list_all_RequestInquiry_for_User_MonetaryAccount",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry",
        server: List_all_RequestInquiry_for_User_MonetaryAccount.server,
        client: List_all_RequestInquiry_for_User_MonetaryAccount.client
    };
})(List_all_RequestInquiry_for_User_MonetaryAccount || (exports.List_all_RequestInquiry_for_User_MonetaryAccount = List_all_RequestInquiry_for_User_MonetaryAccount = {}));
var CREATE_RequestInquiry_for_User_MonetaryAccount;
(function (CREATE_RequestInquiry_for_User_MonetaryAccount) {
    CREATE_RequestInquiry_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_RequestInquiry_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_RequestInquiry_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_RequestInquiry_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_RequestInquiry_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_RequestInquiry_for_User_MonetaryAccount.api = {
        name: "cREATE_RequestInquiry_for_User_MonetaryAccount",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry",
        server: CREATE_RequestInquiry_for_User_MonetaryAccount.server,
        client: CREATE_RequestInquiry_for_User_MonetaryAccount.client
    };
})(CREATE_RequestInquiry_for_User_MonetaryAccount || (exports.CREATE_RequestInquiry_for_User_MonetaryAccount = CREATE_RequestInquiry_for_User_MonetaryAccount = {}));
var READ_RequestInquiry_for_User_MonetaryAccount;
(function (READ_RequestInquiry_for_User_MonetaryAccount) {
    READ_RequestInquiry_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_RequestInquiry_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_RequestInquiry_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_RequestInquiry_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_RequestInquiry_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_RequestInquiry_for_User_MonetaryAccount.api = {
        name: "rEAD_RequestInquiry_for_User_MonetaryAccount",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry/:itemId",
        server: READ_RequestInquiry_for_User_MonetaryAccount.server,
        client: READ_RequestInquiry_for_User_MonetaryAccount.client
    };
})(READ_RequestInquiry_for_User_MonetaryAccount || (exports.READ_RequestInquiry_for_User_MonetaryAccount = READ_RequestInquiry_for_User_MonetaryAccount = {}));
var UPDATE_RequestInquiry_for_User_MonetaryAccount;
(function (UPDATE_RequestInquiry_for_User_MonetaryAccount) {
    UPDATE_RequestInquiry_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_RequestInquiry_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_RequestInquiry_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_RequestInquiry_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_RequestInquiry_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_RequestInquiry_for_User_MonetaryAccount.api = {
        name: "uPDATE_RequestInquiry_for_User_MonetaryAccount",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry/:itemId",
        server: UPDATE_RequestInquiry_for_User_MonetaryAccount.server,
        client: UPDATE_RequestInquiry_for_User_MonetaryAccount.client
    };
})(UPDATE_RequestInquiry_for_User_MonetaryAccount || (exports.UPDATE_RequestInquiry_for_User_MonetaryAccount = UPDATE_RequestInquiry_for_User_MonetaryAccount = {}));
var List_all_RequestInquiryBatch_for_User_MonetaryAccount;
(function (List_all_RequestInquiryBatch_for_User_MonetaryAccount) {
    List_all_RequestInquiryBatch_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_RequestInquiryBatch_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_RequestInquiryBatch_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_RequestInquiryBatch_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry-batch"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_RequestInquiryBatch_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_RequestInquiryBatch_for_User_MonetaryAccount.api = {
        name: "list_all_RequestInquiryBatch_for_User_MonetaryAccount",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry-batch",
        server: List_all_RequestInquiryBatch_for_User_MonetaryAccount.server,
        client: List_all_RequestInquiryBatch_for_User_MonetaryAccount.client
    };
})(List_all_RequestInquiryBatch_for_User_MonetaryAccount || (exports.List_all_RequestInquiryBatch_for_User_MonetaryAccount = List_all_RequestInquiryBatch_for_User_MonetaryAccount = {}));
var CREATE_RequestInquiryBatch_for_User_MonetaryAccount;
(function (CREATE_RequestInquiryBatch_for_User_MonetaryAccount) {
    CREATE_RequestInquiryBatch_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_RequestInquiryBatch_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_RequestInquiryBatch_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_RequestInquiryBatch_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry-batch"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_RequestInquiryBatch_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_RequestInquiryBatch_for_User_MonetaryAccount.api = {
        name: "cREATE_RequestInquiryBatch_for_User_MonetaryAccount",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry-batch",
        server: CREATE_RequestInquiryBatch_for_User_MonetaryAccount.server,
        client: CREATE_RequestInquiryBatch_for_User_MonetaryAccount.client
    };
})(CREATE_RequestInquiryBatch_for_User_MonetaryAccount || (exports.CREATE_RequestInquiryBatch_for_User_MonetaryAccount = CREATE_RequestInquiryBatch_for_User_MonetaryAccount = {}));
var READ_RequestInquiryBatch_for_User_MonetaryAccount;
(function (READ_RequestInquiryBatch_for_User_MonetaryAccount) {
    READ_RequestInquiryBatch_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_RequestInquiryBatch_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_RequestInquiryBatch_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_RequestInquiryBatch_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry-batch", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_RequestInquiryBatch_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_RequestInquiryBatch_for_User_MonetaryAccount.api = {
        name: "rEAD_RequestInquiryBatch_for_User_MonetaryAccount",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry-batch/:itemId",
        server: READ_RequestInquiryBatch_for_User_MonetaryAccount.server,
        client: READ_RequestInquiryBatch_for_User_MonetaryAccount.client
    };
})(READ_RequestInquiryBatch_for_User_MonetaryAccount || (exports.READ_RequestInquiryBatch_for_User_MonetaryAccount = READ_RequestInquiryBatch_for_User_MonetaryAccount = {}));
var UPDATE_RequestInquiryBatch_for_User_MonetaryAccount;
(function (UPDATE_RequestInquiryBatch_for_User_MonetaryAccount) {
    UPDATE_RequestInquiryBatch_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_RequestInquiryBatch_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_RequestInquiryBatch_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_RequestInquiryBatch_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-inquiry-batch", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_RequestInquiryBatch_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_RequestInquiryBatch_for_User_MonetaryAccount.api = {
        name: "uPDATE_RequestInquiryBatch_for_User_MonetaryAccount",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/request-inquiry-batch/:itemId",
        server: UPDATE_RequestInquiryBatch_for_User_MonetaryAccount.server,
        client: UPDATE_RequestInquiryBatch_for_User_MonetaryAccount.client
    };
})(UPDATE_RequestInquiryBatch_for_User_MonetaryAccount || (exports.UPDATE_RequestInquiryBatch_for_User_MonetaryAccount = UPDATE_RequestInquiryBatch_for_User_MonetaryAccount = {}));
var READ_RequestResponse_for_User_MonetaryAccount;
(function (READ_RequestResponse_for_User_MonetaryAccount) {
    READ_RequestResponse_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_RequestResponse_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_RequestResponse_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_RequestResponse_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-response", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_RequestResponse_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_RequestResponse_for_User_MonetaryAccount.api = {
        name: "rEAD_RequestResponse_for_User_MonetaryAccount",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/request-response/:itemId",
        server: READ_RequestResponse_for_User_MonetaryAccount.server,
        client: READ_RequestResponse_for_User_MonetaryAccount.client
    };
})(READ_RequestResponse_for_User_MonetaryAccount || (exports.READ_RequestResponse_for_User_MonetaryAccount = READ_RequestResponse_for_User_MonetaryAccount = {}));
var UPDATE_RequestResponse_for_User_MonetaryAccount;
(function (UPDATE_RequestResponse_for_User_MonetaryAccount) {
    UPDATE_RequestResponse_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_RequestResponse_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_RequestResponse_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_RequestResponse_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-response", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_RequestResponse_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_RequestResponse_for_User_MonetaryAccount.api = {
        name: "uPDATE_RequestResponse_for_User_MonetaryAccount",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/request-response/:itemId",
        server: UPDATE_RequestResponse_for_User_MonetaryAccount.server,
        client: UPDATE_RequestResponse_for_User_MonetaryAccount.client
    };
})(UPDATE_RequestResponse_for_User_MonetaryAccount || (exports.UPDATE_RequestResponse_for_User_MonetaryAccount = UPDATE_RequestResponse_for_User_MonetaryAccount = {}));
var List_all_RequestResponse_for_User_MonetaryAccount;
(function (List_all_RequestResponse_for_User_MonetaryAccount) {
    List_all_RequestResponse_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_RequestResponse_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_RequestResponse_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_RequestResponse_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "request-response"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_RequestResponse_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_RequestResponse_for_User_MonetaryAccount.api = {
        name: "list_all_RequestResponse_for_User_MonetaryAccount",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/request-response",
        server: List_all_RequestResponse_for_User_MonetaryAccount.server,
        client: List_all_RequestResponse_for_User_MonetaryAccount.client
    };
})(List_all_RequestResponse_for_User_MonetaryAccount || (exports.List_all_RequestResponse_for_User_MonetaryAccount = List_all_RequestResponse_for_User_MonetaryAccount = {}));
var CREATE_SandboxUserCompany;
(function (CREATE_SandboxUserCompany) {
    CREATE_SandboxUserCompany.request = (props) => ({
        path: {},
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_SandboxUserCompany.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_SandboxUserCompany.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_SandboxUserCompany.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["sandbox-user-company"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_SandboxUserCompany.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {},
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_SandboxUserCompany.api = {
        name: "cREATE_SandboxUserCompany",
        method: "POST",
        path: "sandbox-user-company",
        server: CREATE_SandboxUserCompany.server,
        client: CREATE_SandboxUserCompany.client
    };
})(CREATE_SandboxUserCompany || (exports.CREATE_SandboxUserCompany = CREATE_SandboxUserCompany = {}));
var CREATE_SandboxUserPerson;
(function (CREATE_SandboxUserPerson) {
    CREATE_SandboxUserPerson.request = (props) => ({
        path: {},
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_SandboxUserPerson.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_SandboxUserPerson.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_SandboxUserPerson.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["sandbox-user-person"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_SandboxUserPerson.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {},
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_SandboxUserPerson.api = {
        name: "cREATE_SandboxUserPerson",
        method: "POST",
        path: "sandbox-user-person",
        server: CREATE_SandboxUserPerson.server,
        client: CREATE_SandboxUserPerson.client
    };
})(CREATE_SandboxUserPerson || (exports.CREATE_SandboxUserPerson = CREATE_SandboxUserPerson = {}));
var READ_Schedule_for_User_MonetaryAccount;
(function (READ_Schedule_for_User_MonetaryAccount) {
    READ_Schedule_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_Schedule_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_Schedule_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_Schedule_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_Schedule_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_Schedule_for_User_MonetaryAccount.api = {
        name: "rEAD_Schedule_for_User_MonetaryAccount",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule/:itemId",
        server: READ_Schedule_for_User_MonetaryAccount.server,
        client: READ_Schedule_for_User_MonetaryAccount.client
    };
})(READ_Schedule_for_User_MonetaryAccount || (exports.READ_Schedule_for_User_MonetaryAccount = READ_Schedule_for_User_MonetaryAccount = {}));
var List_all_Schedule_for_User_MonetaryAccount;
(function (List_all_Schedule_for_User_MonetaryAccount) {
    List_all_Schedule_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_Schedule_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Schedule_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Schedule_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_Schedule_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_Schedule_for_User_MonetaryAccount.api = {
        name: "list_all_Schedule_for_User_MonetaryAccount",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule",
        server: List_all_Schedule_for_User_MonetaryAccount.server,
        client: List_all_Schedule_for_User_MonetaryAccount.client
    };
})(List_all_Schedule_for_User_MonetaryAccount || (exports.List_all_Schedule_for_User_MonetaryAccount = List_all_Schedule_for_User_MonetaryAccount = {}));
var List_all_Schedule_for_User;
(function (List_all_Schedule_for_User) {
    List_all_Schedule_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_Schedule_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Schedule_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_Schedule_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "schedule"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_Schedule_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_Schedule_for_User.api = {
        name: "list_all_Schedule_for_User",
        method: "GET",
        path: "user/:userID/schedule",
        server: List_all_Schedule_for_User.server,
        client: List_all_Schedule_for_User.client
    };
})(List_all_Schedule_for_User || (exports.List_all_Schedule_for_User = List_all_Schedule_for_User = {}));
var READ_ScheduleInstance_for_User_MonetaryAccount_Schedule;
(function (READ_ScheduleInstance_for_User_MonetaryAccount_Schedule) {
    READ_ScheduleInstance_for_User_MonetaryAccount_Schedule.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "scheduleID": props["scheduleID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_ScheduleInstance_for_User_MonetaryAccount_Schedule.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_ScheduleInstance_for_User_MonetaryAccount_Schedule.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_ScheduleInstance_for_User_MonetaryAccount_Schedule.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule", serialization.serialize(it.path["scheduleID"]), "schedule-instance", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_ScheduleInstance_for_User_MonetaryAccount_Schedule.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "scheduleID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_ScheduleInstance_for_User_MonetaryAccount_Schedule.api = {
        name: "rEAD_ScheduleInstance_for_User_MonetaryAccount_Schedule",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule/:scheduleID/schedule-instance/:itemId",
        server: READ_ScheduleInstance_for_User_MonetaryAccount_Schedule.server,
        client: READ_ScheduleInstance_for_User_MonetaryAccount_Schedule.client
    };
})(READ_ScheduleInstance_for_User_MonetaryAccount_Schedule || (exports.READ_ScheduleInstance_for_User_MonetaryAccount_Schedule = READ_ScheduleInstance_for_User_MonetaryAccount_Schedule = {}));
var UPDATE_ScheduleInstance_for_User_MonetaryAccount_Schedule;
(function (UPDATE_ScheduleInstance_for_User_MonetaryAccount_Schedule) {
    UPDATE_ScheduleInstance_for_User_MonetaryAccount_Schedule.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "scheduleID": props["scheduleID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_ScheduleInstance_for_User_MonetaryAccount_Schedule.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_ScheduleInstance_for_User_MonetaryAccount_Schedule.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_ScheduleInstance_for_User_MonetaryAccount_Schedule.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule", serialization.serialize(it.path["scheduleID"]), "schedule-instance", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_ScheduleInstance_for_User_MonetaryAccount_Schedule.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "scheduleID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_ScheduleInstance_for_User_MonetaryAccount_Schedule.api = {
        name: "uPDATE_ScheduleInstance_for_User_MonetaryAccount_Schedule",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule/:scheduleID/schedule-instance/:itemId",
        server: UPDATE_ScheduleInstance_for_User_MonetaryAccount_Schedule.server,
        client: UPDATE_ScheduleInstance_for_User_MonetaryAccount_Schedule.client
    };
})(UPDATE_ScheduleInstance_for_User_MonetaryAccount_Schedule || (exports.UPDATE_ScheduleInstance_for_User_MonetaryAccount_Schedule = UPDATE_ScheduleInstance_for_User_MonetaryAccount_Schedule = {}));
var List_all_ScheduleInstance_for_User_MonetaryAccount_Schedule;
(function (List_all_ScheduleInstance_for_User_MonetaryAccount_Schedule) {
    List_all_ScheduleInstance_for_User_MonetaryAccount_Schedule.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "scheduleID": props["scheduleID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_ScheduleInstance_for_User_MonetaryAccount_Schedule.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_ScheduleInstance_for_User_MonetaryAccount_Schedule.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_ScheduleInstance_for_User_MonetaryAccount_Schedule.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule", serialization.serialize(it.path["scheduleID"]), "schedule-instance"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_ScheduleInstance_for_User_MonetaryAccount_Schedule.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "scheduleID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_ScheduleInstance_for_User_MonetaryAccount_Schedule.api = {
        name: "list_all_ScheduleInstance_for_User_MonetaryAccount_Schedule",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule/:scheduleID/schedule-instance",
        server: List_all_ScheduleInstance_for_User_MonetaryAccount_Schedule.server,
        client: List_all_ScheduleInstance_for_User_MonetaryAccount_Schedule.client
    };
})(List_all_ScheduleInstance_for_User_MonetaryAccount_Schedule || (exports.List_all_ScheduleInstance_for_User_MonetaryAccount_Schedule = List_all_ScheduleInstance_for_User_MonetaryAccount_Schedule = {}));
var List_all_SchedulePayment_for_User_MonetaryAccount;
(function (List_all_SchedulePayment_for_User_MonetaryAccount) {
    List_all_SchedulePayment_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_SchedulePayment_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_SchedulePayment_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_SchedulePayment_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_SchedulePayment_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_SchedulePayment_for_User_MonetaryAccount.api = {
        name: "list_all_SchedulePayment_for_User_MonetaryAccount",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment",
        server: List_all_SchedulePayment_for_User_MonetaryAccount.server,
        client: List_all_SchedulePayment_for_User_MonetaryAccount.client
    };
})(List_all_SchedulePayment_for_User_MonetaryAccount || (exports.List_all_SchedulePayment_for_User_MonetaryAccount = List_all_SchedulePayment_for_User_MonetaryAccount = {}));
var CREATE_SchedulePayment_for_User_MonetaryAccount;
(function (CREATE_SchedulePayment_for_User_MonetaryAccount) {
    CREATE_SchedulePayment_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_SchedulePayment_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_SchedulePayment_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_SchedulePayment_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_SchedulePayment_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_SchedulePayment_for_User_MonetaryAccount.api = {
        name: "cREATE_SchedulePayment_for_User_MonetaryAccount",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment",
        server: CREATE_SchedulePayment_for_User_MonetaryAccount.server,
        client: CREATE_SchedulePayment_for_User_MonetaryAccount.client
    };
})(CREATE_SchedulePayment_for_User_MonetaryAccount || (exports.CREATE_SchedulePayment_for_User_MonetaryAccount = CREATE_SchedulePayment_for_User_MonetaryAccount = {}));
var READ_SchedulePayment_for_User_MonetaryAccount;
(function (READ_SchedulePayment_for_User_MonetaryAccount) {
    READ_SchedulePayment_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_SchedulePayment_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_SchedulePayment_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_SchedulePayment_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_SchedulePayment_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_SchedulePayment_for_User_MonetaryAccount.api = {
        name: "rEAD_SchedulePayment_for_User_MonetaryAccount",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment/:itemId",
        server: READ_SchedulePayment_for_User_MonetaryAccount.server,
        client: READ_SchedulePayment_for_User_MonetaryAccount.client
    };
})(READ_SchedulePayment_for_User_MonetaryAccount || (exports.READ_SchedulePayment_for_User_MonetaryAccount = READ_SchedulePayment_for_User_MonetaryAccount = {}));
var UPDATE_SchedulePayment_for_User_MonetaryAccount;
(function (UPDATE_SchedulePayment_for_User_MonetaryAccount) {
    UPDATE_SchedulePayment_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_SchedulePayment_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_SchedulePayment_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_SchedulePayment_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_SchedulePayment_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_SchedulePayment_for_User_MonetaryAccount.api = {
        name: "uPDATE_SchedulePayment_for_User_MonetaryAccount",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment/:itemId",
        server: UPDATE_SchedulePayment_for_User_MonetaryAccount.server,
        client: UPDATE_SchedulePayment_for_User_MonetaryAccount.client
    };
})(UPDATE_SchedulePayment_for_User_MonetaryAccount || (exports.UPDATE_SchedulePayment_for_User_MonetaryAccount = UPDATE_SchedulePayment_for_User_MonetaryAccount = {}));
var DELETE_SchedulePayment_for_User_MonetaryAccount;
(function (DELETE_SchedulePayment_for_User_MonetaryAccount) {
    DELETE_SchedulePayment_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_SchedulePayment_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_SchedulePayment_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_SchedulePayment_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_SchedulePayment_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_SchedulePayment_for_User_MonetaryAccount.api = {
        name: "dELETE_SchedulePayment_for_User_MonetaryAccount",
        method: "DELETE",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment/:itemId",
        server: DELETE_SchedulePayment_for_User_MonetaryAccount.server,
        client: DELETE_SchedulePayment_for_User_MonetaryAccount.client
    };
})(DELETE_SchedulePayment_for_User_MonetaryAccount || (exports.DELETE_SchedulePayment_for_User_MonetaryAccount = DELETE_SchedulePayment_for_User_MonetaryAccount = {}));
var READ_SchedulePaymentBatch_for_User_MonetaryAccount;
(function (READ_SchedulePaymentBatch_for_User_MonetaryAccount) {
    READ_SchedulePaymentBatch_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_SchedulePaymentBatch_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_SchedulePaymentBatch_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_SchedulePaymentBatch_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment-batch", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_SchedulePaymentBatch_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_SchedulePaymentBatch_for_User_MonetaryAccount.api = {
        name: "rEAD_SchedulePaymentBatch_for_User_MonetaryAccount",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment-batch/:itemId",
        server: READ_SchedulePaymentBatch_for_User_MonetaryAccount.server,
        client: READ_SchedulePaymentBatch_for_User_MonetaryAccount.client
    };
})(READ_SchedulePaymentBatch_for_User_MonetaryAccount || (exports.READ_SchedulePaymentBatch_for_User_MonetaryAccount = READ_SchedulePaymentBatch_for_User_MonetaryAccount = {}));
var UPDATE_SchedulePaymentBatch_for_User_MonetaryAccount;
(function (UPDATE_SchedulePaymentBatch_for_User_MonetaryAccount) {
    UPDATE_SchedulePaymentBatch_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_SchedulePaymentBatch_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_SchedulePaymentBatch_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_SchedulePaymentBatch_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment-batch", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_SchedulePaymentBatch_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_SchedulePaymentBatch_for_User_MonetaryAccount.api = {
        name: "uPDATE_SchedulePaymentBatch_for_User_MonetaryAccount",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment-batch/:itemId",
        server: UPDATE_SchedulePaymentBatch_for_User_MonetaryAccount.server,
        client: UPDATE_SchedulePaymentBatch_for_User_MonetaryAccount.client
    };
})(UPDATE_SchedulePaymentBatch_for_User_MonetaryAccount || (exports.UPDATE_SchedulePaymentBatch_for_User_MonetaryAccount = UPDATE_SchedulePaymentBatch_for_User_MonetaryAccount = {}));
var DELETE_SchedulePaymentBatch_for_User_MonetaryAccount;
(function (DELETE_SchedulePaymentBatch_for_User_MonetaryAccount) {
    DELETE_SchedulePaymentBatch_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_SchedulePaymentBatch_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_SchedulePaymentBatch_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_SchedulePaymentBatch_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment-batch", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_SchedulePaymentBatch_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_SchedulePaymentBatch_for_User_MonetaryAccount.api = {
        name: "dELETE_SchedulePaymentBatch_for_User_MonetaryAccount",
        method: "DELETE",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment-batch/:itemId",
        server: DELETE_SchedulePaymentBatch_for_User_MonetaryAccount.server,
        client: DELETE_SchedulePaymentBatch_for_User_MonetaryAccount.client
    };
})(DELETE_SchedulePaymentBatch_for_User_MonetaryAccount || (exports.DELETE_SchedulePaymentBatch_for_User_MonetaryAccount = DELETE_SchedulePaymentBatch_for_User_MonetaryAccount = {}));
var CREATE_SchedulePaymentBatch_for_User_MonetaryAccount;
(function (CREATE_SchedulePaymentBatch_for_User_MonetaryAccount) {
    CREATE_SchedulePaymentBatch_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_SchedulePaymentBatch_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_SchedulePaymentBatch_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_SchedulePaymentBatch_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "schedule-payment-batch"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_SchedulePaymentBatch_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_SchedulePaymentBatch_for_User_MonetaryAccount.api = {
        name: "cREATE_SchedulePaymentBatch_for_User_MonetaryAccount",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/schedule-payment-batch",
        server: CREATE_SchedulePaymentBatch_for_User_MonetaryAccount.server,
        client: CREATE_SchedulePaymentBatch_for_User_MonetaryAccount.client
    };
})(CREATE_SchedulePaymentBatch_for_User_MonetaryAccount || (exports.CREATE_SchedulePaymentBatch_for_User_MonetaryAccount = CREATE_SchedulePaymentBatch_for_User_MonetaryAccount = {}));
var CREATE_ServerError;
(function (CREATE_ServerError) {
    CREATE_ServerError.request = (props) => ({
        path: {},
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_ServerError.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_ServerError.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_ServerError.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["server-error"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_ServerError.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {},
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_ServerError.api = {
        name: "cREATE_ServerError",
        method: "POST",
        path: "server-error",
        server: CREATE_ServerError.server,
        client: CREATE_ServerError.client
    };
})(CREATE_ServerError || (exports.CREATE_ServerError = CREATE_ServerError = {}));
var List_all_ServerPublicKey_for_Installation;
(function (List_all_ServerPublicKey_for_Installation) {
    List_all_ServerPublicKey_for_Installation.request = (props) => ({
        path: { "installationID": props["installationID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_ServerPublicKey_for_Installation.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_ServerPublicKey_for_Installation.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_ServerPublicKey_for_Installation.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["installation", serialization.serialize(it.path["installationID"]), "server-public-key"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_ServerPublicKey_for_Installation.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "installationID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_ServerPublicKey_for_Installation.api = {
        name: "list_all_ServerPublicKey_for_Installation",
        method: "GET",
        path: "installation/:installationID/server-public-key",
        server: List_all_ServerPublicKey_for_Installation.server,
        client: List_all_ServerPublicKey_for_Installation.client
    };
})(List_all_ServerPublicKey_for_Installation || (exports.List_all_ServerPublicKey_for_Installation = List_all_ServerPublicKey_for_Installation = {}));
var DELETE_Session;
(function (DELETE_Session) {
    DELETE_Session.request = (props) => ({
        path: { "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_Session.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_Session.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_Session.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["session", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_Session.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "itemId": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_Session.api = {
        name: "dELETE_Session",
        method: "DELETE",
        path: "session/:itemId",
        server: DELETE_Session.server,
        client: DELETE_Session.client
    };
})(DELETE_Session || (exports.DELETE_Session = DELETE_Session = {}));
var CREATE_SessionServer;
(function (CREATE_SessionServer) {
    CREATE_SessionServer.request = (props) => ({
        path: {},
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_SessionServer.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_SessionServer.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_SessionServer.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["session-server"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_SessionServer.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {},
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_SessionServer.api = {
        name: "cREATE_SessionServer",
        method: "POST",
        path: "session-server",
        server: CREATE_SessionServer.server,
        client: CREATE_SessionServer.client
    };
})(CREATE_SessionServer || (exports.CREATE_SessionServer = CREATE_SessionServer = {}));
var List_all_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount;
(function (List_all_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount) {
    List_all_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "share-invite-monetary-account-inquiry"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount.api = {
        name: "list_all_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/share-invite-monetary-account-inquiry",
        server: List_all_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount.server,
        client: List_all_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount.client
    };
})(List_all_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount || (exports.List_all_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount = List_all_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount = {}));
var CREATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount;
(function (CREATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount) {
    CREATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "share-invite-monetary-account-inquiry"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount.api = {
        name: "cREATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/share-invite-monetary-account-inquiry",
        server: CREATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount.server,
        client: CREATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount.client
    };
})(CREATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount || (exports.CREATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount = CREATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount = {}));
var READ_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount;
(function (READ_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount) {
    READ_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "share-invite-monetary-account-inquiry", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount.api = {
        name: "rEAD_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/share-invite-monetary-account-inquiry/:itemId",
        server: READ_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount.server,
        client: READ_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount.client
    };
})(READ_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount || (exports.READ_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount = READ_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount = {}));
var UPDATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount;
(function (UPDATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount) {
    UPDATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "share-invite-monetary-account-inquiry", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount.api = {
        name: "uPDATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount",
        method: "PUT",
        path: "user/:userID/monetary-account/:monetary-accountID/share-invite-monetary-account-inquiry/:itemId",
        server: UPDATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount.server,
        client: UPDATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount.client
    };
})(UPDATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount || (exports.UPDATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount = UPDATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount = {}));
var READ_ShareInviteMonetaryAccountResponse_for_User;
(function (READ_ShareInviteMonetaryAccountResponse_for_User) {
    READ_ShareInviteMonetaryAccountResponse_for_User.request = (props) => ({
        path: { "userID": props["userID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_ShareInviteMonetaryAccountResponse_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_ShareInviteMonetaryAccountResponse_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_ShareInviteMonetaryAccountResponse_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "share-invite-monetary-account-response", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_ShareInviteMonetaryAccountResponse_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "itemId": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_ShareInviteMonetaryAccountResponse_for_User.api = {
        name: "rEAD_ShareInviteMonetaryAccountResponse_for_User",
        method: "GET",
        path: "user/:userID/share-invite-monetary-account-response/:itemId",
        server: READ_ShareInviteMonetaryAccountResponse_for_User.server,
        client: READ_ShareInviteMonetaryAccountResponse_for_User.client
    };
})(READ_ShareInviteMonetaryAccountResponse_for_User || (exports.READ_ShareInviteMonetaryAccountResponse_for_User = READ_ShareInviteMonetaryAccountResponse_for_User = {}));
var UPDATE_ShareInviteMonetaryAccountResponse_for_User;
(function (UPDATE_ShareInviteMonetaryAccountResponse_for_User) {
    UPDATE_ShareInviteMonetaryAccountResponse_for_User.request = (props) => ({
        path: { "userID": props["userID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_ShareInviteMonetaryAccountResponse_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_ShareInviteMonetaryAccountResponse_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_ShareInviteMonetaryAccountResponse_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "share-invite-monetary-account-response", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_ShareInviteMonetaryAccountResponse_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "itemId": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_ShareInviteMonetaryAccountResponse_for_User.api = {
        name: "uPDATE_ShareInviteMonetaryAccountResponse_for_User",
        method: "PUT",
        path: "user/:userID/share-invite-monetary-account-response/:itemId",
        server: UPDATE_ShareInviteMonetaryAccountResponse_for_User.server,
        client: UPDATE_ShareInviteMonetaryAccountResponse_for_User.client
    };
})(UPDATE_ShareInviteMonetaryAccountResponse_for_User || (exports.UPDATE_ShareInviteMonetaryAccountResponse_for_User = UPDATE_ShareInviteMonetaryAccountResponse_for_User = {}));
var List_all_ShareInviteMonetaryAccountResponse_for_User;
(function (List_all_ShareInviteMonetaryAccountResponse_for_User) {
    List_all_ShareInviteMonetaryAccountResponse_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_ShareInviteMonetaryAccountResponse_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_ShareInviteMonetaryAccountResponse_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_ShareInviteMonetaryAccountResponse_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "share-invite-monetary-account-response"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_ShareInviteMonetaryAccountResponse_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_ShareInviteMonetaryAccountResponse_for_User.api = {
        name: "list_all_ShareInviteMonetaryAccountResponse_for_User",
        method: "GET",
        path: "user/:userID/share-invite-monetary-account-response",
        server: List_all_ShareInviteMonetaryAccountResponse_for_User.server,
        client: List_all_ShareInviteMonetaryAccountResponse_for_User.client
    };
})(List_all_ShareInviteMonetaryAccountResponse_for_User || (exports.List_all_ShareInviteMonetaryAccountResponse_for_User = List_all_ShareInviteMonetaryAccountResponse_for_User = {}));
var READ_SofortMerchantTransaction_for_User_MonetaryAccount;
(function (READ_SofortMerchantTransaction_for_User_MonetaryAccount) {
    READ_SofortMerchantTransaction_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_SofortMerchantTransaction_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_SofortMerchantTransaction_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_SofortMerchantTransaction_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "sofort-merchant-transaction", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_SofortMerchantTransaction_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_SofortMerchantTransaction_for_User_MonetaryAccount.api = {
        name: "rEAD_SofortMerchantTransaction_for_User_MonetaryAccount",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/sofort-merchant-transaction/:itemId",
        server: READ_SofortMerchantTransaction_for_User_MonetaryAccount.server,
        client: READ_SofortMerchantTransaction_for_User_MonetaryAccount.client
    };
})(READ_SofortMerchantTransaction_for_User_MonetaryAccount || (exports.READ_SofortMerchantTransaction_for_User_MonetaryAccount = READ_SofortMerchantTransaction_for_User_MonetaryAccount = {}));
var List_all_SofortMerchantTransaction_for_User_MonetaryAccount;
(function (List_all_SofortMerchantTransaction_for_User_MonetaryAccount) {
    List_all_SofortMerchantTransaction_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_SofortMerchantTransaction_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_SofortMerchantTransaction_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_SofortMerchantTransaction_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "sofort-merchant-transaction"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_SofortMerchantTransaction_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_SofortMerchantTransaction_for_User_MonetaryAccount.api = {
        name: "list_all_SofortMerchantTransaction_for_User_MonetaryAccount",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/sofort-merchant-transaction",
        server: List_all_SofortMerchantTransaction_for_User_MonetaryAccount.server,
        client: List_all_SofortMerchantTransaction_for_User_MonetaryAccount.client
    };
})(List_all_SofortMerchantTransaction_for_User_MonetaryAccount || (exports.List_all_SofortMerchantTransaction_for_User_MonetaryAccount = List_all_SofortMerchantTransaction_for_User_MonetaryAccount = {}));
var CREATE_Statement_for_User_MonetaryAccount_Event;
(function (CREATE_Statement_for_User_MonetaryAccount_Event) {
    CREATE_Statement_for_User_MonetaryAccount_Event.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "eventID": props["eventID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_Statement_for_User_MonetaryAccount_Event.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_Statement_for_User_MonetaryAccount_Event.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_Statement_for_User_MonetaryAccount_Event.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "event", serialization.serialize(it.path["eventID"]), "statement"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_Statement_for_User_MonetaryAccount_Event.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "eventID": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_Statement_for_User_MonetaryAccount_Event.api = {
        name: "cREATE_Statement_for_User_MonetaryAccount_Event",
        method: "POST",
        path: "user/:userID/monetary-account/:monetary-accountID/event/:eventID/statement",
        server: CREATE_Statement_for_User_MonetaryAccount_Event.server,
        client: CREATE_Statement_for_User_MonetaryAccount_Event.client
    };
})(CREATE_Statement_for_User_MonetaryAccount_Event || (exports.CREATE_Statement_for_User_MonetaryAccount_Event = CREATE_Statement_for_User_MonetaryAccount_Event = {}));
var READ_Statement_for_User_MonetaryAccount_Event;
(function (READ_Statement_for_User_MonetaryAccount_Event) {
    READ_Statement_for_User_MonetaryAccount_Event.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "eventID": props["eventID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_Statement_for_User_MonetaryAccount_Event.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_Statement_for_User_MonetaryAccount_Event.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_Statement_for_User_MonetaryAccount_Event.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "event", serialization.serialize(it.path["eventID"]), "statement", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_Statement_for_User_MonetaryAccount_Event.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "eventID": serialization.deserialize(it.path[5]), "itemId": serialization.deserialize(it.path[7])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_Statement_for_User_MonetaryAccount_Event.api = {
        name: "rEAD_Statement_for_User_MonetaryAccount_Event",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/event/:eventID/statement/:itemId",
        server: READ_Statement_for_User_MonetaryAccount_Event.server,
        client: READ_Statement_for_User_MonetaryAccount_Event.client
    };
})(READ_Statement_for_User_MonetaryAccount_Event || (exports.READ_Statement_for_User_MonetaryAccount_Event = READ_Statement_for_User_MonetaryAccount_Event = {}));
var READ_SwitchServicePayment_for_User_MonetaryAccount;
(function (READ_SwitchServicePayment_for_User_MonetaryAccount) {
    READ_SwitchServicePayment_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_SwitchServicePayment_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_SwitchServicePayment_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_SwitchServicePayment_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "switch-service-payment", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_SwitchServicePayment_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_SwitchServicePayment_for_User_MonetaryAccount.api = {
        name: "rEAD_SwitchServicePayment_for_User_MonetaryAccount",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/switch-service-payment/:itemId",
        server: READ_SwitchServicePayment_for_User_MonetaryAccount.server,
        client: READ_SwitchServicePayment_for_User_MonetaryAccount.client
    };
})(READ_SwitchServicePayment_for_User_MonetaryAccount || (exports.READ_SwitchServicePayment_for_User_MonetaryAccount = READ_SwitchServicePayment_for_User_MonetaryAccount = {}));
var CREATE_TokenQrRequestIdeal_for_User;
(function (CREATE_TokenQrRequestIdeal_for_User) {
    CREATE_TokenQrRequestIdeal_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_TokenQrRequestIdeal_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_TokenQrRequestIdeal_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_TokenQrRequestIdeal_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "token-qr-request-ideal"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_TokenQrRequestIdeal_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_TokenQrRequestIdeal_for_User.api = {
        name: "cREATE_TokenQrRequestIdeal_for_User",
        method: "POST",
        path: "user/:userID/token-qr-request-ideal",
        server: CREATE_TokenQrRequestIdeal_for_User.server,
        client: CREATE_TokenQrRequestIdeal_for_User.client
    };
})(CREATE_TokenQrRequestIdeal_for_User || (exports.CREATE_TokenQrRequestIdeal_for_User = CREATE_TokenQrRequestIdeal_for_User = {}));
var CREATE_TokenQrRequestSofort_for_User;
(function (CREATE_TokenQrRequestSofort_for_User) {
    CREATE_TokenQrRequestSofort_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_TokenQrRequestSofort_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_TokenQrRequestSofort_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_TokenQrRequestSofort_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "token-qr-request-sofort"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_TokenQrRequestSofort_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_TokenQrRequestSofort_for_User.api = {
        name: "cREATE_TokenQrRequestSofort_for_User",
        method: "POST",
        path: "user/:userID/token-qr-request-sofort",
        server: CREATE_TokenQrRequestSofort_for_User.server,
        client: CREATE_TokenQrRequestSofort_for_User.client
    };
})(CREATE_TokenQrRequestSofort_for_User || (exports.CREATE_TokenQrRequestSofort_for_User = CREATE_TokenQrRequestSofort_for_User = {}));
var List_all_TransferwiseCurrency_for_User;
(function (List_all_TransferwiseCurrency_for_User) {
    List_all_TransferwiseCurrency_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_TransferwiseCurrency_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_TransferwiseCurrency_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_TransferwiseCurrency_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "transferwise-currency"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_TransferwiseCurrency_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_TransferwiseCurrency_for_User.api = {
        name: "list_all_TransferwiseCurrency_for_User",
        method: "GET",
        path: "user/:userID/transferwise-currency",
        server: List_all_TransferwiseCurrency_for_User.server,
        client: List_all_TransferwiseCurrency_for_User.client
    };
})(List_all_TransferwiseCurrency_for_User || (exports.List_all_TransferwiseCurrency_for_User = List_all_TransferwiseCurrency_for_User = {}));
var CREATE_TransferwiseQuote_for_User;
(function (CREATE_TransferwiseQuote_for_User) {
    CREATE_TransferwiseQuote_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_TransferwiseQuote_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_TransferwiseQuote_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_TransferwiseQuote_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "transferwise-quote"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_TransferwiseQuote_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_TransferwiseQuote_for_User.api = {
        name: "cREATE_TransferwiseQuote_for_User",
        method: "POST",
        path: "user/:userID/transferwise-quote",
        server: CREATE_TransferwiseQuote_for_User.server,
        client: CREATE_TransferwiseQuote_for_User.client
    };
})(CREATE_TransferwiseQuote_for_User || (exports.CREATE_TransferwiseQuote_for_User = CREATE_TransferwiseQuote_for_User = {}));
var READ_TransferwiseQuote_for_User;
(function (READ_TransferwiseQuote_for_User) {
    READ_TransferwiseQuote_for_User.request = (props) => ({
        path: { "userID": props["userID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_TransferwiseQuote_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_TransferwiseQuote_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_TransferwiseQuote_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "transferwise-quote", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_TransferwiseQuote_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "itemId": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_TransferwiseQuote_for_User.api = {
        name: "rEAD_TransferwiseQuote_for_User",
        method: "GET",
        path: "user/:userID/transferwise-quote/:itemId",
        server: READ_TransferwiseQuote_for_User.server,
        client: READ_TransferwiseQuote_for_User.client
    };
})(READ_TransferwiseQuote_for_User || (exports.READ_TransferwiseQuote_for_User = READ_TransferwiseQuote_for_User = {}));
var CREATE_TransferwiseQuoteTemporary_for_User;
(function (CREATE_TransferwiseQuoteTemporary_for_User) {
    CREATE_TransferwiseQuoteTemporary_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_TransferwiseQuoteTemporary_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_TransferwiseQuoteTemporary_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_TransferwiseQuoteTemporary_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "transferwise-quote-temporary"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_TransferwiseQuoteTemporary_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_TransferwiseQuoteTemporary_for_User.api = {
        name: "cREATE_TransferwiseQuoteTemporary_for_User",
        method: "POST",
        path: "user/:userID/transferwise-quote-temporary",
        server: CREATE_TransferwiseQuoteTemporary_for_User.server,
        client: CREATE_TransferwiseQuoteTemporary_for_User.client
    };
})(CREATE_TransferwiseQuoteTemporary_for_User || (exports.CREATE_TransferwiseQuoteTemporary_for_User = CREATE_TransferwiseQuoteTemporary_for_User = {}));
var READ_TransferwiseQuoteTemporary_for_User;
(function (READ_TransferwiseQuoteTemporary_for_User) {
    READ_TransferwiseQuoteTemporary_for_User.request = (props) => ({
        path: { "userID": props["userID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_TransferwiseQuoteTemporary_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_TransferwiseQuoteTemporary_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_TransferwiseQuoteTemporary_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "transferwise-quote-temporary", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_TransferwiseQuoteTemporary_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "itemId": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_TransferwiseQuoteTemporary_for_User.api = {
        name: "rEAD_TransferwiseQuoteTemporary_for_User",
        method: "GET",
        path: "user/:userID/transferwise-quote-temporary/:itemId",
        server: READ_TransferwiseQuoteTemporary_for_User.server,
        client: READ_TransferwiseQuoteTemporary_for_User.client
    };
})(READ_TransferwiseQuoteTemporary_for_User || (exports.READ_TransferwiseQuoteTemporary_for_User = READ_TransferwiseQuoteTemporary_for_User = {}));
var List_all_TransferwiseRecipient_for_User_TransferwiseQuote;
(function (List_all_TransferwiseRecipient_for_User_TransferwiseQuote) {
    List_all_TransferwiseRecipient_for_User_TransferwiseQuote.request = (props) => ({
        path: { "userID": props["userID"], "transferwise-quoteID": props["transferwise-quoteID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_TransferwiseRecipient_for_User_TransferwiseQuote.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_TransferwiseRecipient_for_User_TransferwiseQuote.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_TransferwiseRecipient_for_User_TransferwiseQuote.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "transferwise-quote", serialization.serialize(it.path["transferwise-quoteID"]), "transferwise-recipient"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_TransferwiseRecipient_for_User_TransferwiseQuote.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "transferwise-quoteID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_TransferwiseRecipient_for_User_TransferwiseQuote.api = {
        name: "list_all_TransferwiseRecipient_for_User_TransferwiseQuote",
        method: "GET",
        path: "user/:userID/transferwise-quote/:transferwise-quoteID/transferwise-recipient",
        server: List_all_TransferwiseRecipient_for_User_TransferwiseQuote.server,
        client: List_all_TransferwiseRecipient_for_User_TransferwiseQuote.client
    };
})(List_all_TransferwiseRecipient_for_User_TransferwiseQuote || (exports.List_all_TransferwiseRecipient_for_User_TransferwiseQuote = List_all_TransferwiseRecipient_for_User_TransferwiseQuote = {}));
var CREATE_TransferwiseRecipient_for_User_TransferwiseQuote;
(function (CREATE_TransferwiseRecipient_for_User_TransferwiseQuote) {
    CREATE_TransferwiseRecipient_for_User_TransferwiseQuote.request = (props) => ({
        path: { "userID": props["userID"], "transferwise-quoteID": props["transferwise-quoteID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_TransferwiseRecipient_for_User_TransferwiseQuote.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_TransferwiseRecipient_for_User_TransferwiseQuote.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_TransferwiseRecipient_for_User_TransferwiseQuote.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "transferwise-quote", serialization.serialize(it.path["transferwise-quoteID"]), "transferwise-recipient"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_TransferwiseRecipient_for_User_TransferwiseQuote.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "transferwise-quoteID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_TransferwiseRecipient_for_User_TransferwiseQuote.api = {
        name: "cREATE_TransferwiseRecipient_for_User_TransferwiseQuote",
        method: "POST",
        path: "user/:userID/transferwise-quote/:transferwise-quoteID/transferwise-recipient",
        server: CREATE_TransferwiseRecipient_for_User_TransferwiseQuote.server,
        client: CREATE_TransferwiseRecipient_for_User_TransferwiseQuote.client
    };
})(CREATE_TransferwiseRecipient_for_User_TransferwiseQuote || (exports.CREATE_TransferwiseRecipient_for_User_TransferwiseQuote = CREATE_TransferwiseRecipient_for_User_TransferwiseQuote = {}));
var READ_TransferwiseRecipient_for_User_TransferwiseQuote;
(function (READ_TransferwiseRecipient_for_User_TransferwiseQuote) {
    READ_TransferwiseRecipient_for_User_TransferwiseQuote.request = (props) => ({
        path: { "userID": props["userID"], "transferwise-quoteID": props["transferwise-quoteID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_TransferwiseRecipient_for_User_TransferwiseQuote.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_TransferwiseRecipient_for_User_TransferwiseQuote.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_TransferwiseRecipient_for_User_TransferwiseQuote.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "transferwise-quote", serialization.serialize(it.path["transferwise-quoteID"]), "transferwise-recipient", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_TransferwiseRecipient_for_User_TransferwiseQuote.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "transferwise-quoteID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_TransferwiseRecipient_for_User_TransferwiseQuote.api = {
        name: "rEAD_TransferwiseRecipient_for_User_TransferwiseQuote",
        method: "GET",
        path: "user/:userID/transferwise-quote/:transferwise-quoteID/transferwise-recipient/:itemId",
        server: READ_TransferwiseRecipient_for_User_TransferwiseQuote.server,
        client: READ_TransferwiseRecipient_for_User_TransferwiseQuote.client
    };
})(READ_TransferwiseRecipient_for_User_TransferwiseQuote || (exports.READ_TransferwiseRecipient_for_User_TransferwiseQuote = READ_TransferwiseRecipient_for_User_TransferwiseQuote = {}));
var DELETE_TransferwiseRecipient_for_User_TransferwiseQuote;
(function (DELETE_TransferwiseRecipient_for_User_TransferwiseQuote) {
    DELETE_TransferwiseRecipient_for_User_TransferwiseQuote.request = (props) => ({
        path: { "userID": props["userID"], "transferwise-quoteID": props["transferwise-quoteID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_TransferwiseRecipient_for_User_TransferwiseQuote.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_TransferwiseRecipient_for_User_TransferwiseQuote.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_TransferwiseRecipient_for_User_TransferwiseQuote.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "transferwise-quote", serialization.serialize(it.path["transferwise-quoteID"]), "transferwise-recipient", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_TransferwiseRecipient_for_User_TransferwiseQuote.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "transferwise-quoteID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_TransferwiseRecipient_for_User_TransferwiseQuote.api = {
        name: "dELETE_TransferwiseRecipient_for_User_TransferwiseQuote",
        method: "DELETE",
        path: "user/:userID/transferwise-quote/:transferwise-quoteID/transferwise-recipient/:itemId",
        server: DELETE_TransferwiseRecipient_for_User_TransferwiseQuote.server,
        client: DELETE_TransferwiseRecipient_for_User_TransferwiseQuote.client
    };
})(DELETE_TransferwiseRecipient_for_User_TransferwiseQuote || (exports.DELETE_TransferwiseRecipient_for_User_TransferwiseQuote = DELETE_TransferwiseRecipient_for_User_TransferwiseQuote = {}));
var List_all_TransferwiseRecipientRequirement_for_User_TransferwiseQuote;
(function (List_all_TransferwiseRecipientRequirement_for_User_TransferwiseQuote) {
    List_all_TransferwiseRecipientRequirement_for_User_TransferwiseQuote.request = (props) => ({
        path: { "userID": props["userID"], "transferwise-quoteID": props["transferwise-quoteID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_TransferwiseRecipientRequirement_for_User_TransferwiseQuote.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_TransferwiseRecipientRequirement_for_User_TransferwiseQuote.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_TransferwiseRecipientRequirement_for_User_TransferwiseQuote.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "transferwise-quote", serialization.serialize(it.path["transferwise-quoteID"]), "transferwise-recipient-requirement"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_TransferwiseRecipientRequirement_for_User_TransferwiseQuote.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "transferwise-quoteID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_TransferwiseRecipientRequirement_for_User_TransferwiseQuote.api = {
        name: "list_all_TransferwiseRecipientRequirement_for_User_TransferwiseQuote",
        method: "GET",
        path: "user/:userID/transferwise-quote/:transferwise-quoteID/transferwise-recipient-requirement",
        server: List_all_TransferwiseRecipientRequirement_for_User_TransferwiseQuote.server,
        client: List_all_TransferwiseRecipientRequirement_for_User_TransferwiseQuote.client
    };
})(List_all_TransferwiseRecipientRequirement_for_User_TransferwiseQuote || (exports.List_all_TransferwiseRecipientRequirement_for_User_TransferwiseQuote = List_all_TransferwiseRecipientRequirement_for_User_TransferwiseQuote = {}));
var CREATE_TransferwiseRecipientRequirement_for_User_TransferwiseQuote;
(function (CREATE_TransferwiseRecipientRequirement_for_User_TransferwiseQuote) {
    CREATE_TransferwiseRecipientRequirement_for_User_TransferwiseQuote.request = (props) => ({
        path: { "userID": props["userID"], "transferwise-quoteID": props["transferwise-quoteID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_TransferwiseRecipientRequirement_for_User_TransferwiseQuote.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_TransferwiseRecipientRequirement_for_User_TransferwiseQuote.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_TransferwiseRecipientRequirement_for_User_TransferwiseQuote.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "transferwise-quote", serialization.serialize(it.path["transferwise-quoteID"]), "transferwise-recipient-requirement"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_TransferwiseRecipientRequirement_for_User_TransferwiseQuote.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "transferwise-quoteID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_TransferwiseRecipientRequirement_for_User_TransferwiseQuote.api = {
        name: "cREATE_TransferwiseRecipientRequirement_for_User_TransferwiseQuote",
        method: "POST",
        path: "user/:userID/transferwise-quote/:transferwise-quoteID/transferwise-recipient-requirement",
        server: CREATE_TransferwiseRecipientRequirement_for_User_TransferwiseQuote.server,
        client: CREATE_TransferwiseRecipientRequirement_for_User_TransferwiseQuote.client
    };
})(CREATE_TransferwiseRecipientRequirement_for_User_TransferwiseQuote || (exports.CREATE_TransferwiseRecipientRequirement_for_User_TransferwiseQuote = CREATE_TransferwiseRecipientRequirement_for_User_TransferwiseQuote = {}));
var List_all_TransferwiseTransfer_for_User_TransferwiseQuote;
(function (List_all_TransferwiseTransfer_for_User_TransferwiseQuote) {
    List_all_TransferwiseTransfer_for_User_TransferwiseQuote.request = (props) => ({
        path: { "userID": props["userID"], "transferwise-quoteID": props["transferwise-quoteID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_TransferwiseTransfer_for_User_TransferwiseQuote.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_TransferwiseTransfer_for_User_TransferwiseQuote.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_TransferwiseTransfer_for_User_TransferwiseQuote.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "transferwise-quote", serialization.serialize(it.path["transferwise-quoteID"]), "transferwise-transfer"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_TransferwiseTransfer_for_User_TransferwiseQuote.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "transferwise-quoteID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_TransferwiseTransfer_for_User_TransferwiseQuote.api = {
        name: "list_all_TransferwiseTransfer_for_User_TransferwiseQuote",
        method: "GET",
        path: "user/:userID/transferwise-quote/:transferwise-quoteID/transferwise-transfer",
        server: List_all_TransferwiseTransfer_for_User_TransferwiseQuote.server,
        client: List_all_TransferwiseTransfer_for_User_TransferwiseQuote.client
    };
})(List_all_TransferwiseTransfer_for_User_TransferwiseQuote || (exports.List_all_TransferwiseTransfer_for_User_TransferwiseQuote = List_all_TransferwiseTransfer_for_User_TransferwiseQuote = {}));
var CREATE_TransferwiseTransfer_for_User_TransferwiseQuote;
(function (CREATE_TransferwiseTransfer_for_User_TransferwiseQuote) {
    CREATE_TransferwiseTransfer_for_User_TransferwiseQuote.request = (props) => ({
        path: { "userID": props["userID"], "transferwise-quoteID": props["transferwise-quoteID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_TransferwiseTransfer_for_User_TransferwiseQuote.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_TransferwiseTransfer_for_User_TransferwiseQuote.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_TransferwiseTransfer_for_User_TransferwiseQuote.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "transferwise-quote", serialization.serialize(it.path["transferwise-quoteID"]), "transferwise-transfer"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_TransferwiseTransfer_for_User_TransferwiseQuote.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "transferwise-quoteID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_TransferwiseTransfer_for_User_TransferwiseQuote.api = {
        name: "cREATE_TransferwiseTransfer_for_User_TransferwiseQuote",
        method: "POST",
        path: "user/:userID/transferwise-quote/:transferwise-quoteID/transferwise-transfer",
        server: CREATE_TransferwiseTransfer_for_User_TransferwiseQuote.server,
        client: CREATE_TransferwiseTransfer_for_User_TransferwiseQuote.client
    };
})(CREATE_TransferwiseTransfer_for_User_TransferwiseQuote || (exports.CREATE_TransferwiseTransfer_for_User_TransferwiseQuote = CREATE_TransferwiseTransfer_for_User_TransferwiseQuote = {}));
var READ_TransferwiseTransfer_for_User_TransferwiseQuote;
(function (READ_TransferwiseTransfer_for_User_TransferwiseQuote) {
    READ_TransferwiseTransfer_for_User_TransferwiseQuote.request = (props) => ({
        path: { "userID": props["userID"], "transferwise-quoteID": props["transferwise-quoteID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_TransferwiseTransfer_for_User_TransferwiseQuote.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_TransferwiseTransfer_for_User_TransferwiseQuote.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_TransferwiseTransfer_for_User_TransferwiseQuote.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "transferwise-quote", serialization.serialize(it.path["transferwise-quoteID"]), "transferwise-transfer", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_TransferwiseTransfer_for_User_TransferwiseQuote.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "transferwise-quoteID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_TransferwiseTransfer_for_User_TransferwiseQuote.api = {
        name: "rEAD_TransferwiseTransfer_for_User_TransferwiseQuote",
        method: "GET",
        path: "user/:userID/transferwise-quote/:transferwise-quoteID/transferwise-transfer/:itemId",
        server: READ_TransferwiseTransfer_for_User_TransferwiseQuote.server,
        client: READ_TransferwiseTransfer_for_User_TransferwiseQuote.client
    };
})(READ_TransferwiseTransfer_for_User_TransferwiseQuote || (exports.READ_TransferwiseTransfer_for_User_TransferwiseQuote = READ_TransferwiseTransfer_for_User_TransferwiseQuote = {}));
var CREATE_TransferwiseTransferRequirement_for_User_TransferwiseQuote;
(function (CREATE_TransferwiseTransferRequirement_for_User_TransferwiseQuote) {
    CREATE_TransferwiseTransferRequirement_for_User_TransferwiseQuote.request = (props) => ({
        path: { "userID": props["userID"], "transferwise-quoteID": props["transferwise-quoteID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_TransferwiseTransferRequirement_for_User_TransferwiseQuote.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_TransferwiseTransferRequirement_for_User_TransferwiseQuote.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_TransferwiseTransferRequirement_for_User_TransferwiseQuote.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "transferwise-quote", serialization.serialize(it.path["transferwise-quoteID"]), "transferwise-transfer-requirement"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_TransferwiseTransferRequirement_for_User_TransferwiseQuote.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "transferwise-quoteID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_TransferwiseTransferRequirement_for_User_TransferwiseQuote.api = {
        name: "cREATE_TransferwiseTransferRequirement_for_User_TransferwiseQuote",
        method: "POST",
        path: "user/:userID/transferwise-quote/:transferwise-quoteID/transferwise-transfer-requirement",
        server: CREATE_TransferwiseTransferRequirement_for_User_TransferwiseQuote.server,
        client: CREATE_TransferwiseTransferRequirement_for_User_TransferwiseQuote.client
    };
})(CREATE_TransferwiseTransferRequirement_for_User_TransferwiseQuote || (exports.CREATE_TransferwiseTransferRequirement_for_User_TransferwiseQuote = CREATE_TransferwiseTransferRequirement_for_User_TransferwiseQuote = {}));
var List_all_TransferwiseUser_for_User;
(function (List_all_TransferwiseUser_for_User) {
    List_all_TransferwiseUser_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_TransferwiseUser_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_TransferwiseUser_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_TransferwiseUser_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "transferwise-user"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_TransferwiseUser_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_TransferwiseUser_for_User.api = {
        name: "list_all_TransferwiseUser_for_User",
        method: "GET",
        path: "user/:userID/transferwise-user",
        server: List_all_TransferwiseUser_for_User.server,
        client: List_all_TransferwiseUser_for_User.client
    };
})(List_all_TransferwiseUser_for_User || (exports.List_all_TransferwiseUser_for_User = List_all_TransferwiseUser_for_User = {}));
var CREATE_TransferwiseUser_for_User;
(function (CREATE_TransferwiseUser_for_User) {
    CREATE_TransferwiseUser_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_TransferwiseUser_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_TransferwiseUser_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_TransferwiseUser_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "transferwise-user"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_TransferwiseUser_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_TransferwiseUser_for_User.api = {
        name: "cREATE_TransferwiseUser_for_User",
        method: "POST",
        path: "user/:userID/transferwise-user",
        server: CREATE_TransferwiseUser_for_User.server,
        client: CREATE_TransferwiseUser_for_User.client
    };
})(CREATE_TransferwiseUser_for_User || (exports.CREATE_TransferwiseUser_for_User = CREATE_TransferwiseUser_for_User = {}));
var List_all_TreeProgress_for_User;
(function (List_all_TreeProgress_for_User) {
    List_all_TreeProgress_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_TreeProgress_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_TreeProgress_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_TreeProgress_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "tree-progress"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_TreeProgress_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_TreeProgress_for_User.api = {
        name: "list_all_TreeProgress_for_User",
        method: "GET",
        path: "user/:userID/tree-progress",
        server: List_all_TreeProgress_for_User.server,
        client: List_all_TreeProgress_for_User.client
    };
})(List_all_TreeProgress_for_User || (exports.List_all_TreeProgress_for_User = List_all_TreeProgress_for_User = {}));
var READ_User;
(function (READ_User) {
    READ_User.request = (props) => ({
        path: { "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "itemId": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_User.api = {
        name: "rEAD_User",
        method: "GET",
        path: "user/:itemId",
        server: READ_User.server,
        client: READ_User.client
    };
})(READ_User || (exports.READ_User = READ_User = {}));
var List_all_User;
(function (List_all_User) {
    List_all_User.request = (props) => ({
        path: {},
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {},
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_User.api = {
        name: "list_all_User",
        method: "GET",
        path: "user",
        server: List_all_User.server,
        client: List_all_User.client
    };
})(List_all_User || (exports.List_all_User = List_all_User = {}));
var READ_UserCompany;
(function (READ_UserCompany) {
    READ_UserCompany.request = (props) => ({
        path: { "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_UserCompany.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_UserCompany.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_UserCompany.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user-company", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_UserCompany.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "itemId": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_UserCompany.api = {
        name: "rEAD_UserCompany",
        method: "GET",
        path: "user-company/:itemId",
        server: READ_UserCompany.server,
        client: READ_UserCompany.client
    };
})(READ_UserCompany || (exports.READ_UserCompany = READ_UserCompany = {}));
var UPDATE_UserCompany;
(function (UPDATE_UserCompany) {
    UPDATE_UserCompany.request = (props) => ({
        path: { "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_UserCompany.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_UserCompany.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_UserCompany.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user-company", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_UserCompany.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "itemId": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_UserCompany.api = {
        name: "uPDATE_UserCompany",
        method: "PUT",
        path: "user-company/:itemId",
        server: UPDATE_UserCompany.server,
        client: UPDATE_UserCompany.client
    };
})(UPDATE_UserCompany || (exports.UPDATE_UserCompany = UPDATE_UserCompany = {}));
var READ_UserPaymentServiceProvider;
(function (READ_UserPaymentServiceProvider) {
    READ_UserPaymentServiceProvider.request = (props) => ({
        path: { "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_UserPaymentServiceProvider.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_UserPaymentServiceProvider.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_UserPaymentServiceProvider.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user-payment-service-provider", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_UserPaymentServiceProvider.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "itemId": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_UserPaymentServiceProvider.api = {
        name: "rEAD_UserPaymentServiceProvider",
        method: "GET",
        path: "user-payment-service-provider/:itemId",
        server: READ_UserPaymentServiceProvider.server,
        client: READ_UserPaymentServiceProvider.client
    };
})(READ_UserPaymentServiceProvider || (exports.READ_UserPaymentServiceProvider = READ_UserPaymentServiceProvider = {}));
var READ_UserPerson;
(function (READ_UserPerson) {
    READ_UserPerson.request = (props) => ({
        path: { "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_UserPerson.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_UserPerson.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_UserPerson.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user-person", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_UserPerson.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "itemId": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_UserPerson.api = {
        name: "rEAD_UserPerson",
        method: "GET",
        path: "user-person/:itemId",
        server: READ_UserPerson.server,
        client: READ_UserPerson.client
    };
})(READ_UserPerson || (exports.READ_UserPerson = READ_UserPerson = {}));
var UPDATE_UserPerson;
(function (UPDATE_UserPerson) {
    UPDATE_UserPerson.request = (props) => ({
        path: { "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_UserPerson.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_UserPerson.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_UserPerson.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user-person", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_UserPerson.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "itemId": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_UserPerson.api = {
        name: "uPDATE_UserPerson",
        method: "PUT",
        path: "user-person/:itemId",
        server: UPDATE_UserPerson.server,
        client: UPDATE_UserPerson.client
    };
})(UPDATE_UserPerson || (exports.UPDATE_UserPerson = UPDATE_UserPerson = {}));
var READ_WhitelistSdd_for_User;
(function (READ_WhitelistSdd_for_User) {
    READ_WhitelistSdd_for_User.request = (props) => ({
        path: { "userID": props["userID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_WhitelistSdd_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_WhitelistSdd_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_WhitelistSdd_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "whitelist-sdd", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_WhitelistSdd_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "itemId": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_WhitelistSdd_for_User.api = {
        name: "rEAD_WhitelistSdd_for_User",
        method: "GET",
        path: "user/:userID/whitelist-sdd/:itemId",
        server: READ_WhitelistSdd_for_User.server,
        client: READ_WhitelistSdd_for_User.client
    };
})(READ_WhitelistSdd_for_User || (exports.READ_WhitelistSdd_for_User = READ_WhitelistSdd_for_User = {}));
var List_all_WhitelistSdd_for_User;
(function (List_all_WhitelistSdd_for_User) {
    List_all_WhitelistSdd_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_WhitelistSdd_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_WhitelistSdd_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_WhitelistSdd_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "whitelist-sdd"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_WhitelistSdd_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_WhitelistSdd_for_User.api = {
        name: "list_all_WhitelistSdd_for_User",
        method: "GET",
        path: "user/:userID/whitelist-sdd",
        server: List_all_WhitelistSdd_for_User.server,
        client: List_all_WhitelistSdd_for_User.client
    };
})(List_all_WhitelistSdd_for_User || (exports.List_all_WhitelistSdd_for_User = List_all_WhitelistSdd_for_User = {}));
var READ_WhitelistSdd_for_User_MonetaryAccount;
(function (READ_WhitelistSdd_for_User_MonetaryAccount) {
    READ_WhitelistSdd_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_WhitelistSdd_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_WhitelistSdd_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_WhitelistSdd_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "whitelist-sdd", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_WhitelistSdd_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3]), "itemId": serialization.deserialize(it.path[5])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_WhitelistSdd_for_User_MonetaryAccount.api = {
        name: "rEAD_WhitelistSdd_for_User_MonetaryAccount",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/whitelist-sdd/:itemId",
        server: READ_WhitelistSdd_for_User_MonetaryAccount.server,
        client: READ_WhitelistSdd_for_User_MonetaryAccount.client
    };
})(READ_WhitelistSdd_for_User_MonetaryAccount || (exports.READ_WhitelistSdd_for_User_MonetaryAccount = READ_WhitelistSdd_for_User_MonetaryAccount = {}));
var List_all_WhitelistSdd_for_User_MonetaryAccount;
(function (List_all_WhitelistSdd_for_User_MonetaryAccount) {
    List_all_WhitelistSdd_for_User_MonetaryAccount.request = (props) => ({
        path: { "userID": props["userID"], "monetary-accountID": props["monetary-accountID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_WhitelistSdd_for_User_MonetaryAccount.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_WhitelistSdd_for_User_MonetaryAccount.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_WhitelistSdd_for_User_MonetaryAccount.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "monetary-account", serialization.serialize(it.path["monetary-accountID"]), "whitelist-sdd"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_WhitelistSdd_for_User_MonetaryAccount.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "monetary-accountID": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_WhitelistSdd_for_User_MonetaryAccount.api = {
        name: "list_all_WhitelistSdd_for_User_MonetaryAccount",
        method: "GET",
        path: "user/:userID/monetary-account/:monetary-accountID/whitelist-sdd",
        server: List_all_WhitelistSdd_for_User_MonetaryAccount.server,
        client: List_all_WhitelistSdd_for_User_MonetaryAccount.client
    };
})(List_all_WhitelistSdd_for_User_MonetaryAccount || (exports.List_all_WhitelistSdd_for_User_MonetaryAccount = List_all_WhitelistSdd_for_User_MonetaryAccount = {}));
var READ_WhitelistSddOneOff_for_User;
(function (READ_WhitelistSddOneOff_for_User) {
    READ_WhitelistSddOneOff_for_User.request = (props) => ({
        path: { "userID": props["userID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_WhitelistSddOneOff_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_WhitelistSddOneOff_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_WhitelistSddOneOff_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "whitelist-sdd-one-off", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_WhitelistSddOneOff_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "itemId": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_WhitelistSddOneOff_for_User.api = {
        name: "rEAD_WhitelistSddOneOff_for_User",
        method: "GET",
        path: "user/:userID/whitelist-sdd-one-off/:itemId",
        server: READ_WhitelistSddOneOff_for_User.server,
        client: READ_WhitelistSddOneOff_for_User.client
    };
})(READ_WhitelistSddOneOff_for_User || (exports.READ_WhitelistSddOneOff_for_User = READ_WhitelistSddOneOff_for_User = {}));
var UPDATE_WhitelistSddOneOff_for_User;
(function (UPDATE_WhitelistSddOneOff_for_User) {
    UPDATE_WhitelistSddOneOff_for_User.request = (props) => ({
        path: { "userID": props["userID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_WhitelistSddOneOff_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_WhitelistSddOneOff_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_WhitelistSddOneOff_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "whitelist-sdd-one-off", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_WhitelistSddOneOff_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "itemId": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_WhitelistSddOneOff_for_User.api = {
        name: "uPDATE_WhitelistSddOneOff_for_User",
        method: "PUT",
        path: "user/:userID/whitelist-sdd-one-off/:itemId",
        server: UPDATE_WhitelistSddOneOff_for_User.server,
        client: UPDATE_WhitelistSddOneOff_for_User.client
    };
})(UPDATE_WhitelistSddOneOff_for_User || (exports.UPDATE_WhitelistSddOneOff_for_User = UPDATE_WhitelistSddOneOff_for_User = {}));
var DELETE_WhitelistSddOneOff_for_User;
(function (DELETE_WhitelistSddOneOff_for_User) {
    DELETE_WhitelistSddOneOff_for_User.request = (props) => ({
        path: { "userID": props["userID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_WhitelistSddOneOff_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_WhitelistSddOneOff_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_WhitelistSddOneOff_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "whitelist-sdd-one-off", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_WhitelistSddOneOff_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "itemId": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_WhitelistSddOneOff_for_User.api = {
        name: "dELETE_WhitelistSddOneOff_for_User",
        method: "DELETE",
        path: "user/:userID/whitelist-sdd-one-off/:itemId",
        server: DELETE_WhitelistSddOneOff_for_User.server,
        client: DELETE_WhitelistSddOneOff_for_User.client
    };
})(DELETE_WhitelistSddOneOff_for_User || (exports.DELETE_WhitelistSddOneOff_for_User = DELETE_WhitelistSddOneOff_for_User = {}));
var List_all_WhitelistSddOneOff_for_User;
(function (List_all_WhitelistSddOneOff_for_User) {
    List_all_WhitelistSddOneOff_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_WhitelistSddOneOff_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_WhitelistSddOneOff_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_WhitelistSddOneOff_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "whitelist-sdd-one-off"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_WhitelistSddOneOff_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_WhitelistSddOneOff_for_User.api = {
        name: "list_all_WhitelistSddOneOff_for_User",
        method: "GET",
        path: "user/:userID/whitelist-sdd-one-off",
        server: List_all_WhitelistSddOneOff_for_User.server,
        client: List_all_WhitelistSddOneOff_for_User.client
    };
})(List_all_WhitelistSddOneOff_for_User || (exports.List_all_WhitelistSddOneOff_for_User = List_all_WhitelistSddOneOff_for_User = {}));
var CREATE_WhitelistSddOneOff_for_User;
(function (CREATE_WhitelistSddOneOff_for_User) {
    CREATE_WhitelistSddOneOff_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_WhitelistSddOneOff_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_WhitelistSddOneOff_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_WhitelistSddOneOff_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "whitelist-sdd-one-off"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_WhitelistSddOneOff_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_WhitelistSddOneOff_for_User.api = {
        name: "cREATE_WhitelistSddOneOff_for_User",
        method: "POST",
        path: "user/:userID/whitelist-sdd-one-off",
        server: CREATE_WhitelistSddOneOff_for_User.server,
        client: CREATE_WhitelistSddOneOff_for_User.client
    };
})(CREATE_WhitelistSddOneOff_for_User || (exports.CREATE_WhitelistSddOneOff_for_User = CREATE_WhitelistSddOneOff_for_User = {}));
var READ_WhitelistSddRecurring_for_User;
(function (READ_WhitelistSddRecurring_for_User) {
    READ_WhitelistSddRecurring_for_User.request = (props) => ({
        path: { "userID": props["userID"], "itemId": props["itemId"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    READ_WhitelistSddRecurring_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_WhitelistSddRecurring_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    READ_WhitelistSddRecurring_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "whitelist-sdd-recurring", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    READ_WhitelistSddRecurring_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "itemId": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    READ_WhitelistSddRecurring_for_User.api = {
        name: "rEAD_WhitelistSddRecurring_for_User",
        method: "GET",
        path: "user/:userID/whitelist-sdd-recurring/:itemId",
        server: READ_WhitelistSddRecurring_for_User.server,
        client: READ_WhitelistSddRecurring_for_User.client
    };
})(READ_WhitelistSddRecurring_for_User || (exports.READ_WhitelistSddRecurring_for_User = READ_WhitelistSddRecurring_for_User = {}));
var UPDATE_WhitelistSddRecurring_for_User;
(function (UPDATE_WhitelistSddRecurring_for_User) {
    UPDATE_WhitelistSddRecurring_for_User.request = (props) => ({
        path: { "userID": props["userID"], "itemId": props["itemId"] },
        method: "PUT",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    UPDATE_WhitelistSddRecurring_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_WhitelistSddRecurring_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    UPDATE_WhitelistSddRecurring_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "PUT",
            path: ["user", serialization.serialize(it.path["userID"]), "whitelist-sdd-recurring", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    UPDATE_WhitelistSddRecurring_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "PUT",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "itemId": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    UPDATE_WhitelistSddRecurring_for_User.api = {
        name: "uPDATE_WhitelistSddRecurring_for_User",
        method: "PUT",
        path: "user/:userID/whitelist-sdd-recurring/:itemId",
        server: UPDATE_WhitelistSddRecurring_for_User.server,
        client: UPDATE_WhitelistSddRecurring_for_User.client
    };
})(UPDATE_WhitelistSddRecurring_for_User || (exports.UPDATE_WhitelistSddRecurring_for_User = UPDATE_WhitelistSddRecurring_for_User = {}));
var DELETE_WhitelistSddRecurring_for_User;
(function (DELETE_WhitelistSddRecurring_for_User) {
    DELETE_WhitelistSddRecurring_for_User.request = (props) => ({
        path: { "userID": props["userID"], "itemId": props["itemId"] },
        method: "DELETE",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    DELETE_WhitelistSddRecurring_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_WhitelistSddRecurring_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    DELETE_WhitelistSddRecurring_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "DELETE",
            path: ["user", serialization.serialize(it.path["userID"]), "whitelist-sdd-recurring", serialization.serialize(it.path["itemId"])],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    DELETE_WhitelistSddRecurring_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "DELETE",
                path: {
                    "userID": serialization.deserialize(it.path[1]), "itemId": serialization.deserialize(it.path[3])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    DELETE_WhitelistSddRecurring_for_User.api = {
        name: "dELETE_WhitelistSddRecurring_for_User",
        method: "DELETE",
        path: "user/:userID/whitelist-sdd-recurring/:itemId",
        server: DELETE_WhitelistSddRecurring_for_User.server,
        client: DELETE_WhitelistSddRecurring_for_User.client
    };
})(DELETE_WhitelistSddRecurring_for_User || (exports.DELETE_WhitelistSddRecurring_for_User = DELETE_WhitelistSddRecurring_for_User = {}));
var List_all_WhitelistSddRecurring_for_User;
(function (List_all_WhitelistSddRecurring_for_User) {
    List_all_WhitelistSddRecurring_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "GET",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: undefined,
    });
    List_all_WhitelistSddRecurring_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_WhitelistSddRecurring_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    List_all_WhitelistSddRecurring_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "GET",
            path: ["user", serialization.serialize(it.path["userID"]), "whitelist-sdd-recurring"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    List_all_WhitelistSddRecurring_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "GET",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    List_all_WhitelistSddRecurring_for_User.api = {
        name: "list_all_WhitelistSddRecurring_for_User",
        method: "GET",
        path: "user/:userID/whitelist-sdd-recurring",
        server: List_all_WhitelistSddRecurring_for_User.server,
        client: List_all_WhitelistSddRecurring_for_User.client
    };
})(List_all_WhitelistSddRecurring_for_User || (exports.List_all_WhitelistSddRecurring_for_User = List_all_WhitelistSddRecurring_for_User = {}));
var CREATE_WhitelistSddRecurring_for_User;
(function (CREATE_WhitelistSddRecurring_for_User) {
    CREATE_WhitelistSddRecurring_for_User.request = (props) => ({
        path: { "userID": props["userID"] },
        method: "POST",
        queries: {},
        headers: { "Cache-Control": props["Cache-Control"], "User-Agent": props["User-Agent"], "X-Bunq-Language": props["X-Bunq-Language"], "X-Bunq-Region": props["X-Bunq-Region"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Geolocation": props["X-Bunq-Geolocation"], "X-Bunq-Client-Authentication": props["X-Bunq-Client-Authentication"] },
        body: props.body,
    });
    CREATE_WhitelistSddRecurring_for_User.response200 = (props) => ({
        status: 200,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_WhitelistSddRecurring_for_User.response400 = (props) => ({
        status: 400,
        headers: { "X-Bunq-Client-Response-Id": props["X-Bunq-Client-Response-Id"], "X-Bunq-Client-Request-Id": props["X-Bunq-Client-Request-Id"], "X-Bunq-Server-Signature": props["X-Bunq-Server-Signature"] },
        body: props.body,
    });
    CREATE_WhitelistSddRecurring_for_User.client = (serialization) => ({
        to: (it) => ({
            method: "POST",
            path: ["user", serialization.serialize(it.path["userID"]), "whitelist-sdd-recurring"],
            queries: {},
            headers: { "Cache-Control": serialization.serialize(it.headers["Cache-Control"]), "User-Agent": serialization.serialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.serialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.serialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.serialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.serialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.serialize(it.headers["X-Bunq-Client-Authentication"]) },
            body: serialization.serialize(it.body)
        }),
        from: (it) => {
            switch (it.status) {
                case 200:
                    return {
                        status: 200,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                case 400:
                    return {
                        status: 400,
                        headers: { "X-Bunq-Client-Response-Id": serialization.deserialize(it.headers["X-Bunq-Client-Response-Id"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Server-Signature": serialization.deserialize(it.headers["X-Bunq-Server-Signature"]) },
                        body: serialization.deserialize(it.body)
                    };
                default:
                    throw new Error(`Cannot internalize response with status: ${it.status}`);
            }
        }
    });
    CREATE_WhitelistSddRecurring_for_User.server = (serialization) => ({
        from: (it) => {
            return {
                method: "POST",
                path: {
                    "userID": serialization.deserialize(it.path[1])
                },
                queries: {},
                headers: {
                    "Cache-Control": serialization.deserialize(it.headers["Cache-Control"]), "User-Agent": serialization.deserialize(it.headers["User-Agent"]), "X-Bunq-Language": serialization.deserialize(it.headers["X-Bunq-Language"]), "X-Bunq-Region": serialization.deserialize(it.headers["X-Bunq-Region"]), "X-Bunq-Client-Request-Id": serialization.deserialize(it.headers["X-Bunq-Client-Request-Id"]), "X-Bunq-Geolocation": serialization.deserialize(it.headers["X-Bunq-Geolocation"]), "X-Bunq-Client-Authentication": serialization.deserialize(it.headers["X-Bunq-Client-Authentication"])
                },
                body: serialization.deserialize(it.body)
            };
        },
        to: (it) => ({
            status: it.status,
            headers: {},
            body: serialization.serialize(it.body),
        })
    });
    CREATE_WhitelistSddRecurring_for_User.api = {
        name: "cREATE_WhitelistSddRecurring_for_User",
        method: "POST",
        path: "user/:userID/whitelist-sdd-recurring",
        server: CREATE_WhitelistSddRecurring_for_User.server,
        client: CREATE_WhitelistSddRecurring_for_User.client
    };
})(CREATE_WhitelistSddRecurring_for_User || (exports.CREATE_WhitelistSddRecurring_for_User = CREATE_WhitelistSddRecurring_for_User = {}));
